{"version":3,"file":"silentium.min.mjs","sources":["../src/Source/Source.ts","../src/Guest/Guest.ts","../src/Guest/GuestCast.ts","../src/Guest/GuestSync.ts","../src/Guest/GuestDisposable.ts","../src/Guest/GuestApplied.ts","../src/Guest/GuestExecutorApplied.ts","../src/Patron/Patron.ts","../src/Patron/PatronOnce.ts","../src/Patron/PatronPool.ts","../src/Patron/PatronApplied.ts","../src/Patron/PatronExecutorApplied.ts","../src/Source/SourceSync.ts","../src/Source/SourceChangeable.ts","../src/Source/SourceAll.ts","../src/Source/SourceSequence.ts","../src/Source/SourceMap.ts","../src/Source/SourceRace.ts","../src/Source/SourceChain.ts","../src/Source/SourceDynamic.ts","../src/Source/SourceApplied.ts","../src/Source/SourceExecutorApplied.ts","../src/Source/SourceFiltered.ts","../src/Source/SourceOnce.ts","../src/Source/SourceCombined.ts","../src/Source/SourceResettable.ts","../src/Source/SourceAny.ts","../src/Source/SourceLazy.ts","../src/Source/SourceDestroyable.ts","../src/Lazy/LazyClass.ts","../src/Lazy/Lazy.ts"],"sourcesContent":["import { give, GuestType } from \"../Guest/Guest\";\n\nexport type SourceExecutorType<T, R = unknown> = (guest: GuestType<T>) => R;\n\nexport interface SourceObjectType<T> {\n  value: SourceExecutorType<T>;\n}\n\nexport type SourceDataType<T> = Extract<\n  T,\n  string | number | boolean | Date | object | Array<unknown> | symbol\n>;\n\nexport type SourceType<T = any> =\n  | SourceExecutorType<T>\n  | SourceObjectType<T>\n  | SourceDataType<T>;\n\n/**\n * Helps to connect source and guest, if you need to get value in guest from source\n * helpful because we don't know what shape of source do we have, it can be function or object or primitive\n * @url https://silentium-lab.github.io/silentium/#/utils/value\n */\nexport const value = <T>(source: SourceType<T>, guest: GuestType<T>) => {\n  if (source === undefined || source === null) {\n    throw new Error(\"value didn't receive source argument\");\n  }\n  if (guest === undefined || source === null) {\n    throw new Error(\"value didn't receive guest argument\");\n  }\n  if (typeof source === \"function\") {\n    source(guest);\n  } else if (\n    typeof source === \"object\" &&\n    \"value\" in source &&\n    typeof source.value === \"function\"\n  ) {\n    source.value(guest);\n  } else {\n    give(source as T, guest);\n  }\n\n  return source;\n};\n\n/**\n * Helps to check what some information is of source shape\n * @url https://silentium-lab.github.io/silentium/#/utils/is-source\n */\nexport const isSource = <T>(\n  mbSource: T | SourceType<T>,\n): mbSource is SourceType<T> => {\n  if (\n    mbSource !== null &&\n    typeof mbSource === \"object\" &&\n    \"value\" in mbSource &&\n    typeof mbSource.value === \"function\"\n  ) {\n    return true;\n  }\n  return mbSource !== null && mbSource !== undefined;\n};\n\n/**\n * Represents source as function\n * @url https://silentium-lab.github.io/silentium/#/source\n */\nexport const source = <T>(source: SourceType<T>): SourceExecutorType<T> => {\n  if (source === undefined) {\n    throw new Error(\"Source constructor didn't receive executor function\");\n  }\n\n  return (guest: GuestType<T>) => {\n    value(source, guest);\n  };\n};\n","import { source, SourceExecutorType, SourceType } from \"../Source/Source\";\n\ntype GuestIntroduction = \"guest\" | \"patron\";\n\nexport type GuestExecutorType<T = any, This = void> = (value: T) => This;\n\nexport interface GuestObjectType<T = any> {\n  give(value: T): this;\n  introduction?(): GuestIntroduction;\n}\n\nexport type GuestType<T = any> = GuestExecutorType<T> | GuestObjectType<T>;\n\n/**\n * Helps to give data to guest, guests can be of different shapes\n * function guest or object guest\n * @url https://silentium-lab.github.io/silentium/#/utils/give\n */\nexport const give = <T>(\n  data: T,\n  guest?: GuestType<T>,\n): GuestType<T> | SourceExecutorType<T> => {\n  if (data === undefined) {\n    throw new Error(\"give didn't receive data argument\");\n  }\n  if (guest === undefined) {\n    return source<T>(data as SourceType<T>) as SourceExecutorType<T>;\n  }\n  if (typeof guest === \"function\") {\n    guest(data);\n  } else {\n    guest.give(data);\n  }\n  return guest;\n};\n\n/**\n * Helps to check if mbGuest can be used to retrieve value\n * @url https://silentium-lab.github.io/silentium/#/utils/is-guest\n */\nexport const isGuest = (mbGuest: any): mbGuest is GuestType => {\n  if (mbGuest === undefined) {\n    throw new Error(\"isGuest didnt receive mbGuest argument\");\n  }\n  return typeof mbGuest === \"function\" || typeof mbGuest?.give === \"function\";\n};\n\n/**\n * Helps to create guest of object type\n * @url https://silentium-lab.github.io/silentium/#/guest\n */\nexport const guest = <T>(receiver: GuestExecutorType<T>) => {\n  if (!receiver) {\n    throw new Error(\"receiver function was not passed to Guest constructor\");\n  }\n  const result = {\n    give(value: T) {\n      receiver(value);\n      return result;\n    },\n  };\n  return result;\n};\n\n/**\n * First visit of source, useful for detached sources\n * This function is important because code of source must executes\n * only after guest visited source, sources are lazy!\n * @url https://silentium-lab.github.io/silentium/#/utils/first-visit\n */\nexport const firstVisit = (afterFirstVisit: () => void) => {\n  let isVisited = false;\n  return () => {\n    if (!isVisited) {\n      afterFirstVisit();\n    }\n    isVisited = true;\n  };\n};\n","import { give, GuestType } from \"./Guest\";\nimport { GuestDisposableType, MaybeDisposableType } from \"./GuestDisposable\";\n\n/**\n * Helps to inherit guest behavior, its introduction and dispose settings\n * @url https://silentium-lab.github.io/silentium/#/guest/guest-cast\n */\nexport const guestCast = <T>(\n  sourceGuest: GuestType<any>,\n  targetGuest: GuestType<T>,\n): GuestDisposableType<T> => {\n  if (sourceGuest === undefined) {\n    throw new Error(\"GuestCast didn't receive sourceGuest argument\");\n  }\n  if (targetGuest === undefined) {\n    throw new Error(\"GuestCast didn't receive targetGuest argument\");\n  }\n\n  const result = {\n    disposed(value: T | null): boolean {\n      const maybeDisposable = sourceGuest as MaybeDisposableType;\n      return maybeDisposable.disposed ? maybeDisposable.disposed(value) : false;\n    },\n    give(value: T) {\n      give(value, targetGuest);\n      return result;\n    },\n    introduction() {\n      if (typeof sourceGuest === \"function\") {\n        return \"guest\";\n      }\n      if (!sourceGuest.introduction) {\n        return \"guest\";\n      }\n      return sourceGuest.introduction();\n    },\n  };\n\n  return result;\n};\n","import { GuestObjectType } from \"./Guest\";\n\nexport interface GuestValueType<T = any> extends GuestObjectType<T> {\n  value(): T;\n}\n\n/**\n * @url https://silentium-lab.github.io/silentium/#/guest/guest-sync\n */\nexport const guestSync = <T>(theValue?: T): GuestValueType<T> => {\n  const result = {\n    give(value: T) {\n      theValue = value;\n      return result;\n    },\n    value() {\n      if (theValue === undefined) {\n        throw new Error(\"no value in GuestSync!\");\n      }\n      return theValue;\n    },\n  };\n\n  return result;\n};\n","import { give, GuestObjectType, GuestType } from \"./Guest\";\n\nexport interface GuestDisposableType<T = any> extends GuestObjectType<T> {\n  disposed(value: T | null): boolean;\n}\n\nexport type MaybeDisposableType<T = any> = Partial<GuestDisposableType<T>>;\n\n/**\n * Connects to guest logic what can tell PatronPool\n * what guest don't need to receive new values\n * @url https://silentium-lab.github.io/silentium/#/guest/guest-disposable\n */\nexport const guestDisposable = <T>(\n  guest: GuestType,\n  disposeCheck: (value: T | null) => boolean,\n): GuestDisposableType<T> => {\n  if (guest === undefined) {\n    throw new Error(\"GuestDisposable didn't receive guest argument\");\n  }\n  if (disposeCheck === undefined) {\n    throw new Error(\"GuestDisposable didn't receive disposeCheck argument\");\n  }\n\n  const result = {\n    disposed(value: T | null): boolean {\n      return disposeCheck(value);\n    },\n    give(value: T) {\n      give(value, guest);\n      return result;\n    },\n  };\n\n  return result;\n};\n","import { give, GuestObjectType, GuestType } from \"../Guest/Guest\";\n\n/**\n * Helps to apply function to value before baseGuest will receive it\n * @url https://silentium-lab.github.io/silentium/#/guest/guest-applied\n */\nexport const guestApplied = <T, R>(\n  baseGuest: GuestType<R>,\n  applier: (value: T) => R,\n): GuestObjectType<T> => {\n  const result = {\n    give(value: T) {\n      give(applier(value), baseGuest);\n      return result;\n    },\n  };\n  return result;\n};\n","import {\n  give,\n  GuestExecutorType,\n  GuestObjectType,\n  GuestType,\n} from \"../Guest/Guest\";\n\n/**\n * Apply function to guest function of receiving value, useful for debouncing or throttling\n * @url https://silentium-lab.github.io/silentium/#/guest/guest-executor-applied\n */\nexport const guestExecutorApplied = <T>(\n  baseGuest: GuestType<T>,\n  applier: (executor: GuestExecutorType<T>) => GuestExecutorType<T>,\n): GuestObjectType<T> => {\n  const result = {\n    give: applier((v) => give(v, baseGuest)),\n  };\n\n  return result as GuestObjectType<T>;\n};\n","import { give, GuestType } from \"../Guest/Guest\";\nimport { GuestDisposableType } from \"../Guest/GuestDisposable\";\n\nexport type PatronType<T> = GuestDisposableType<T> & {\n  introduction(): \"patron\";\n};\n\n/**\n * Helps to check what incoming object is patron\n * @url https://silentium-lab.github.io/silentium/#/utils/is-patron\n */\nexport const isPatron = (guest: GuestType): guest is PatronType<unknown> =>\n  typeof guest === \"object\" &&\n  guest !== null &&\n  guest?.introduction?.() === \"patron\";\n\nexport const introduction = () => \"patron\" as const;\n\n/**\n * Help to turn existed guest intro patron\n * @url https://silentium-lab.github.io/silentium/#/patron\n */\nexport const patron = <T>(\n  willBePatron: GuestType<T>,\n): GuestDisposableType<T> => {\n  if (willBePatron === undefined) {\n    throw new Error(\"Patron didn't receive willBePatron argument\");\n  }\n\n  const result = {\n    give(value: T) {\n      give(value, willBePatron);\n      return result;\n    },\n    disposed(value: T | null): boolean {\n      const maybeDisposable = willBePatron as GuestDisposableType;\n      return maybeDisposable?.disposed?.(value) || false;\n    },\n    introduction,\n  };\n\n  return result;\n};\n","import { introduction } from \"../Patron/Patron\";\nimport { give, GuestType } from \"../Guest/Guest\";\nimport {\n  GuestDisposableType,\n  MaybeDisposableType,\n} from \"../Guest/GuestDisposable\";\n\n/**\n * Helps to call patron only once, this will be helpful when you\n * need value but you know what value can not be existed at a time of requesting\n * @url https://silentium-lab.github.io/silentium/#/patron/patron-once\n */\nexport const patronOnce = <T>(\n  baseGuest: GuestType<T>,\n): GuestDisposableType<T> => {\n  if (baseGuest === undefined) {\n    throw new Error(\"PatronOnce didn't receive baseGuest argument\");\n  }\n\n  let received = false;\n\n  const result = {\n    give(value: T) {\n      if (!received) {\n        received = true;\n        give(value, baseGuest);\n      }\n      return result;\n    },\n    disposed(value: T | null): boolean {\n      if (received) {\n        return true;\n      }\n      const maybeDisposable = baseGuest as MaybeDisposableType;\n      return maybeDisposable.disposed ? maybeDisposable.disposed(value) : false;\n    },\n    introduction,\n  };\n\n  return result;\n};\n","import { source, SourceType } from \"../Source/Source\";\nimport { give, GuestObjectType, GuestType } from \"../Guest/Guest\";\nimport { GuestDisposableType } from \"../Guest/GuestDisposable\";\nimport { DestroyableType } from \"../Source/SourceDestroyable\";\n\nconst poolSets = new Map<PoolType, Set<GuestObjectType>>();\nconst poolsOfInitiators = new Map<SourceType, PoolType>();\nconst subSources = new Map<SourceType, SourceType[]>();\n\nconst poolsChangeFns: (() => void)[] = [];\nconst notifyPoolsChange = () => {\n  poolsChangeFns.forEach((fn) => fn());\n};\nconst lastPatronPoolsStatistic = {\n  poolsCount: 0,\n  patronsCount: 0,\n};\n\n/**\n * Helps debug the application and detect issues with frozen pools\n * @url https://silentium-lab.github.io/silentium/#/utils/patron-pools-statistic\n */\nexport const patronPoolsStatistic = source<{\n  poolsCount: number;\n  patronsCount: number;\n}>((g) => {\n  give(lastPatronPoolsStatistic, g);\n  poolsChangeFns.push(() => {\n    let patronsCount = 0;\n    poolSets.forEach((set) => {\n      patronsCount += set.size;\n    });\n    lastPatronPoolsStatistic.poolsCount = poolSets.size;\n    lastPatronPoolsStatistic.patronsCount = patronsCount;\n    give(lastPatronPoolsStatistic, g);\n  });\n});\n\n/**\n * Helps to connect source and subsource, needed to destroy all sub sources\n * when base source will be destroyed\n * @url https://silentium-lab.github.io/silentium/#/utils/sub-source\n */\nexport const subSource = <T>(\n  subSource: SourceType,\n  source: SourceType<T>,\n): SourceType<T> => {\n  if (!subSources.has(source)) {\n    subSources.set(source, []);\n  }\n\n  subSources.get(source)?.push(subSource);\n\n  return subSource;\n};\n\n/**\n * Helps to define many sources of one sub source\n */\nexport const subSourceMany = <T>(\n  subSourceSrc: SourceType<T>,\n  sourcesSrc: SourceType[],\n): SourceType<T> => {\n  sourcesSrc.forEach((source) => {\n    subSource(subSourceSrc, source);\n  });\n  return subSourceSrc;\n};\n\n/**\n * Helps to check what given source is destroyable\n * @url https://silentium-lab.github.io/silentium/#/utils/is-destroyable\n */\nexport const isDestroyable = (s: unknown): s is DestroyableType => {\n  return (\n    typeof s === \"object\" &&\n    s !== null &&\n    \"destroy\" in s &&\n    typeof s.destroy === \"function\"\n  );\n};\n\n/**\n * Helps to remove all pools of related initiators\n * @url https://silentium-lab.github.io/silentium/#/utils/destroy\n */\nexport const destroy = (...initiators: SourceType[]) => {\n  initiators.forEach((initiator) => {\n    if (isDestroyable(initiator)) {\n      initiator.destroy();\n    }\n    const pool = poolsOfInitiators.get(initiator);\n    pool?.destroy();\n    const foundSubSources = subSources.get(initiator);\n    subSources.delete(initiator);\n    if (foundSubSources) {\n      destroy(...foundSubSources);\n    }\n  });\n};\n\n/**\n * Returns all pools related to one patron\n * @url https://silentium-lab.github.io/silentium/#/utils/patron-pools\n */\nexport const patronPools = (patron: GuestObjectType) => {\n  const pools: PoolType[] = [];\n  poolSets.forEach((pool, poolInstance) => {\n    if (pool.has(patron)) {\n      pools.push(poolInstance);\n    }\n  });\n  return pools;\n};\n\n/**\n * Removes patron from all existed pools\n * @url https://silentium-lab.github.io/silentium/#/utils/remove-patron-from-pools\n */\nexport const removePatronFromPools = (patron: GuestObjectType) => {\n  if (patron === undefined) {\n    throw new Error(\"removePatronFromPools didn't receive patron argument\");\n  }\n  poolSets.forEach((pool) => {\n    pool.delete(patron);\n  });\n  notifyPoolsChange();\n};\n\n/**\n * Checks what patron is connected with any pool\n * @url https://silentium-lab.github.io/silentium/#/utils/is-patron-in-pools\n */\nexport const isPatronInPools = (patron: GuestObjectType) => {\n  if (patron === undefined) {\n    throw new Error(\"isPatronInPools didn't receive patron argument\");\n  }\n  let inPool = false;\n  poolSets.forEach((pool) => {\n    if (!inPool) {\n      inPool = pool.has(patron);\n    }\n  });\n  return inPool;\n};\n\nexport interface PoolType<T = any> extends GuestObjectType<T> {\n  add(guest: GuestObjectType<T>): this;\n  distribute(receiving: T, possiblePatron: GuestObjectType<T>): this;\n  remove(patron: GuestObjectType<T>): this;\n  size(): number;\n  destroy(): void;\n}\n\n/**\n * Pool class helps to implement dispatching for patron about new values\n * what may appear in sources\n * @url https://silentium-lab.github.io/silentium/#/patron/patron-pool\n */\nexport class PatronPool<T> implements PoolType<T> {\n  private patrons: Set<GuestObjectType<T>>;\n\n  public give: (value: T) => this;\n\n  public constructor(private initiator: SourceType) {\n    this.patrons = new Set<GuestObjectType<T>>();\n    poolSets.set(this, this.patrons);\n    poolsOfInitiators.set(this.initiator, this);\n    const doReceive = (value: T) => {\n      this.patrons.forEach((target) => {\n        this.sendValueToGuest(value, target);\n      });\n    };\n    this.give = (value: T) => {\n      doReceive(value);\n      return this;\n    };\n    notifyPoolsChange();\n  }\n\n  public size(): number {\n    return this.patrons.size;\n  }\n\n  public add(shouldBePatron: GuestType<T>) {\n    if (!shouldBePatron) {\n      throw new Error(\"PatronPool add method received nothing!\");\n    }\n    if (\n      typeof shouldBePatron !== \"function\" &&\n      shouldBePatron.introduction &&\n      shouldBePatron.introduction() === \"patron\"\n    ) {\n      this.patrons.add(shouldBePatron);\n    }\n    notifyPoolsChange();\n    return this;\n  }\n\n  public remove(patron: GuestObjectType<T>) {\n    this.patrons.delete(patron);\n    notifyPoolsChange();\n    return this;\n  }\n\n  public distribute(receiving: T, possiblePatron: GuestType<T>): this {\n    this.add(possiblePatron);\n    this.sendValueToGuest(receiving, possiblePatron);\n    return this;\n  }\n\n  public destroy() {\n    this.patrons.forEach((patron) => {\n      this.remove(patron);\n    });\n    poolSets.delete(this);\n    poolsOfInitiators.delete(this.initiator);\n    notifyPoolsChange();\n    return this;\n  }\n\n  private sendValueToGuest(value: T, guest: GuestType<T>) {\n    const isDisposed = this.guestDisposed(value, guest);\n    if (!isDisposed) {\n      give(value, guest);\n    }\n    return this;\n  }\n\n  private guestDisposed(value: T, guest: GuestType<T>) {\n    if ((guest as GuestDisposableType).disposed?.(value)) {\n      this.remove(guest as GuestObjectType);\n      return true;\n    }\n    return false;\n  }\n}\n","import { introduction } from \"../Patron/Patron\";\nimport { GuestObjectType, GuestType } from \"../Guest/Guest\";\nimport { guestApplied } from \"../Guest/GuestApplied\";\n\n/**\n * Helps to apply function to patron\n * @url https://silentium-lab.github.io/silentium/#/patron/patron-applied\n */\nexport const patronApplied = <T, R>(\n  baseGuest: GuestType<R>,\n  applier: (value: T) => R,\n): GuestObjectType<T> => {\n  const applied = guestApplied(baseGuest, applier);\n\n  const result = {\n    give(value: T) {\n      applied.give(value);\n      return result;\n    },\n    introduction,\n  };\n\n  return result;\n};\n","import { introduction } from \"../Patron/Patron\";\nimport { GuestExecutorType, GuestType } from \"../Guest/Guest\";\nimport { guestExecutorApplied } from \"../Guest/GuestExecutorApplied\";\n\n/**\n * Helps to apply function to patrons executor\n * @url https://silentium-lab.github.io/silentium/#/patron/patron-executor-applied\n */\nexport const patronExecutorApplied = <T>(\n  baseGuest: GuestType<T>,\n  applier: (executor: GuestExecutorType) => GuestExecutorType,\n) => {\n  const guestApplied = guestExecutorApplied(baseGuest, applier);\n\n  const result = {\n    give(value: T) {\n      guestApplied.give(value);\n      return result;\n    },\n    introduction,\n  };\n\n  return result;\n};\n","import { subSource } from \"../Patron/PatronPool\";\nimport { GuestType } from \"../Guest/Guest\";\nimport { guestSync } from \"../Guest/GuestSync\";\nimport { patron } from \"../Patron/Patron\";\nimport { SourceObjectType, SourceType, value } from \"../Source/Source\";\n\n/**\n * Helps to represent source value as sync value, what can be returned\n * useful for example in tests\n * This source is not lazy! When we create it patron visit baseSource\n * @url https://silentium-lab.github.io/silentium/#/source/source-sync\n */\nexport const sourceSync = <T>(\n  baseSource: SourceType<T>,\n  defaultValue?: unknown,\n): SourceObjectType<T> & { syncValue(): T } => {\n  const syncGuest = guestSync<T>(defaultValue as T);\n  value(baseSource, patron(syncGuest));\n\n  const result = {\n    value(guest: GuestType<T>) {\n      value(baseSource, guest);\n      return this;\n    },\n    syncValue() {\n      try {\n        return syncGuest.value() as T;\n      } catch {\n        throw new Error(\"No value in SourceSync\");\n      }\n    },\n  };\n  subSource(result, baseSource);\n\n  return result;\n};\n","import { sourceSync } from \"../Source/SourceSync\";\nimport { give, guest, GuestObjectType, GuestType } from \"../Guest/Guest\";\nimport { isPatron } from \"../Patron/Patron\";\nimport { patronOnce } from \"../Patron/PatronOnce\";\nimport { PatronPool } from \"../Patron/PatronPool\";\nimport {\n  isSource,\n  SourceDataType,\n  SourceObjectType,\n  SourceType,\n  value,\n} from \"./Source\";\n\nexport type SourceChangeableType<T = any> = SourceObjectType<T> &\n  GuestObjectType<T>;\n\nconst sourceIsEmpty = (source: unknown) =>\n  source === undefined || source === null;\n\n/**\n * Ability to create source what can be changed later\n * @url https://silentium-lab.github.io/silentium/#/source/source-of\n */\nexport const sourceOf = <T>(source?: SourceType<T>) => {\n  const createdSource = {} as SourceChangeableType<T>;\n  const thePool = new PatronPool(createdSource);\n  let isEmpty = sourceIsEmpty(source);\n\n  if (!isEmpty && isSource(source)) {\n    value(\n      source,\n      patronOnce((unwrappedSourceDocument) => {\n        isEmpty = sourceIsEmpty(unwrappedSourceDocument);\n        source = unwrappedSourceDocument as SourceDataType<T>;\n      }),\n    );\n  }\n\n  createdSource.value = (g: GuestType<T>) => {\n    if (isEmpty) {\n      if (isPatron(g)) {\n        thePool.add(g);\n      }\n      return createdSource;\n    }\n\n    if (typeof g === \"function\") {\n      thePool.distribute(source, guest(g));\n    } else {\n      thePool.distribute(source, g);\n    }\n\n    return createdSource;\n  };\n\n  createdSource.give = (value: T) => {\n    isEmpty = sourceIsEmpty(value);\n    source = value as SourceDataType<T>;\n\n    if (!isEmpty) {\n      thePool.give(source);\n    }\n\n    return createdSource;\n  };\n\n  return createdSource as SourceChangeableType<T>;\n};\n\n/**\n * Changeable source what can be changed only once with specified value\n * @url https://silentium-lab.github.io/silentium/#/source/source-memo-of\n */\nexport const sourceMemoOf = <T>(\n  source?: SourceType<T>,\n): SourceChangeableType<T> => {\n  const result = sourceOf(source);\n  const baseSrcSync = sourceSync(result, null);\n\n  const resultMemo = {\n    value: result.value,\n    give(value: T) {\n      if (baseSrcSync.syncValue() !== value) {\n        give(value, result.give);\n      }\n      return resultMemo;\n    },\n  };\n\n  return resultMemo;\n};\n","import { removePatronFromPools, subSource } from \"../Patron/PatronPool\";\nimport {\n  firstVisit,\n  give,\n  guest,\n  GuestObjectType,\n  GuestType,\n} from \"../Guest/Guest\";\nimport { guestCast } from \"../Guest/GuestCast\";\nimport { patron } from \"../Patron/Patron\";\nimport { SourceObjectType, SourceType, value } from \"./Source\";\nimport { sourceOf } from \"./SourceChangeable\";\nimport { DestroyableType } from \"../Source/SourceDestroyable\";\n\ntype ExtractType<T> = T extends SourceType<infer U> ? U : never;\n\nexport type ExtractTypesFromArray<T extends SourceType<any>[]> = {\n  [K in keyof T]: ExtractType<T[K]>;\n};\n\n/**\n * Represents common value as Array of bunch of sources,\n * when all sources will gets it's values\n * @url https://silentium-lab.github.io/silentium/#/source/source-all\n */\nexport const sourceAll = <const T extends SourceType[]>(\n  sources: T,\n): SourceObjectType<ExtractTypesFromArray<T>> & DestroyableType => {\n  const keysKnown = new Set<string>(Object.keys(sources));\n  const keysFilled = new Set();\n  const isAllFilled = () => {\n    return keysFilled.size > 0 && keysFilled.size === keysKnown.size;\n  };\n  const theAll = sourceOf({});\n  const patrons: GuestObjectType[] = [];\n\n  const visited = firstVisit(() => {\n    Object.entries(sources).forEach(([key, source]) => {\n      subSource(theAll, source);\n      keysKnown.add(key);\n      const keyPatron = patron((v) => {\n        theAll.value(\n          guest((all: Record<string, unknown>) => {\n            keysFilled.add(key);\n            const lastAll = {\n              ...all,\n              [key]: v,\n            };\n            theAll.give(lastAll);\n          }),\n        );\n      });\n      patrons.push(keyPatron);\n      value(source, keyPatron);\n    });\n  });\n\n  return {\n    value(guest: GuestType<ExtractTypesFromArray<T>>) {\n      visited();\n      const mbPatron = guestCast(guest, (value: T) => {\n        if (isAllFilled()) {\n          give(Object.values(value) as ExtractTypesFromArray<T>, guest);\n        }\n      });\n      patrons.push(mbPatron);\n      theAll.value(mbPatron);\n    },\n    destroy() {\n      patrons.forEach((patron) => {\n        removePatronFromPools(patron);\n      });\n    },\n  };\n};\n","import { give, GuestType } from \"../Guest/Guest\";\nimport { guestCast } from \"../Guest/GuestCast\";\nimport { patronOnce } from \"../Patron/PatronOnce\";\nimport { LazyType } from \"../Lazy/Lazy\";\nimport { isSource, SourceType, value } from \"./Source\";\nimport { sourceAll } from \"./SourceAll\";\nimport { sourceOf, SourceChangeableType } from \"./SourceChangeable\";\n\n/**\n * Ability to apply source to source of array values sequentially\n * @url https://silentium-lab.github.io/silentium/#/source/source-sequence\n */\nexport const sourceSequence = <T, TG>(\n  baseSource: SourceType<T[]>,\n  targetSource: LazyType<SourceType<TG>>,\n) => {\n  if (baseSource === undefined) {\n    throw new Error(\"SourceSequence didn't receive baseSource argument\");\n  }\n  if (targetSource === undefined) {\n    throw new Error(\"SourceSequence didn't receive targetSource argument\");\n  }\n\n  return (guest: GuestType<TG[]>) => {\n    const sequenceSource = sourceOf();\n    const source = targetSource.get(sequenceSource);\n\n    value(\n      baseSource,\n      guestCast(guest, (theValue) => {\n        let index = 0;\n\n        const sources: SourceChangeableType[] = [];\n        theValue.forEach(() => {\n          sources.push(sourceOf());\n        });\n\n        const nextItemHandle = () => {\n          if (theValue[index + 1] !== undefined) {\n            index = index + 1;\n            handle();\n          }\n        };\n\n        function handle() {\n          const currentSource = sources[index];\n          const nextValue = theValue[index];\n          if (isSource(nextValue)) {\n            value(\n              nextValue,\n              patronOnce((theNextValue) => {\n                sequenceSource.give(theNextValue);\n                value(source, currentSource);\n                nextItemHandle();\n              }),\n            );\n          } else {\n            sequenceSource.give(nextValue);\n            value(source, currentSource);\n            nextItemHandle();\n          }\n        }\n\n        if (theValue[index] !== undefined) {\n          handle();\n          value(sourceAll(sources), guest);\n        } else {\n          give([], guest);\n        }\n      }),\n    );\n  };\n};\n","import { patron } from \"../Patron/Patron\";\nimport { patronOnce } from \"../Patron/PatronOnce\";\nimport { sourceOf } from \"../Source/SourceChangeable\";\nimport { firstVisit, give, GuestType } from \"../Guest/Guest\";\nimport { LazyType } from \"../Lazy/Lazy\";\nimport { destroy, subSource } from \"../Patron/PatronPool\";\nimport { SourceType, value } from \"./Source\";\nimport { sourceAll } from \"./SourceAll\";\n\n/**\n * Helps to modify many sources with one private source\n * @url https://silentium-lab.github.io/silentium/#/source/source-map\n */\nexport const sourceMap = <T, TG>(\n  baseSource: SourceType<T[]>,\n  targetSource: LazyType<SourceType<TG>>,\n) => {\n  if (baseSource === undefined) {\n    throw new Error(\"SourceMap didn't receive baseSource argument\");\n  }\n  if (targetSource === undefined) {\n    throw new Error(\"SourceMap didn't receive targetSource argument\");\n  }\n\n  const result = sourceOf<TG[]>();\n\n  const visited = firstVisit(() => {\n    value(\n      baseSource,\n      patron((theValue) => {\n        const sources: SourceType[] = [];\n        theValue.forEach((val) => {\n          const source = targetSource.get(val);\n          subSource(source, baseSource);\n          sources.push(source);\n        });\n        value(\n          sourceAll(sources),\n          patronOnce((v) => {\n            destroy(...sources);\n            give(v, result);\n          }),\n        );\n      }),\n    );\n  });\n\n  return (g: GuestType<TG[]>) => {\n    visited();\n    result.value(g);\n  };\n};\n","import { give, GuestType } from \"../Guest/Guest\";\nimport { guestCast } from \"../Guest/GuestCast\";\nimport { SourceType, value } from \"./Source\";\n\n/**\n * Connects guest with source what give response faster than others\n * @url https://silentium-lab.github.io/silentium/#/source/source-race\n */\nexport const sourceRace = <T>(sources: SourceType<T>[]) => {\n  if (sources === undefined) {\n    throw new Error(\"SourceRace didnt receive sources argument\");\n  }\n\n  return (guest: GuestType<T>) => {\n    let connectedWithSource: SourceType | null = null;\n    sources.forEach((source) => {\n      value(\n        source,\n        guestCast(<GuestType>guest, (value) => {\n          if (!connectedWithSource || connectedWithSource === source) {\n            give(value as T, guest);\n            connectedWithSource = source;\n          }\n        }),\n      );\n    });\n  };\n};\n","import { firstVisit, GuestType } from \"../Guest/Guest\";\nimport { patron } from \"../Patron/Patron\";\nimport { SourceType, value } from \"../Source/Source\";\nimport { sourceOf } from \"../Source/SourceChangeable\";\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ntype Last<T extends any[]> = T extends [...infer U, infer L] ? L : never;\n\n/**\n * Returns value of some source when all sources before it gives their response\n * @url https://silentium-lab.github.io/silentium/#/source/source-chain\n */\nexport const sourceChain = <T extends SourceType[]>(\n  ...sources: T\n): SourceType<Last<T>> => {\n  const resultSrc = sourceOf<Last<T>>();\n  const respondedSources = new Set();\n  let lastSourceValue: any = null;\n\n  const visited = firstVisit(() => {\n    sources.forEach((source, index) => {\n      value(\n        source,\n        patron((value) => {\n          respondedSources.add(index);\n          if (index === sources.length - 1) {\n            lastSourceValue = value;\n          }\n          if (\n            respondedSources.size === sources.length &&\n            lastSourceValue !== null\n          ) {\n            resultSrc.give(lastSourceValue);\n          }\n        }),\n      );\n    });\n  });\n\n  return (g: GuestType<Last<T>>) => {\n    visited();\n    resultSrc.value(g);\n  };\n};\n","import { give, GuestType } from \"../Guest/Guest\";\nimport { SourceType, value } from \"./Source\";\nimport { SourceChangeableType } from \"./SourceChangeable\";\n\n/**\n * Ability to build common changeable source from different guest and source\n * @url https://silentium-lab.github.io/silentium/#/source/source-dynamic\n */\nexport const sourceDynamic = <T>(\n  baseGuest: GuestType<T>,\n  baseSource: SourceType<T>,\n): SourceChangeableType<T> => {\n  if (baseGuest === undefined) {\n    throw new Error(\"SourceDynamic didn't receive baseGuest argument\");\n  }\n  if (baseSource === undefined) {\n    throw new Error(\"SourceDynamic didn't receive baseSource argument\");\n  }\n\n  const sourceObject = {\n    value(guest: GuestType<T>) {\n      value(baseSource, guest);\n      return sourceObject;\n    },\n    give(value: T) {\n      give(value, baseGuest);\n      return this;\n    },\n  };\n\n  return sourceObject;\n};\n","import { give, GuestType } from \"../Guest/Guest\";\nimport { guestCast } from \"../Guest/GuestCast\";\nimport { SourceType, value } from \"../Source/Source\";\n\n/**\n * Gives ability to apply function to source value\n * @url https://silentium-lab.github.io/silentium/#/source/source-applied\n */\nexport const sourceApplied = <T, R>(\n  baseSource: SourceType<T>,\n  applier: (v: T) => R,\n) => {\n  return (guest: GuestType<R>) => {\n    value(\n      baseSource,\n      guestCast(guest, (v) => {\n        give(applier(v), guest);\n      }),\n    );\n  };\n};\n","import { SourceExecutorType, SourceType, value } from \"../Source/Source\";\n\n/**\n * Ability to apply function to source executor, helpful when need to apply throttling or debounce\n * @url https://silentium-lab.github.io/silentium/#/source/source-executor-applied\n */\nexport const sourceExecutorApplied = <T>(\n  source: SourceType<T>,\n  applier: (executor: SourceExecutorType<T>) => SourceExecutorType<T>,\n) => {\n  return applier((g) => {\n    value(source, g);\n  });\n};\n","import { give, GuestType } from \"../Guest/Guest\";\nimport { guestCast } from \"../Guest/GuestCast\";\nimport { SourceType, value } from \"../Source/Source\";\n\n/**\n * Helps not to respond with information what checked by predicate function\n * @url https://silentium-lab.github.io/silentium/#/source/source-filtered\n */\nexport const sourceFiltered = <T>(\n  baseSource: SourceType<T>,\n  predicate: (v: T) => boolean,\n  defaultValue?: T,\n) => {\n  return (g: GuestType<T>) => {\n    value(\n      baseSource,\n      guestCast(g, (v) => {\n        if (predicate(v) === true) {\n          give(v, g);\n        } else if (defaultValue !== undefined) {\n          give(defaultValue, g);\n        }\n      }),\n    );\n  };\n};\n","import { GuestType } from \"../Guest/Guest\";\nimport { SourceType, value } from \"./Source\";\nimport { sourceOf } from \"./SourceChangeable\";\n\n/**\n * Ability set the value only once\n * @url https://silentium-lab.github.io/silentium/#/source/source-once\n */\nexport const sourceOnce = <T>(initialValue?: SourceType<T>) => {\n  let isFilled = initialValue !== undefined;\n  const source = sourceOf(initialValue);\n\n  return {\n    value(guest: GuestType<T>) {\n      value(source, guest);\n      return this;\n    },\n    give(value: T) {\n      if (!isFilled) {\n        source.give(value);\n        isFilled = true;\n      }\n      return this;\n    },\n  };\n};\n","import { GuestType } from \"../Guest/Guest\";\nimport { patron } from \"../Patron/Patron\";\nimport { subSourceMany } from \"../Patron/PatronPool\";\nimport { SourceType, value } from \"../Source/Source\";\nimport { ExtractTypesFromArray, sourceAll } from \"../Source/SourceAll\";\nimport { sourceOf } from \"../Source/SourceChangeable\";\n\n/**\n * Simplifies sources combination, when we need to create value depending on many sources\n * @url https://silentium-lab.github.io/silentium/#/source/source-combined\n */\nexport const sourceCombined =\n  <const T extends SourceType[]>(...sources: T) =>\n  <R>(\n    source: (\n      guest: GuestType<R>,\n      ...sourcesValues: ExtractTypesFromArray<T>\n    ) => void,\n  ): SourceType<R> => {\n    const result = sourceOf<R>();\n    subSourceMany(result, sources);\n\n    value(\n      sourceAll(sources),\n      patron((actualValues) => {\n        source(result.give, ...actualValues);\n      }),\n    );\n\n    return result.value;\n  };\n","import { sourceDynamic } from \"src/Source/SourceDynamic\";\nimport { firstVisit, give, GuestType } from \"../Guest/Guest\";\nimport { patron } from \"../Patron/Patron\";\nimport { subSource } from \"../Patron/PatronPool\";\nimport { SourceType, value } from \"../Source/Source\";\nimport { sourceOf } from \"../Source/SourceChangeable\";\n\n/**\n * @url https://silentium-lab.github.io/silentium/#/source/source-resettable\n */\nexport const sourceResettable = <T>(\n  baseSrc: SourceType<T>,\n  resettableSrc: SourceType<unknown>,\n) => {\n  const result = sourceOf<T>();\n\n  const visited = firstVisit(() => {\n    value(\n      resettableSrc,\n      patron(() => {\n        give(null, result);\n      }),\n    );\n\n    value(baseSrc, patron(result));\n    subSource(result, baseSrc);\n  });\n\n  return sourceDynamic(result.give, (g: GuestType<T>) => {\n    visited();\n    result.value(g);\n  });\n};\n","import { firstVisit, GuestType } from \"../Guest/Guest\";\nimport { patron } from \"../Patron/Patron\";\nimport { SourceType, value } from \"../Source/Source\";\nimport { sourceOf } from \"../Source/SourceChangeable\";\n\n/**\n * Present source of value what was last appeared in any\n * of given sources, can be used as default value, when some source\n * don't respond\n * @url https://silentium-lab.github.io/silentium/#/source/source-any\n */\nexport const sourceAny = <T>(sources: SourceType<T>[]) => {\n  const lastSrc = sourceOf<T>();\n\n  const visited = firstVisit(() => {\n    sources.forEach((source) => {\n      value(source, patron(lastSrc));\n    });\n  });\n\n  return (g: GuestType<T>) => {\n    visited();\n    lastSrc.value(g);\n  };\n};\n","import { GuestType } from \"src/Guest/Guest\";\nimport { LazyType } from \"../Lazy/Lazy\";\nimport { patron } from \"../Patron/Patron\";\nimport { destroy } from \"../Patron/PatronPool\";\nimport { SourceType, value } from \"../Source/Source\";\nimport { sourceAll } from \"../Source/SourceAll\";\nimport { sourceOf } from \"../Source/SourceChangeable\";\nimport { sourceResettable } from \"../Source/SourceResettable\";\n\n/**\n * Helps to build source only when all sources will give its values\n * and only after some guest visit source\n * @url https://silentium-lab.github.io/silentium/#/source/source-lazy\n */\nexport const sourceLazy = <T>(\n  lazySrc: LazyType<SourceType<T>>,\n  args: SourceType[],\n  destroySrc?: SourceType<unknown>,\n) => {\n  let instance: SourceType<T> | null = null;\n  const result = sourceOf<T>();\n  const resultResettable = sourceResettable(result, destroySrc ?? sourceOf());\n  let wasInstantiated = false;\n\n  const instantiate = () => {\n    if (wasInstantiated) {\n      return;\n    }\n\n    wasInstantiated = true;\n    value(\n      sourceAll(args),\n      patron(() => {\n        if (!instance) {\n          instance = lazySrc.get(...args);\n          value(instance, patron(result));\n        }\n      }),\n    );\n  };\n\n  if (destroySrc) {\n    value(\n      destroySrc,\n      patron(() => {\n        destroy(instance);\n        instance = null;\n      }),\n    );\n  }\n\n  return (g: GuestType<T>) => {\n    instantiate();\n    value(resultResettable, g);\n  };\n};\n","import { SourceExecutorType, SourceObjectType } from \"./Source\";\n\nexport type DestructorType = () => void;\n\nexport interface DestroyableType {\n  destroy: DestructorType;\n}\n\n/**\n * Ability to create sources that support special destruction logic\n * @url https://silentium-lab.github.io/silentium/#/source/source-destroyable\n */\nexport const sourceDestroyable = <T>(\n  source: SourceExecutorType<T, DestructorType>,\n): SourceObjectType<T> & DestroyableType => {\n  let destructor: DestructorType | null = null;\n  return {\n    value(g) {\n      destructor = source(g);\n      return this;\n    },\n    destroy() {\n      if (destructor !== null && typeof destructor === \"function\") {\n        destructor();\n      }\n      return this;\n    },\n  };\n};\n","import { LazyType } from \"./Lazy\";\n\ninterface Constructable<T> {\n  new (...args: unknown[]): T;\n}\n\ninterface Prototyped<T> {\n  prototype: T;\n}\n\nexport const lazyClass = <T>(\n  constructorFn: Prototyped<T>,\n  modules: Record<string, unknown> = {},\n): LazyType<T> => {\n  if (constructorFn === undefined) {\n    throw new Error(\"PrivateClass didn't receive constructorFn argument\");\n  }\n\n  return {\n    get<R extends unknown[], CT = null>(...args: R): CT extends null ? T : CT {\n      return new (constructorFn as Constructable<T>)(\n        ...args,\n        modules,\n      ) as CT extends null ? T : CT;\n    },\n  };\n};\n","export interface LazyType<T> {\n  get<R extends unknown[], CT = null>(...args: R): CT extends null ? T : CT;\n}\n\n/**\n * Helps to get lazy instance of dependency\n * @url https://silentium-lab.github.io/silentium/#/utils/lazy\n */\nexport const lazy = <T>(buildingFn: (...args: any[]) => T): LazyType<T> => {\n  if (buildingFn === undefined) {\n    throw new Error(\"lazy didn't receive buildingFn argument\");\n  }\n\n  return {\n    get<R extends unknown[], CT = null>(...args: R): CT extends null ? T : CT {\n      return buildingFn(...args) as CT extends null ? T : CT;\n    },\n  };\n};\n"],"names":["value","source","guest","Error","give","isSource","mbSource","data","isGuest","mbGuest","receiver","result","firstVisit","afterFirstVisit","isVisited","guestCast","sourceGuest","targetGuest","disposed","maybeDisposable","introduction","guestSync","theValue","guestDisposable","disposeCheck","guestApplied","baseGuest","applier","guestExecutorApplied","v","isPatron","patron","willBePatron","patronOnce","received","poolSets","Map","poolsOfInitiators","subSources","poolsChangeFns","notifyPoolsChange","forEach","fn","lastPatronPoolsStatistic","poolsCount","patronsCount","patronPoolsStatistic","g","push","set","size","subSource","has","get","subSourceMany","subSourceSrc","sourcesSrc","isDestroyable","s","destroy","initiators","initiator","pool","foundSubSources","delete","patronPools","pools","poolInstance","removePatronFromPools","isPatronInPools","inPool","PatronPool","constructor","this","__publicField","patrons","Set","doReceive","target","sendValueToGuest","add","shouldBePatron","remove","distribute","receiving","possiblePatron","guestDisposed","patronApplied","applied","patronExecutorApplied","sourceSync","baseSource","defaultValue","syncGuest","syncValue","sourceIsEmpty","sourceOf","createdSource","thePool","isEmpty","unwrappedSourceDocument","sourceMemoOf","baseSrcSync","resultMemo","sourceAll","sources","keysKnown","Object","keys","keysFilled","theAll","visited","entries","key","keyPatron","all","lastAll","mbPatron","values","sourceSequence","targetSource","sequenceSource","index","nextItemHandle","handle","currentSource","nextValue","theNextValue","sourceMap","val","sourceRace","connectedWithSource","sourceChain","resultSrc","respondedSources","lastSourceValue","length","sourceDynamic","sourceObject","sourceApplied","sourceExecutorApplied","sourceFiltered","predicate","sourceOnce","initialValue","isFilled","sourceCombined","actualValues","sourceResettable","baseSrc","resettableSrc","sourceAny","lastSrc","sourceLazy","lazySrc","args","destroySrc","instance","resultResettable","wasInstantiated","sourceDestroyable","destructor","lazyClass","constructorFn","modules","lazy","buildingFn"],"mappings":"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"}