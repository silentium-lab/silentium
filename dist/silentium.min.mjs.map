{"version":3,"file":"silentium.min.mjs","sources":["../src/Source/Source.ts","../src/Guest/Guest.ts","../src/Guest/GuestCast.ts","../src/Guest/GuestSync.ts","../src/Guest/GuestDisposable.ts","../src/Guest/GuestApplied.ts","../src/Guest/GuestExecutorApplied.ts","../src/Patron/Patron.ts","../src/Patron/PatronOnce.ts","../src/utils/PrioritySet.ts","../src/Patron/PatronPool.ts","../src/Patron/PatronApplied.ts","../src/Patron/PatronExecutorApplied.ts","../src/Source/SourceSync.ts","../src/Source/SourceChangeable.ts","../src/Source/SourceAll.ts","../src/Source/SourceSequence.ts","../src/Source/SourceMap.ts","../src/Source/SourceRace.ts","../src/Source/SourceChain.ts","../src/Source/SourceDynamic.ts","../src/Source/SourceApplied.ts","../src/Source/SourceExecutorApplied.ts","../src/Source/SourceFiltered.ts","../src/Source/SourceOnce.ts","../src/Source/SourceCombined.ts","../src/Source/SourceResettable.ts","../src/Source/SourceAny.ts","../src/Source/SourceLazy.ts","../src/Source/SourceDestroyable.ts","../src/Lazy/LazyClass.ts","../src/Lazy/Lazy.ts","../src/utils/Nameable.ts"],"sourcesContent":["import { give, GuestType } from \"../Guest/Guest\";\n\nexport type SourceExecutorType<T, R = unknown> = (guest: GuestType<T>) => R;\n\nexport interface SourceObjectType<T> {\n  value: SourceExecutorType<T>;\n}\n\nexport type SourceDataType<T> = Extract<\n  T,\n  string | number | boolean | Date | object | Array<unknown> | symbol\n>;\n\nexport type SourceType<T = any> =\n  | SourceExecutorType<T>\n  | SourceObjectType<T>\n  | SourceDataType<T>;\n\nconst valueExact = <T>(source: SourceType<T>, guest: GuestType<T>) => {\n  if (source === undefined || source === null) {\n    throw new Error(\"value didn't receive source argument\");\n  }\n  if (guest === undefined || source === null) {\n    throw new Error(\"value didn't receive guest argument\");\n  }\n  if (typeof source === \"function\") {\n    source(guest);\n  } else if (\n    typeof source === \"object\" &&\n    \"value\" in source &&\n    typeof source.value === \"function\"\n  ) {\n    source.value(guest);\n  } else {\n    give(source as T, guest);\n  }\n\n  return source;\n};\n\n/**\n * Helps to connect source and guest, if you need to get value in guest from source\n * helpful because we don't know what shape of source do we have, it can be function or object or primitive\n * @url https://silentium-lab.github.io/silentium/#/utils/value\n */\nexport const value = <T>(\n  source: SourceType<T>,\n  guest: GuestType<T> | GuestType<T>[],\n) => {\n  if (source === undefined || source === null) {\n    throw new Error(\"value didn't receive source argument\");\n  }\n  if (guest === undefined || source === null) {\n    throw new Error(\"value didn't receive guest argument\");\n  }\n\n  if (Array.isArray(guest)) {\n    guest.forEach((currentGuest) => {\n      valueExact(source, currentGuest);\n    });\n  } else {\n    valueExact(source, guest);\n  }\n\n  return source;\n};\n\n/**\n * Helps to check what some information is of source shape\n * @url https://silentium-lab.github.io/silentium/#/utils/is-source\n */\nexport const isSource = <T>(\n  mbSource: T | SourceType<T>,\n): mbSource is SourceType<T> => {\n  if (\n    mbSource !== null &&\n    typeof mbSource === \"object\" &&\n    \"value\" in mbSource &&\n    typeof mbSource.value === \"function\"\n  ) {\n    return true;\n  }\n  return mbSource !== null && mbSource !== undefined;\n};\n\n/**\n * Represents source as function\n * @url https://silentium-lab.github.io/silentium/#/source\n */\nexport const source = <T>(source: SourceType<T>): SourceExecutorType<T> => {\n  if (source === undefined) {\n    throw new Error(\"Source constructor didn't receive executor function\");\n  }\n\n  return (guest: GuestType<T>) => {\n    value(source, guest);\n  };\n};\n","import { source, SourceExecutorType, SourceType } from \"../Source/Source\";\n\ntype GuestIntroduction = \"guest\" | \"patron\";\n\nexport type GuestExecutorType<T = any, This = void> = (value: T) => This;\n\nexport interface GuestObjectType<T = any> {\n  give(value: T): this;\n  introduction?(): GuestIntroduction;\n}\n\nexport type GuestType<T = any> = GuestExecutorType<T> | GuestObjectType<T>;\n\n/**\n * Helps to give data to guest, guests can be of different shapes\n * function guest or object guest\n * @url https://silentium-lab.github.io/silentium/#/utils/give\n */\nexport const give = <T>(\n  data: T,\n  guest?: GuestType<T>,\n): GuestType<T> | SourceExecutorType<T> => {\n  if (data === undefined) {\n    throw new Error(\"give didn't receive data argument\");\n  }\n  if (guest === undefined) {\n    return source<T>(data as SourceType<T>) as SourceExecutorType<T>;\n  }\n  if (typeof guest === \"function\") {\n    guest(data);\n  } else {\n    guest.give(data);\n  }\n  return guest;\n};\n\n/**\n * Helps to check if mbGuest can be used to retrieve value\n * @url https://silentium-lab.github.io/silentium/#/utils/is-guest\n */\nexport const isGuest = (mbGuest: any): mbGuest is GuestType => {\n  if (mbGuest === undefined) {\n    throw new Error(\"isGuest didnt receive mbGuest argument\");\n  }\n  return typeof mbGuest === \"function\" || typeof mbGuest?.give === \"function\";\n};\n\n/**\n * Helps to create guest of object type\n * @url https://silentium-lab.github.io/silentium/#/guest\n */\nexport const guest = <T>(receiver: GuestExecutorType<T>) => {\n  if (!receiver) {\n    throw new Error(\"receiver function was not passed to Guest constructor\");\n  }\n  const result = {\n    give(value: T) {\n      receiver(value);\n      return result;\n    },\n  };\n  return result;\n};\n\n/**\n * First visit of source, useful for detached sources\n * This function is important because code of source must executes\n * only after guest visited source, sources are lazy!\n * @url https://silentium-lab.github.io/silentium/#/utils/first-visit\n */\nexport const firstVisit = (afterFirstVisit: () => void) => {\n  let isVisited = false;\n  return () => {\n    if (!isVisited) {\n      afterFirstVisit();\n    }\n    isVisited = true;\n  };\n};\n","import { give, GuestType } from \"./Guest\";\nimport { GuestDisposableType, MaybeDisposableType } from \"./GuestDisposable\";\n\n/**\n * Helps to inherit guest behavior, its introduction and dispose settings\n * @url https://silentium-lab.github.io/silentium/#/guest/guest-cast\n */\nexport const guestCast = <T>(\n  sourceGuest: GuestType<any>,\n  targetGuest: GuestType<T>,\n): GuestDisposableType<T> => {\n  if (sourceGuest === undefined) {\n    throw new Error(\"GuestCast didn't receive sourceGuest argument\");\n  }\n  if (targetGuest === undefined) {\n    throw new Error(\"GuestCast didn't receive targetGuest argument\");\n  }\n\n  const result = {\n    disposed(value: T | null): boolean {\n      const maybeDisposable = sourceGuest as MaybeDisposableType;\n      return maybeDisposable.disposed ? maybeDisposable.disposed(value) : false;\n    },\n    give(value: T) {\n      give(value, targetGuest);\n      return result;\n    },\n    introduction() {\n      if (typeof sourceGuest === \"function\") {\n        return \"guest\";\n      }\n      if (!sourceGuest.introduction) {\n        return \"guest\";\n      }\n      return sourceGuest.introduction();\n    },\n  };\n\n  return result;\n};\n","import { GuestObjectType } from \"./Guest\";\n\nexport interface GuestValueType<T = any> extends GuestObjectType<T> {\n  value(): T;\n}\n\n/**\n * @url https://silentium-lab.github.io/silentium/#/guest/guest-sync\n */\nexport const guestSync = <T>(theValue?: T): GuestValueType<T> => {\n  const result = {\n    give(value: T) {\n      theValue = value;\n      return result;\n    },\n    value() {\n      if (theValue === undefined) {\n        throw new Error(\"no value in GuestSync!\");\n      }\n      return theValue;\n    },\n  };\n\n  return result;\n};\n","import { give, GuestObjectType, GuestType } from \"./Guest\";\n\nexport interface GuestDisposableType<T = any> extends GuestObjectType<T> {\n  disposed(value: T | null): boolean;\n}\n\nexport type MaybeDisposableType<T = any> = Partial<GuestDisposableType<T>>;\n\n/**\n * Connects to guest logic what can tell PatronPool\n * what guest don't need to receive new values\n * @url https://silentium-lab.github.io/silentium/#/guest/guest-disposable\n */\nexport const guestDisposable = <T>(\n  guest: GuestType,\n  disposeCheck: (value: T | null) => boolean,\n): GuestDisposableType<T> => {\n  if (guest === undefined) {\n    throw new Error(\"GuestDisposable didn't receive guest argument\");\n  }\n  if (disposeCheck === undefined) {\n    throw new Error(\"GuestDisposable didn't receive disposeCheck argument\");\n  }\n\n  const result = {\n    disposed(value: T | null): boolean {\n      return disposeCheck(value);\n    },\n    give(value: T) {\n      give(value, guest);\n      return result;\n    },\n  };\n\n  return result;\n};\n","import { give, GuestObjectType, GuestType } from \"../Guest/Guest\";\n\n/**\n * Helps to apply function to value before baseGuest will receive it\n * @url https://silentium-lab.github.io/silentium/#/guest/guest-applied\n */\nexport const guestApplied = <T, R>(\n  baseGuest: GuestType<R>,\n  applier: (value: T) => R,\n): GuestObjectType<T> => {\n  const result = {\n    give(value: T) {\n      give(applier(value), baseGuest);\n      return result;\n    },\n  };\n  return result;\n};\n","import {\n  give,\n  GuestExecutorType,\n  GuestObjectType,\n  GuestType,\n} from \"../Guest/Guest\";\n\n/**\n * Apply function to guest function of receiving value, useful for debouncing or throttling\n * @url https://silentium-lab.github.io/silentium/#/guest/guest-executor-applied\n */\nexport const guestExecutorApplied = <T>(\n  baseGuest: GuestType<T>,\n  applier: (executor: GuestExecutorType<T>) => GuestExecutorType<T>,\n): GuestObjectType<T> => {\n  const result = {\n    give: applier((v) => give(v, baseGuest)),\n  };\n\n  return result as GuestObjectType<T>;\n};\n","import { give, GuestType } from \"../Guest/Guest\";\nimport { GuestDisposableType } from \"../Guest/GuestDisposable\";\n\nexport type PatronType<T> = GuestDisposableType<T> & {\n  introduction(): \"patron\";\n};\n\n/**\n * Patron may have priority information\n * @url https://silentium-lab.github.io/silentium/#/en/terminology/priority\n */\nexport interface PatronWithPriority {\n  priority(): number;\n}\n\n/**\n * @url https://silentium-lab.github.io/silentium/#/en/utils/patron-priority\n */\nexport const patronPriority = (g: GuestType | PatronWithPriority) => {\n  let priority = 100;\n\n  if (\"priority\" in g && typeof g.priority === \"function\") {\n    priority = g.priority();\n  }\n\n  return priority;\n};\n\n/**\n * Helps to check what incoming object is patron\n * @url https://silentium-lab.github.io/silentium/#/utils/is-patron\n */\nexport const isPatron = (guest: GuestType): guest is PatronType<unknown> =>\n  typeof guest === \"object\" &&\n  guest !== null &&\n  guest?.introduction?.() === \"patron\";\n\nexport const introduction = () => \"patron\" as const;\n\n/**\n * Help to turn existed guest intro patron\n * @url https://silentium-lab.github.io/silentium/#/patron\n */\nexport const patron = <T>(\n  willBePatron: GuestType<T>,\n): GuestDisposableType<T> => {\n  if (willBePatron === undefined) {\n    throw new Error(\"Patron didn't receive willBePatron argument\");\n  }\n\n  const result = {\n    give(value: T) {\n      give(value, willBePatron);\n      return result;\n    },\n    disposed(value: T | null): boolean {\n      const maybeDisposable = willBePatron as GuestDisposableType;\n      return maybeDisposable?.disposed?.(value) || false;\n    },\n    introduction,\n  };\n\n  return result;\n};\n\n/**\n * System patron with higher priority than regular patron\n */\nexport const systemPatron = <T>(\n  willBePatron: GuestType<T>,\n): GuestDisposableType<T> & PatronWithPriority => {\n  const p = patron(willBePatron);\n\n  return {\n    ...p,\n    priority: () => 200,\n  } as GuestDisposableType<T> & PatronWithPriority;\n};\n\n/**\n * Set priority on existed patron\n */\nexport const withPriority = <T extends PatronType<unknown>>(\n  patron: T,\n  priority: number,\n): T & PatronWithPriority => {\n  return {\n    ...patron,\n    priority: () => priority,\n  };\n};\n","import { introduction } from \"../Patron/Patron\";\nimport { give, GuestType } from \"../Guest/Guest\";\nimport {\n  GuestDisposableType,\n  MaybeDisposableType,\n} from \"../Guest/GuestDisposable\";\n\n/**\n * Helps to call patron only once, this will be helpful when you\n * need value but you know what value can not be existed at a time of requesting\n * @url https://silentium-lab.github.io/silentium/#/patron/patron-once\n */\nexport const patronOnce = <T>(\n  baseGuest: GuestType<T>,\n): GuestDisposableType<T> => {\n  if (baseGuest === undefined) {\n    throw new Error(\"PatronOnce didn't receive baseGuest argument\");\n  }\n\n  let received = false;\n\n  const result = {\n    give(value: T) {\n      if (!received) {\n        received = true;\n        give(value, baseGuest);\n      }\n      return result;\n    },\n    disposed(value: T | null): boolean {\n      if (received) {\n        return true;\n      }\n      const maybeDisposable = baseGuest as MaybeDisposableType;\n      return maybeDisposable.disposed ? maybeDisposable.disposed(value) : false;\n    },\n    introduction,\n  };\n\n  return result;\n};\n","interface PriorityItem<T> {\n  value: T;\n  priority: number;\n}\n\nclass PrioritySet<T> {\n  private items: Map<T, PriorityItem<T>>;\n  private sortedItems: PriorityItem<T>[];\n\n  public constructor() {\n    this.items = new Map();\n    this.sortedItems = [];\n  }\n\n  private findInsertPosition(priority: number): number {\n    let left = 0;\n    let right = this.sortedItems.length;\n\n    while (left < right) {\n      const mid = Math.floor((left + right) / 2);\n      if (this.sortedItems[mid].priority >= priority) {\n        left = mid + 1;\n      } else {\n        right = mid;\n      }\n    }\n\n    return left;\n  }\n\n  private findItemIndex(value: T): number {\n    return this.sortedItems.findIndex((item) => item.value === value);\n  }\n\n  public add(value: T, priority: number = 100): this {\n    const existingItem = this.items.get(value);\n\n    if (existingItem) {\n      if (existingItem.priority !== priority) {\n        const oldIndex = this.findItemIndex(value);\n        if (oldIndex !== -1) {\n          this.sortedItems.splice(oldIndex, 1);\n        }\n\n        existingItem.priority = priority;\n\n        const newIndex = this.findInsertPosition(priority);\n        this.sortedItems.splice(newIndex, 0, existingItem);\n      }\n    } else {\n      const newItem: PriorityItem<T> = { value, priority };\n\n      this.items.set(value, newItem);\n\n      const insertIndex = this.findInsertPosition(priority);\n      this.sortedItems.splice(insertIndex, 0, newItem);\n    }\n\n    return this;\n  }\n\n  public delete(value: T): boolean {\n    const item = this.items.get(value);\n    if (!item) {\n      return false;\n    }\n\n    this.items.delete(value);\n\n    const index = this.findItemIndex(value);\n    if (index !== -1) {\n      this.sortedItems.splice(index, 1);\n    }\n\n    return true;\n  }\n\n  public has(value: T): boolean {\n    return this.items.has(value);\n  }\n\n  public get size(): number {\n    return this.items.size;\n  }\n\n  public clear(): void {\n    this.items.clear();\n    this.sortedItems = [];\n  }\n\n  public getPriority(value: T): number | undefined {\n    const item = this.items.get(value);\n    return item?.priority;\n  }\n\n  public setPriority(value: T, priority: number): boolean {\n    if (this.items.has(value)) {\n      this.add(value, priority); // Переиспользуем логику add для обновления\n      return true;\n    }\n    return false;\n  }\n\n  public forEach(\n    callback: (value: T, priority: number, set: this) => void,\n  ): void {\n    this.sortedItems.forEach((item) => {\n      callback(item.value, item.priority, this);\n    });\n  }\n\n  public values(): IterableIterator<T> {\n    const values = this.sortedItems.map((item) => item.value);\n    return values[Symbol.iterator]();\n  }\n\n  public entries(): IterableIterator<[T, number]> {\n    const entries = this.sortedItems.map(\n      (item) => [item.value, item.priority] as [T, number],\n    );\n    return entries[Symbol.iterator]();\n  }\n\n  public [Symbol.iterator](): IterableIterator<T> {\n    return this.values();\n  }\n\n  public toArray(): T[] {\n    return this.sortedItems.map((item) => item.value);\n  }\n\n  public toArrayWithPriorities(): Array<{ value: T; priority: number }> {\n    return [...this.sortedItems];\n  }\n\n  public debug(): void {\n    console.log(\"Map size:\", this.items.size);\n    console.log(\"Sorted array length:\", this.sortedItems.length);\n    console.log(\"Sorted items:\", this.sortedItems);\n  }\n}\n\nexport default PrioritySet;\n","import { source, SourceType } from \"../Source/Source\";\nimport { give, GuestObjectType, GuestType } from \"../Guest/Guest\";\nimport { GuestDisposableType } from \"../Guest/GuestDisposable\";\nimport { DestroyableType } from \"../Source/SourceDestroyable\";\nimport PrioritySet from \"../utils/PrioritySet\";\nimport { patronPriority } from \"../Patron/Patron\";\n\nconst poolSets = new Map<PoolType, PrioritySet<GuestObjectType>>();\nconst poolsOfInitiators = new Map<SourceType, PoolType>();\nconst subSources = new Map<SourceType, SourceType[]>();\n\nconst poolsChangeFns: (() => void)[] = [];\nconst notifyPoolsChange = () => {\n  poolsChangeFns.forEach((fn) => fn());\n};\nconst lastPatronPoolsStatistic = {\n  poolsCount: 0,\n  patronsCount: 0,\n};\n\n/**\n * Helps debug the application and detect issues with frozen pools\n * @url https://silentium-lab.github.io/silentium/#/utils/patron-pools-statistic\n */\nexport const patronPoolsStatistic = source<{\n  poolsCount: number;\n  patronsCount: number;\n}>((g) => {\n  give(lastPatronPoolsStatistic, g);\n  poolsChangeFns.push(() => {\n    let patronsCount = 0;\n    poolSets.forEach((set) => {\n      patronsCount += set.size;\n    });\n    lastPatronPoolsStatistic.poolsCount = poolSets.size;\n    lastPatronPoolsStatistic.patronsCount = patronsCount;\n    give(lastPatronPoolsStatistic, g);\n  });\n});\n\n/**\n * Helps to connect source and subsource, needed to destroy all sub sources\n * when base source will be destroyed\n * @url https://silentium-lab.github.io/silentium/#/utils/sub-source\n */\nexport const subSource = <T>(\n  subSource: SourceType,\n  source: SourceType<T>,\n): SourceType<T> => {\n  if (!subSources.has(source)) {\n    subSources.set(source, []);\n  }\n\n  subSources.get(source)?.push(subSource);\n\n  return subSource;\n};\n\n/**\n * Helps to define many sources of one sub source\n */\nexport const subSourceMany = <T>(\n  subSourceSrc: SourceType<T>,\n  sourcesSrc: SourceType[],\n): SourceType<T> => {\n  sourcesSrc.forEach((source) => {\n    subSource(subSourceSrc, source);\n  });\n  return subSourceSrc;\n};\n\n/**\n * Helps to check what given source is destroyable\n * @url https://silentium-lab.github.io/silentium/#/utils/is-destroyable\n */\nexport const isDestroyable = (s: unknown): s is DestroyableType => {\n  return (\n    typeof s === \"object\" &&\n    s !== null &&\n    \"destroy\" in s &&\n    typeof s.destroy === \"function\"\n  );\n};\n\n/**\n * Helps to remove all pools of related initiators\n * @url https://silentium-lab.github.io/silentium/#/utils/destroy\n */\nexport const destroy = (...initiators: SourceType[]) => {\n  initiators.forEach((initiator) => {\n    if (isDestroyable(initiator)) {\n      initiator.destroy();\n    }\n    const pool = poolsOfInitiators.get(initiator);\n    pool?.destroy();\n    const foundSubSources = subSources.get(initiator);\n    subSources.delete(initiator);\n    if (foundSubSources) {\n      destroy(...foundSubSources);\n    }\n  });\n};\n\n/**\n * Returns all pools related to one patron\n * @url https://silentium-lab.github.io/silentium/#/utils/patron-pools\n */\nexport const patronPools = (patron: GuestObjectType) => {\n  const pools: PoolType[] = [];\n  poolSets.forEach((pool, poolInstance) => {\n    if (pool.has(patron)) {\n      pools.push(poolInstance);\n    }\n  });\n  return pools;\n};\n\n/**\n * Removes patron from all existed pools\n * @url https://silentium-lab.github.io/silentium/#/utils/remove-patron-from-pools\n */\nexport const removePatronFromPools = (patron: GuestObjectType) => {\n  if (patron === undefined) {\n    throw new Error(\"removePatronFromPools didn't receive patron argument\");\n  }\n  poolSets.forEach((pool) => {\n    pool.delete(patron);\n  });\n  notifyPoolsChange();\n};\n\n/**\n * Checks what patron is connected with any pool\n * @url https://silentium-lab.github.io/silentium/#/utils/is-patron-in-pools\n */\nexport const isPatronInPools = (patron: GuestObjectType) => {\n  if (patron === undefined) {\n    throw new Error(\"isPatronInPools didn't receive patron argument\");\n  }\n  let inPool = false;\n  poolSets.forEach((pool) => {\n    if (!inPool) {\n      inPool = pool.has(patron);\n    }\n  });\n  return inPool;\n};\n\nexport interface PoolType<T = any> extends GuestObjectType<T> {\n  add(guest: GuestObjectType<T>): this;\n  distribute(receiving: T, possiblePatron: GuestObjectType<T>): this;\n  remove(patron: GuestObjectType<T>): this;\n  size(): number;\n  destroy(): void;\n}\n\n/**\n * Pool class helps to implement dispatching for patron about new values\n * what may appear in sources\n * @url https://silentium-lab.github.io/silentium/#/patron/patron-pool\n */\nexport class PatronPool<T> implements PoolType<T> {\n  private patrons: PrioritySet<GuestObjectType<T>>;\n\n  public give: (value: T) => this;\n\n  public constructor(private initiator: SourceType) {\n    this.patrons = new PrioritySet<GuestObjectType<T>>();\n    poolSets.set(this, this.patrons);\n    poolsOfInitiators.set(this.initiator, this);\n    const doReceive = (value: T) => {\n      this.patrons.forEach((target) => {\n        this.sendValueToGuest(value, target);\n      });\n    };\n    this.give = (value: T) => {\n      doReceive(value);\n      return this;\n    };\n    notifyPoolsChange();\n  }\n\n  public size(): number {\n    return this.patrons.size;\n  }\n\n  public add(shouldBePatron: GuestType<T>) {\n    if (shouldBePatron === undefined) {\n      throw new Error(\"PatronPool add method received nothing!\");\n    }\n    if (\n      typeof shouldBePatron !== \"function\" &&\n      shouldBePatron.introduction &&\n      shouldBePatron.introduction() === \"patron\"\n    ) {\n      this.patrons.add(shouldBePatron, patronPriority(shouldBePatron));\n    }\n    notifyPoolsChange();\n    return this;\n  }\n\n  public remove(patron: GuestObjectType<T>) {\n    this.patrons.delete(patron);\n    notifyPoolsChange();\n    return this;\n  }\n\n  public distribute(receiving: T, possiblePatron: GuestType<T>): this {\n    this.add(possiblePatron);\n    this.sendValueToGuest(receiving, possiblePatron);\n    return this;\n  }\n\n  public destroy() {\n    this.patrons.forEach((patron) => {\n      this.remove(patron);\n    });\n    poolSets.delete(this);\n    poolsOfInitiators.delete(this.initiator);\n    notifyPoolsChange();\n    return this;\n  }\n\n  private sendValueToGuest(value: T, guest: GuestType<T>) {\n    const isDisposed = this.guestDisposed(value, guest);\n    if (!isDisposed) {\n      give(value, guest);\n    }\n    return this;\n  }\n\n  private guestDisposed(value: T, guest: GuestType<T>) {\n    if ((guest as GuestDisposableType).disposed?.(value)) {\n      this.remove(guest as GuestObjectType);\n      return true;\n    }\n    return false;\n  }\n}\n","import { introduction } from \"../Patron/Patron\";\nimport { GuestObjectType, GuestType } from \"../Guest/Guest\";\nimport { guestApplied } from \"../Guest/GuestApplied\";\n\n/**\n * Helps to apply function to patron\n * @url https://silentium-lab.github.io/silentium/#/patron/patron-applied\n */\nexport const patronApplied = <T, R>(\n  baseGuest: GuestType<R>,\n  applier: (value: T) => R,\n): GuestObjectType<T> => {\n  const applied = guestApplied(baseGuest, applier);\n\n  const result = {\n    give(value: T) {\n      applied.give(value);\n      return result;\n    },\n    introduction,\n  };\n\n  return result;\n};\n","import { introduction } from \"../Patron/Patron\";\nimport { GuestExecutorType, GuestType } from \"../Guest/Guest\";\nimport { guestExecutorApplied } from \"../Guest/GuestExecutorApplied\";\n\n/**\n * Helps to apply function to patrons executor\n * @url https://silentium-lab.github.io/silentium/#/patron/patron-executor-applied\n */\nexport const patronExecutorApplied = <T>(\n  baseGuest: GuestType<T>,\n  applier: (executor: GuestExecutorType) => GuestExecutorType,\n) => {\n  const guestApplied = guestExecutorApplied(baseGuest, applier);\n\n  const result = {\n    give(value: T) {\n      guestApplied.give(value);\n      return result;\n    },\n    introduction,\n  };\n\n  return result;\n};\n","import { GuestType } from \"../Guest/Guest\";\nimport { guestSync } from \"../Guest/GuestSync\";\nimport { systemPatron } from \"../Patron/Patron\";\nimport { subSource } from \"../Patron/PatronPool\";\nimport { SourceObjectType, SourceType, value } from \"../Source/Source\";\n\n/**\n * Helps to represent source value as sync value, what can be returned\n * useful for example in tests\n * This source is not lazy! When we create it patron visit baseSource\n * @url https://silentium-lab.github.io/silentium/#/source/source-sync\n */\nexport const sourceSync = <T>(\n  baseSource: SourceType<T>,\n  defaultValue?: unknown,\n): SourceObjectType<T> & { syncValue(): T } => {\n  const syncGuest = guestSync<T>(defaultValue as T);\n  value(baseSource, systemPatron(syncGuest));\n\n  const result = {\n    value(guest: GuestType<T>) {\n      value(baseSource, guest);\n      return this;\n    },\n    syncValue() {\n      try {\n        return syncGuest.value() as T;\n      } catch {\n        throw new Error(\"No value in SourceSync\");\n      }\n    },\n  };\n  subSource(result, baseSource);\n\n  return result;\n};\n","import { sourceSync } from \"../Source/SourceSync\";\nimport { give, guest, GuestObjectType, GuestType } from \"../Guest/Guest\";\nimport { isPatron } from \"../Patron/Patron\";\nimport { patronOnce } from \"../Patron/PatronOnce\";\nimport { PatronPool } from \"../Patron/PatronPool\";\nimport {\n  isSource,\n  SourceDataType,\n  SourceObjectType,\n  SourceType,\n  value,\n} from \"./Source\";\n\nexport type SourceChangeableType<T = any> = SourceObjectType<T> &\n  GuestObjectType<T>;\n\nconst sourceIsEmpty = (source: unknown) =>\n  source === undefined || source === null;\n\n/**\n * Ability to create source what can be changed later\n * @url https://silentium-lab.github.io/silentium/#/source/source-of\n */\nexport const sourceOf = <T>(source?: SourceType<T>) => {\n  const createdSource = {} as SourceChangeableType<T>;\n  const thePool = new PatronPool(createdSource);\n  let isEmpty = sourceIsEmpty(source);\n\n  if (!isEmpty && isSource(source)) {\n    value(\n      source,\n      patronOnce((unwrappedSourceDocument) => {\n        isEmpty = sourceIsEmpty(unwrappedSourceDocument);\n        source = unwrappedSourceDocument as SourceDataType<T>;\n      }),\n    );\n  }\n\n  createdSource.value = (g: GuestType<T>) => {\n    if (isEmpty) {\n      if (isPatron(g)) {\n        thePool.add(g);\n      }\n      return createdSource;\n    }\n\n    if (typeof g === \"function\") {\n      thePool.distribute(source, guest(g));\n    } else {\n      thePool.distribute(source, g);\n    }\n\n    return createdSource;\n  };\n\n  createdSource.give = (value: T) => {\n    isEmpty = sourceIsEmpty(value);\n    source = value as SourceDataType<T>;\n\n    if (!isEmpty) {\n      thePool.give(source);\n    }\n\n    return createdSource;\n  };\n\n  return createdSource as SourceChangeableType<T>;\n};\n\n/**\n * Changeable source what can be changed only once with specified value\n * @url https://silentium-lab.github.io/silentium/#/source/source-memo-of\n */\nexport const sourceMemoOf = <T>(\n  source?: SourceType<T>,\n): SourceChangeableType<T> => {\n  const result = sourceOf(source);\n  const baseSrcSync = sourceSync(result, null);\n\n  const resultMemo = {\n    value: result.value,\n    give(value: T) {\n      if (baseSrcSync.syncValue() !== value) {\n        give(value, result.give);\n      }\n      return resultMemo;\n    },\n  };\n\n  return resultMemo;\n};\n","import {\n  firstVisit,\n  give,\n  guest,\n  GuestObjectType,\n  GuestType,\n} from \"../Guest/Guest\";\nimport { guestCast } from \"../Guest/GuestCast\";\nimport { systemPatron } from \"../Patron/Patron\";\nimport { removePatronFromPools, subSource } from \"../Patron/PatronPool\";\nimport { DestroyableType } from \"../Source/SourceDestroyable\";\nimport { SourceObjectType, SourceType, value } from \"./Source\";\nimport { sourceOf } from \"./SourceChangeable\";\n\ntype ExtractType<T> = T extends SourceType<infer U> ? U : never;\n\nexport type ExtractTypesFromArray<T extends SourceType<any>[]> = {\n  [K in keyof T]: ExtractType<T[K]>;\n};\n\n/**\n * Represents common value as Array of bunch of sources,\n * when all sources will gets it's values\n * @url https://silentium-lab.github.io/silentium/#/source/source-all\n */\nexport const sourceAll = <const T extends SourceType[]>(\n  sources: T,\n): SourceObjectType<ExtractTypesFromArray<T>> & DestroyableType => {\n  const keysKnown = new Set<string>(Object.keys(sources));\n  const keysFilled = new Set();\n  const isAllFilled = () => {\n    return keysFilled.size > 0 && keysFilled.size === keysKnown.size;\n  };\n  const theAll = sourceOf({});\n  const patrons: GuestObjectType[] = [];\n\n  const visited = firstVisit(() => {\n    Object.entries(sources).forEach(([key, source]) => {\n      subSource(theAll, source);\n      keysKnown.add(key);\n      const keyPatron = systemPatron((v) => {\n        theAll.value(\n          guest((all: Record<string, unknown>) => {\n            keysFilled.add(key);\n            const lastAll = {\n              ...all,\n              [key]: v,\n            };\n            theAll.give(lastAll);\n          }),\n        );\n      });\n      patrons.push(keyPatron);\n      value(source, keyPatron);\n    });\n  });\n\n  return {\n    value(guest: GuestType<ExtractTypesFromArray<T>>) {\n      visited();\n      const mbPatron = guestCast(guest, (value: T) => {\n        if (isAllFilled()) {\n          give(Object.values(value) as ExtractTypesFromArray<T>, guest);\n        }\n      });\n      patrons.push(mbPatron);\n      theAll.value(mbPatron);\n    },\n    destroy() {\n      patrons.forEach((patron) => {\n        removePatronFromPools(patron);\n      });\n    },\n  };\n};\n","import { give, GuestType } from \"../Guest/Guest\";\nimport { guestCast } from \"../Guest/GuestCast\";\nimport { patronOnce } from \"../Patron/PatronOnce\";\nimport { LazyType } from \"../Lazy/Lazy\";\nimport { isSource, SourceType, value } from \"./Source\";\nimport { sourceAll } from \"./SourceAll\";\nimport { sourceOf, SourceChangeableType } from \"./SourceChangeable\";\n\n/**\n * Ability to apply source to source of array values sequentially\n * @url https://silentium-lab.github.io/silentium/#/source/source-sequence\n */\nexport const sourceSequence = <T, TG>(\n  baseSource: SourceType<T[]>,\n  targetSource: LazyType<SourceType<TG>>,\n) => {\n  if (baseSource === undefined) {\n    throw new Error(\"SourceSequence didn't receive baseSource argument\");\n  }\n  if (targetSource === undefined) {\n    throw new Error(\"SourceSequence didn't receive targetSource argument\");\n  }\n\n  return (guest: GuestType<TG[]>) => {\n    const sequenceSource = sourceOf();\n    const source = targetSource.get(sequenceSource);\n\n    value(\n      baseSource,\n      guestCast(guest, (theValue) => {\n        let index = 0;\n\n        const sources: SourceChangeableType[] = [];\n        theValue.forEach(() => {\n          sources.push(sourceOf());\n        });\n\n        const nextItemHandle = () => {\n          if (theValue[index + 1] !== undefined) {\n            index = index + 1;\n            handle();\n          }\n        };\n\n        function handle() {\n          const currentSource = sources[index];\n          const nextValue = theValue[index];\n          if (isSource(nextValue)) {\n            value(\n              nextValue,\n              patronOnce((theNextValue) => {\n                sequenceSource.give(theNextValue);\n                value(source, currentSource);\n                nextItemHandle();\n              }),\n            );\n          } else {\n            sequenceSource.give(nextValue);\n            value(source, currentSource);\n            nextItemHandle();\n          }\n        }\n\n        if (theValue[index] !== undefined) {\n          handle();\n          value(sourceAll(sources), guest);\n        } else {\n          give([], guest);\n        }\n      }),\n    );\n  };\n};\n","import { firstVisit, give, GuestType } from \"../Guest/Guest\";\nimport { LazyType } from \"../Lazy/Lazy\";\nimport { systemPatron } from \"../Patron/Patron\";\nimport { patronOnce } from \"../Patron/PatronOnce\";\nimport { destroy, subSource } from \"../Patron/PatronPool\";\nimport { sourceOf } from \"../Source/SourceChangeable\";\nimport { SourceType, value } from \"./Source\";\nimport { sourceAll } from \"./SourceAll\";\n\n/**\n * Helps to modify many sources with one private source\n * @url https://silentium-lab.github.io/silentium/#/source/source-map\n */\nexport const sourceMap = <T, TG>(\n  baseSource: SourceType<T[]>,\n  targetSource: LazyType<SourceType<TG>>,\n) => {\n  if (baseSource === undefined) {\n    throw new Error(\"SourceMap didn't receive baseSource argument\");\n  }\n  if (targetSource === undefined) {\n    throw new Error(\"SourceMap didn't receive targetSource argument\");\n  }\n\n  const result = sourceOf<TG[]>();\n\n  const visited = firstVisit(() => {\n    value(\n      baseSource,\n      systemPatron((theValue) => {\n        const sources: SourceType[] = [];\n        theValue.forEach((val) => {\n          const source = targetSource.get(val);\n          subSource(source, baseSource);\n          sources.push(source);\n        });\n        value(\n          sourceAll(sources),\n          patronOnce((v) => {\n            destroy(...sources);\n            give(v, result);\n          }),\n        );\n      }),\n    );\n  });\n\n  return (g: GuestType<TG[]>) => {\n    visited();\n    result.value(g);\n  };\n};\n","import { give, GuestType } from \"../Guest/Guest\";\nimport { guestCast } from \"../Guest/GuestCast\";\nimport { SourceType, value } from \"./Source\";\n\n/**\n * Connects guest with source what give response faster than others\n * @url https://silentium-lab.github.io/silentium/#/source/source-race\n */\nexport const sourceRace = <T>(sources: SourceType<T>[]) => {\n  if (sources === undefined) {\n    throw new Error(\"SourceRace didnt receive sources argument\");\n  }\n\n  return (guest: GuestType<T>) => {\n    let connectedWithSource: SourceType | null = null;\n    sources.forEach((source) => {\n      value(\n        source,\n        guestCast(<GuestType>guest, (value) => {\n          if (!connectedWithSource || connectedWithSource === source) {\n            give(value as T, guest);\n            connectedWithSource = source;\n          }\n        }),\n      );\n    });\n  };\n};\n","import { firstVisit, GuestType } from \"../Guest/Guest\";\nimport { systemPatron } from \"../Patron/Patron\";\nimport { SourceType, value } from \"../Source/Source\";\nimport { sourceOf } from \"../Source/SourceChangeable\";\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ntype Last<T extends any[]> = T extends [...infer U, infer L] ? L : never;\n\n/**\n * Returns value of some source when all sources before it gives their response\n * @url https://silentium-lab.github.io/silentium/#/source/source-chain\n */\nexport const sourceChain = <T extends SourceType[]>(\n  ...sources: T\n): SourceType<Last<T>> => {\n  const resultSrc = sourceOf<Last<T>>();\n  const respondedSources = new WeakMap();\n\n  const repeatValue = () => {\n    value(resultSrc, resultSrc);\n  };\n\n  const handleSource = (index: number) => {\n    const source = sources[index];\n    const nextSource = sources[index + 1];\n\n    value(\n      source,\n      systemPatron((v) => {\n        let sourceKey = source;\n\n        if (\n          (typeof source !== \"object\" || source === null) &&\n          typeof source !== \"function\" &&\n          !Array.isArray(source)\n        ) {\n          sourceKey = { source };\n        }\n\n        if (nextSource) {\n          repeatValue();\n        }\n\n        if (!nextSource) {\n          resultSrc.give(v as Last<T>);\n        } else if (!respondedSources.has(sourceKey)) {\n          handleSource(index + 1);\n        }\n\n        respondedSources.set(sourceKey, 1);\n      }),\n    );\n  };\n\n  const visited = firstVisit(() => {\n    handleSource(0);\n  });\n\n  return (g: GuestType<Last<T>>) => {\n    visited();\n    resultSrc.value(g);\n  };\n};\n","import { give, GuestType } from \"../Guest/Guest\";\nimport { SourceType, value } from \"./Source\";\nimport { SourceChangeableType } from \"./SourceChangeable\";\n\n/**\n * Ability to build common changeable source from different guest and source\n * @url https://silentium-lab.github.io/silentium/#/source/source-dynamic\n */\nexport const sourceDynamic = <T>(\n  baseGuest: GuestType<T>,\n  baseSource: SourceType<T>,\n): SourceChangeableType<T> => {\n  if (baseGuest === undefined) {\n    throw new Error(\"SourceDynamic didn't receive baseGuest argument\");\n  }\n  if (baseSource === undefined) {\n    throw new Error(\"SourceDynamic didn't receive baseSource argument\");\n  }\n\n  const sourceObject = {\n    value(guest: GuestType<T>) {\n      value(baseSource, guest);\n      return sourceObject;\n    },\n    give(value: T) {\n      give(value, baseGuest);\n      return this;\n    },\n  };\n\n  return sourceObject;\n};\n","import { give, GuestType } from \"../Guest/Guest\";\nimport { guestCast } from \"../Guest/GuestCast\";\nimport { SourceType, value } from \"../Source/Source\";\n\n/**\n * Gives ability to apply function to source value\n * @url https://silentium-lab.github.io/silentium/#/source/source-applied\n */\nexport const sourceApplied = <T, R>(\n  baseSource: SourceType<T>,\n  applier: (v: T) => R,\n) => {\n  return (guest: GuestType<R>) => {\n    value(\n      baseSource,\n      guestCast(guest, (v) => {\n        give(applier(v), guest);\n      }),\n    );\n  };\n};\n","import { give, GuestType } from \"../Guest/Guest\";\nimport { guestCast } from \"../Guest/GuestCast\";\nimport { SourceType, value } from \"../Source/Source\";\n\n/**\n * Ability to apply function to source executor, helpful when need to apply throttling or debounce\n * @url https://silentium-lab.github.io/silentium/#/source/source-executor-applied\n */\nexport const sourceExecutorApplied = <T>(\n  source: SourceType<T>,\n  applier: (executor: GuestType<T>) => GuestType<T>,\n) => {\n  return (g: GuestType<T>) => {\n    value(\n      source,\n      guestCast(\n        g,\n        applier((v) => {\n          give(v, g);\n        }),\n      ),\n    );\n  };\n};\n","import { give, GuestType } from \"../Guest/Guest\";\nimport { guestCast } from \"../Guest/GuestCast\";\nimport { SourceType, value } from \"../Source/Source\";\n\n/**\n * Helps not to respond with information what checked by predicate function\n * @url https://silentium-lab.github.io/silentium/#/source/source-filtered\n */\nexport const sourceFiltered = <T>(\n  baseSource: SourceType<T>,\n  predicate: (v: T) => boolean,\n  defaultValue?: T,\n) => {\n  return (g: GuestType<T>) => {\n    value(\n      baseSource,\n      guestCast(g, (v) => {\n        if (predicate(v) === true) {\n          give(v, g);\n        } else if (defaultValue !== undefined) {\n          give(defaultValue, g);\n        }\n      }),\n    );\n  };\n};\n","import { GuestType } from \"../Guest/Guest\";\nimport { SourceType, value } from \"./Source\";\nimport { sourceOf } from \"./SourceChangeable\";\n\n/**\n * Ability set the value only once\n * @url https://silentium-lab.github.io/silentium/#/source/source-once\n */\nexport const sourceOnce = <T>(initialValue?: SourceType<T>) => {\n  let isFilled = initialValue !== undefined;\n  const source = sourceOf(initialValue);\n\n  return {\n    value(guest: GuestType<T>) {\n      value(source, guest);\n      return this;\n    },\n    give(value: T) {\n      if (!isFilled) {\n        source.give(value);\n        isFilled = true;\n      }\n      return this;\n    },\n  };\n};\n","import { GuestType } from \"../Guest/Guest\";\nimport { systemPatron } from \"../Patron/Patron\";\nimport { subSourceMany } from \"../Patron/PatronPool\";\nimport { SourceType, value } from \"../Source/Source\";\nimport { ExtractTypesFromArray, sourceAll } from \"../Source/SourceAll\";\nimport { sourceOf } from \"../Source/SourceChangeable\";\n\n/**\n * Simplifies sources combination, when we need to create value depending on many sources\n * @url https://silentium-lab.github.io/silentium/#/source/source-combined\n */\nexport const sourceCombined =\n  <const T extends SourceType[]>(...sources: T) =>\n  <R>(\n    source: (\n      guest: GuestType<R>,\n      ...sourcesValues: ExtractTypesFromArray<T>\n    ) => void,\n  ): SourceType<R> => {\n    const result = sourceOf<R>();\n    subSourceMany(result, sources);\n\n    value(\n      sourceAll(sources),\n      systemPatron((actualValues) => {\n        source(result.give, ...actualValues);\n      }),\n    );\n\n    return result.value;\n  };\n","import { firstVisit, give, GuestType } from \"../Guest/Guest\";\nimport { systemPatron } from \"../Patron/Patron\";\nimport { subSource } from \"../Patron/PatronPool\";\nimport { SourceType, value } from \"../Source/Source\";\nimport { sourceOf } from \"../Source/SourceChangeable\";\nimport { sourceDynamic } from \"../Source/SourceDynamic\";\n\n/**\n * @url https://silentium-lab.github.io/silentium/#/source/source-resettable\n */\nexport const sourceResettable = <T>(\n  baseSrc: SourceType<T>,\n  resettableSrc: SourceType<unknown>,\n) => {\n  const result = sourceOf<T>();\n\n  const visited = firstVisit(() => {\n    value(\n      resettableSrc,\n      systemPatron(() => {\n        give(null, result);\n      }),\n    );\n\n    value(baseSrc, systemPatron(result));\n    subSource(result, baseSrc);\n  });\n\n  return sourceDynamic(result.give, (g: GuestType<T>) => {\n    visited();\n    result.value(g);\n  });\n};\n","import { firstVisit, GuestType } from \"../Guest/Guest\";\nimport { systemPatron } from \"../Patron/Patron\";\nimport { SourceType, value } from \"../Source/Source\";\nimport { sourceOf } from \"../Source/SourceChangeable\";\n\n/**\n * Present source of value what was last appeared in any\n * of given sources, can be used as default value, when some source\n * don't respond\n * @url https://silentium-lab.github.io/silentium/#/source/source-any\n */\nexport const sourceAny = <T>(sources: SourceType<T>[]) => {\n  const lastSrc = sourceOf<T>();\n\n  const visited = firstVisit(() => {\n    sources.forEach((source) => {\n      value(source, systemPatron(lastSrc));\n    });\n  });\n\n  return (g: GuestType<T>) => {\n    visited();\n    lastSrc.value(g);\n  };\n};\n","import { GuestType } from \"src/Guest/Guest\";\nimport { LazyType } from \"../Lazy/Lazy\";\nimport { systemPatron } from \"../Patron/Patron\";\nimport { destroy } from \"../Patron/PatronPool\";\nimport { SourceType, value } from \"../Source/Source\";\nimport { sourceAll } from \"../Source/SourceAll\";\nimport { sourceOf } from \"../Source/SourceChangeable\";\nimport { sourceResettable } from \"../Source/SourceResettable\";\n\n/**\n * Helps to build source only when all sources will give its values\n * and only after some guest visit source\n * @url https://silentium-lab.github.io/silentium/#/source/source-lazy\n */\nexport const sourceLazy = <T>(\n  lazySrc: LazyType<SourceType<T>>,\n  args: SourceType[],\n  destroySrc?: SourceType<unknown>,\n) => {\n  let instance: SourceType<T> | null = null;\n  const result = sourceOf<T>();\n  const resultResettable = sourceResettable(result, destroySrc ?? sourceOf());\n  let wasInstantiated = false;\n\n  const instantiate = () => {\n    if (wasInstantiated) {\n      return;\n    }\n\n    wasInstantiated = true;\n    value(\n      sourceAll(args),\n      systemPatron(() => {\n        if (!instance) {\n          instance = lazySrc.get(...args);\n          value(instance, systemPatron(result));\n        }\n      }),\n    );\n  };\n\n  if (destroySrc) {\n    value(\n      destroySrc,\n      systemPatron(() => {\n        destroy(instance);\n        instance = null;\n      }),\n    );\n  }\n\n  return (g: GuestType<T>) => {\n    instantiate();\n    value(resultResettable, g);\n  };\n};\n","import { SourceExecutorType, SourceObjectType } from \"./Source\";\n\nexport type DestructorType = () => void;\n\nexport interface DestroyableType {\n  destroy: DestructorType;\n}\n\n/**\n * Ability to create sources that support special destruction logic\n * @url https://silentium-lab.github.io/silentium/#/source/source-destroyable\n */\nexport const sourceDestroyable = <T>(\n  source: SourceExecutorType<T, DestructorType>,\n): SourceObjectType<T> & DestroyableType => {\n  let destructor: DestructorType | null = null;\n  return {\n    value(g) {\n      destructor = source(g);\n      return this;\n    },\n    destroy() {\n      if (destructor !== null && typeof destructor === \"function\") {\n        destructor();\n      }\n      return this;\n    },\n  };\n};\n","import { LazyType } from \"./Lazy\";\n\ninterface Constructable<T> {\n  new (...args: unknown[]): T;\n}\n\ninterface Prototyped<T> {\n  prototype: T;\n}\n\nexport const lazyClass = <T>(\n  constructorFn: Prototyped<T>,\n  modules: Record<string, unknown> = {},\n): LazyType<T> => {\n  if (constructorFn === undefined) {\n    throw new Error(\"PrivateClass didn't receive constructorFn argument\");\n  }\n\n  return {\n    get<R extends unknown[], CT = null>(...args: R): CT extends null ? T : CT {\n      return new (constructorFn as Constructable<T>)(\n        ...args,\n        modules,\n      ) as CT extends null ? T : CT;\n    },\n  };\n};\n","export interface LazyType<T> {\n  get<R extends unknown[], CT = null>(...args: R): CT extends null ? T : CT;\n}\n\n/**\n * Helps to get lazy instance of dependency\n * @url https://silentium-lab.github.io/silentium/#/utils/lazy\n */\nexport const lazy = <T>(buildingFn: (...args: any[]) => T): LazyType<T> => {\n  if (buildingFn === undefined) {\n    throw new Error(\"lazy didn't receive buildingFn argument\");\n  }\n\n  return {\n    get<R extends unknown[], CT = null>(...args: R): CT extends null ? T : CT {\n      return buildingFn(...args) as CT extends null ? T : CT;\n    },\n  };\n};\n","export type NamedType = {\n  name: string;\n};\n\n/**\n * Helps to bind name to object or function\n */\nexport const withName = <T>(obj: T, name: string): T & NamedType => {\n  return new Proxy(obj as any, {\n    get(target, field) {\n      if (field === \"name\") {\n        return name;\n      }\n\n      return (target as any)[field];\n    },\n  }) as T & NamedType;\n};\n"],"names":["valueExact","source","guest","Error","value","give","Array","isArray","forEach","currentGuest","isSource","mbSource","data","isGuest","mbGuest","receiver","result","firstVisit","afterFirstVisit","isVisited","guestCast","sourceGuest","targetGuest","disposed","maybeDisposable","introduction","guestSync","theValue","guestDisposable","disposeCheck","guestApplied","baseGuest","applier","guestExecutorApplied","v","patronPriority","g","priority","isPatron","patron","willBePatron","systemPatron","withPriority","patronOnce","received","PrioritySet","constructor","__publicField","this","items","Map","sortedItems","findInsertPosition","left","right","length","mid","Math","floor","findItemIndex","findIndex","item","add","existingItem","get","oldIndex","splice","newIndex","newItem","set","insertIndex","delete","index","has","size","clear","getPriority","setPriority","callback","values","map","Symbol","iterator","entries","toArray","toArrayWithPriorities","debug","console","log","poolSets","poolsOfInitiators","subSources","poolsChangeFns","notifyPoolsChange","fn","lastPatronPoolsStatistic","poolsCount","patronsCount","patronPoolsStatistic","push","subSource","subSourceMany","subSourceSrc","sourcesSrc","isDestroyable","s","destroy","initiators","initiator","pool","foundSubSources","patronPools","pools","poolInstance","removePatronFromPools","isPatronInPools","inPool","PatronPool","patrons","doReceive","target","sendValueToGuest","shouldBePatron","remove","distribute","receiving","possiblePatron","guestDisposed","patronApplied","applied","patronExecutorApplied","sourceSync","baseSource","defaultValue","syncGuest","syncValue","sourceIsEmpty","sourceOf","createdSource","thePool","isEmpty","unwrappedSourceDocument","sourceMemoOf","baseSrcSync","resultMemo","sourceAll","sources","keysKnown","Set","Object","keys","keysFilled","theAll","visited","key","keyPatron","all","lastAll","mbPatron","sourceSequence","targetSource","sequenceSource","nextItemHandle","handle","currentSource","nextValue","theNextValue","sourceMap","val","sourceRace","connectedWithSource","sourceChain","resultSrc","respondedSources","WeakMap","handleSource","nextSource","sourceKey","sourceDynamic","sourceObject","sourceApplied","sourceExecutorApplied","sourceFiltered","predicate","sourceOnce","initialValue","isFilled","sourceCombined","actualValues","sourceResettable","baseSrc","resettableSrc","sourceAny","lastSrc","sourceLazy","lazySrc","args","destroySrc","instance","resultResettable","wasInstantiated","sourceDestroyable","destructor","lazyClass","constructorFn","modules","lazy","buildingFn","withName","obj","name","Proxy","field"],"mappings":"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"}