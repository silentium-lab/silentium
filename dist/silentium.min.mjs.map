{"version":3,"file":"silentium.min.mjs","sources":["../src/helpers/guards.ts","../src/helpers/ensures.ts","../src/base/DestroyContainer.ts","../src/base/Event.ts","../src/base/Local.ts","../src/base/Of.ts","../src/base/Void.ts","../src/helpers/OwnerPool.ts","../src/base/User.ts","../src/components/All.ts","../src/components/Any.ts","../src/components/Applied.ts","../src/components/Catch.ts","../src/components/Chain.ts","../src/components/ExecutorApplied.ts","../src/components/Filtered.ts","../src/components/FromEvent.ts","../src/components/FromPromise.ts","../src/components/Late.ts","../src/components/Once.ts","../src/components/Shared.ts","../src/components/SharedSource.ts","../src/components/LateShared.ts","../src/components/Map.ts","../src/components/Primitive.ts","../src/components/Sequence.ts","../src/components/Stream.ts","../src/components/Transport.ts","../src/components/TransportApplied.ts","../src/components/TransportArgs.ts","../src/components/TransportDestroyable.ts"],"sourcesContent":["import {\n  DestroyableType,\n  EventType,\n  EventUserType,\n  TransportType,\n} from \"../types\";\n\nexport const isFilled = <T>(\n  value?: T,\n): value is Exclude<T, null | undefined> => {\n  return value !== undefined && value !== null;\n};\n\nexport function isEvent<T>(o: T): o is T & EventType {\n  return (\n    o !== null &&\n    typeof o === \"object\" &&\n    \"event\" in o &&\n    typeof (o as any).event === \"function\"\n  );\n}\n\nexport function isDestroyable<T>(o: T): o is T & DestroyableType {\n  return (\n    o !== null &&\n    typeof o === \"object\" &&\n    \"destroy\" in o &&\n    typeof (o as any).destroy === \"function\"\n  );\n}\n\nexport function isUser<T>(o: T): o is T & EventUserType {\n  return (\n    o !== null &&\n    typeof o === \"object\" &&\n    \"use\" in o &&\n    typeof (o as any).use === \"function\"\n  );\n}\n\nexport function isTransport<T>(o: T): o is T & TransportType {\n  return (\n    o !== null &&\n    typeof o === \"object\" &&\n    \"of\" in o &&\n    typeof (o as any).of === \"function\"\n  );\n}\n","import { isEvent, isUser } from \"../helpers/guards\";\n\nexport function ensureFunction(v: unknown, label: string) {\n  if (typeof v !== \"function\") {\n    throw new Error(`${label}: is not function`);\n  }\n}\n\nexport function ensureEvent(v: unknown, label: string) {\n  if (!isEvent(v)) {\n    throw new Error(`${label}: is not event`);\n  }\n}\n\nexport function ensureUser(v: unknown, label: string) {\n  if (!isUser(v)) {\n    throw new Error(`${label}: is not user`);\n  }\n}\n","import { DestroyableType } from \"../types\";\n\nexport class DestroyContainer implements DestroyableType {\n  private destructors: DestroyableType[] = [];\n\n  public add(e: DestroyableType) {\n    this.destructors.push(e);\n    return this;\n  }\n\n  public destroy() {\n    this.destructors.forEach((d) => d.destroy());\n    return this;\n  }\n}\n","import { ensureFunction } from \"../helpers\";\nimport { DestroyableType, EventType, EventUserType } from \"../types\";\n\ntype EventExecutor<T> = (user: EventUserType<T>) => void | (() => void);\n\nexport class Event<T> implements EventType<T>, DestroyableType {\n  private mbDestructor: unknown;\n\n  public constructor(private eventExecutor: EventExecutor<T>) {\n    ensureFunction(eventExecutor, \"Event: eventExecutor\");\n  }\n\n  public event(user: EventUserType<T>) {\n    this.mbDestructor = this.eventExecutor(user);\n    return this;\n  }\n\n  public destroy() {\n    if (typeof this.mbDestructor === \"function\") {\n      this.mbDestructor?.();\n    }\n    return this;\n  }\n}\n","import { ensureEvent } from \"../helpers\";\nimport { ParentUser } from \"../base/User\";\nimport { DestroyableType, EventType, EventUserType } from \"../types\";\n\n/**\n * Create local copy of source what can be destroyed\n */\nexport class Local<T> implements EventType<T>, DestroyableType {\n  private destroyed = false;\n\n  public constructor(private $base: EventType<T>) {\n    ensureEvent($base, \"Local: $base\");\n  }\n\n  public event(user: EventUserType<T>): this {\n    this.$base.event(this.user.child(user));\n    return this;\n  }\n\n  private user = new ParentUser((v: T, child: EventUserType<T>) => {\n    if (!this.destroyed) {\n      child.use(v);\n    }\n  });\n\n  public destroy(): this {\n    return this;\n  }\n}\n","import { EventType, EventUserType } from \"../types\";\n\nexport class Of<T> implements EventType<T> {\n  public constructor(private value: T) {}\n\n  public event(user: EventUserType<T>): this {\n    user.use(this.value);\n    return this;\n  }\n}\n","import { EventUserType } from \"../types\";\n\n/**\n * Silent user\n */\nexport class Void implements EventUserType {\n  public use(): this {\n    return this;\n  }\n}\n","import { User } from \"../base\";\nimport { EventUserType } from \"../types\";\n\n/**\n * Helps maintain an owner list allowing different\n * owners to get information from a common source\n * https://silentium-lab.github.io/silentium/#/en/utils/owner-pool\n */\nexport class OwnerPool<T> {\n  private owners: Set<EventUserType<T>>;\n  private innerOwner: EventUserType<T>;\n\n  public constructor() {\n    this.owners = new Set<EventUserType<T>>();\n    this.innerOwner = new User((v) => {\n      this.owners.forEach((g) => {\n        g.use(v);\n      });\n    });\n  }\n\n  public owner() {\n    return this.innerOwner;\n  }\n\n  public size(): number {\n    return this.owners.size;\n  }\n\n  public has(owner: EventUserType<T>): boolean {\n    return this.owners.has(owner);\n  }\n\n  public add(owner: EventUserType<T>) {\n    this.owners.add(owner);\n    return this;\n  }\n\n  public remove(g: EventUserType<T>) {\n    this.owners.delete(g);\n    return this;\n  }\n\n  public destroy() {\n    this.owners.forEach((g) => {\n      this.remove(g);\n    });\n    return this;\n  }\n}\n","import { ensureFunction } from \"../helpers\";\nimport { EventUserType } from \"../types\";\n\nexport class User<T> implements EventUserType<T> {\n  public constructor(private userExecutor: (v: T) => void) {\n    ensureFunction(userExecutor, \"User: user executor\");\n  }\n\n  public use(value: T) {\n    this.userExecutor(value);\n    return this;\n  }\n}\n\nexport class ParentUser<T> implements EventUserType<T> {\n  public constructor(\n    private userExecutor: (v: T, user: EventUserType, ...args: any[]) => void,\n    private args: any[] = [],\n    private childUser?: EventUserType<T>,\n  ) {\n    ensureFunction(userExecutor, \"ParentUser: executor\");\n  }\n\n  public use(value: T): this {\n    if (this.childUser === undefined) {\n      throw new Error(\"no base user\");\n    }\n    this.userExecutor(value, this.childUser, ...this.args);\n    return this;\n  }\n\n  public child(user: EventUserType, ...args: any[]) {\n    return new ParentUser(this.userExecutor, [...this.args, ...args], user);\n  }\n}\n","import { ParentUser } from \"../base/User\";\nimport { ensureEvent } from \"../helpers\";\nimport { EventType, EventUserType } from \"../types\";\n\ntype ExtractTypeS<T> = T extends EventType<infer U> ? U : never;\n\nexport type ExtractTypesFromArrayS<T extends EventType<any>[]> = {\n  [K in keyof T]: ExtractTypeS<T[K]>;\n};\n\nconst isAllFilled = (keysFilled: Set<string>, keysKnown: Set<string>) => {\n  return keysFilled.size > 0 && keysFilled.size === keysKnown.size;\n};\n\nexport class All<const T extends EventType[]>\n  implements EventType<ExtractTypesFromArrayS<T>>\n{\n  private keysKnown: Set<string>;\n  private keysFilled = new Set<string>();\n  private $events: T;\n  private result: Record<string, unknown> = {};\n\n  public constructor(...events: T) {\n    this.keysKnown = new Set<string>(Object.keys(events));\n    this.$events = events;\n  }\n\n  public event(user: EventUserType<ExtractTypesFromArrayS<T>>): this {\n    Object.entries(this.$events).forEach(([key, event]) => {\n      ensureEvent(event, \"All: item\");\n      this.keysKnown.add(key);\n      event.event(this.user.child(user, key));\n    });\n    return this;\n  }\n\n  private user = new ParentUser((v: T, child: EventUserType, key: string) => {\n    this.keysFilled.add(key);\n    this.result[key] = v;\n    if (isAllFilled(this.keysFilled, this.keysKnown)) {\n      child.use(Object.values(this.result) as ExtractTypesFromArrayS<T>);\n    }\n  });\n}\n","import { ensureEvent } from \"../helpers\";\nimport { EventType, EventUserType } from \"../types\";\n\nexport class Any<T> implements EventType<T> {\n  private $events: EventType[];\n\n  public constructor(...events: EventType<T>[]) {\n    this.$events = events;\n  }\n\n  public event(user: EventUserType<T>): this {\n    this.$events.forEach((event) => {\n      ensureEvent(event, \"Any: item\");\n      event.event(user);\n    });\n    return this;\n  }\n}\n","import { ensureEvent } from \"../helpers\";\nimport { ParentUser } from \"../base/User\";\nimport { ConstructorType, EventType, EventUserType } from \"../types\";\n\nexport class Applied<T, R> implements EventType<R> {\n  public constructor(\n    private $base: EventType<T>,\n    private applier: ConstructorType<[T], R>,\n  ) {\n    ensureEvent($base, \"Applied: base\");\n  }\n\n  public event(user: EventUserType<R>) {\n    this.$base.event(this.user.child(user));\n    return this;\n  }\n\n  private user = new ParentUser((v: T, child) => {\n    child.use(this.applier(v));\n  });\n}\n","import { ensureEvent, ensureUser } from \"../helpers\";\nimport { EventType, EventUserType } from \"../types\";\n\nexport class Catch<T> implements EventType<T> {\n  public constructor(\n    private $base: EventType<T>,\n    private errorMessage: EventUserType,\n    private errorOriginal?: EventUserType,\n  ) {\n    ensureEvent($base, \"Catch: base\");\n    ensureUser(errorMessage, \"Catch: errorMessage\");\n    if (errorOriginal !== undefined) {\n      ensureUser(errorOriginal, \"Catch: errorOriginal\");\n    }\n  }\n\n  public event(user: EventUserType<T>) {\n    try {\n      this.$base.event(user);\n    } catch (e: any) {\n      if (e instanceof Error) {\n        this.errorMessage.use(e.message);\n      } else {\n        this.errorMessage.use(e);\n      }\n      if (this.errorOriginal) {\n        this.errorOriginal.use(e);\n      }\n    }\n    return this;\n  }\n}\n","import { EventTypeValue } from \"../types/EventType\";\nimport { EventType, EventUserType } from \"../types\";\nimport { ParentUser } from \"../base/User\";\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ntype Last<T extends any[]> = T extends [...infer _, infer L] ? L : never;\n\nexport class Chain<T extends EventType[]>\n  implements EventType<EventTypeValue<Last<T>>>\n{\n  private $events: T;\n  private lastValue: EventTypeValue<Last<T>> | undefined;\n\n  public constructor(...events: T) {\n    this.$events = events;\n  }\n\n  public event(user: EventUserType<EventTypeValue<Last<T>>>) {\n    this.handleEvent(0, user);\n    return this;\n  }\n\n  private handleEvent = (index: number, user: EventUserType) => {\n    const event = this.$events[index] as Last<T>;\n    const nextI = this.$events[index + 1] as Last<T> | undefined;\n    event.event(this.oneEventUser.child(user, nextI, index));\n  };\n\n  private oneEventUser = new ParentUser(\n    (\n      v: EventTypeValue<Last<T>>,\n      child,\n      nextI: Last<T> | undefined,\n      index: number,\n    ) => {\n      if (!nextI) {\n        this.lastValue = v as EventTypeValue<Last<T>>;\n      }\n\n      if (this.lastValue) {\n        child.use(this.lastValue);\n      }\n\n      if (nextI && !this.lastValue) {\n        this.handleEvent(index + 1, child);\n      }\n    },\n  );\n}\n","import { ensureEvent } from \"../helpers\";\nimport { EventType, EventUserType } from \"../types\";\n\nexport class ExecutorApplied<T> implements EventType<T> {\n  public constructor(\n    private $base: EventType<T>,\n    private applier: (executor: EventUserType<T>) => EventUserType<T>,\n  ) {\n    ensureEvent($base, \"ExecutorApplied: base\");\n  }\n\n  public event(user: EventUserType<T>) {\n    const ExecutorAppliedBaseUser = this.applier(user);\n    this.$base.event(ExecutorAppliedBaseUser);\n    return this;\n  }\n}\n","import { ParentUser } from \"../base/User\";\nimport { EventType, ConstructorType, EventUserType } from \"../types\";\n\nexport class Filtered<T> implements EventType<T> {\n  public constructor(\n    private $base: EventType<T>,\n    private predicate: ConstructorType<[T], boolean>,\n    private defaultValue?: T,\n  ) {}\n\n  public event(user: EventUserType<T>) {\n    this.$base.event(this.parent.child(user));\n    return this;\n  }\n\n  private parent = new ParentUser<T>((v, child) => {\n    if (this.predicate(v)) {\n      child.use(v);\n    } else if (this.defaultValue !== undefined) {\n      child.use(this.defaultValue);\n    }\n  });\n}\n","import { ParentUser, User } from \"../base/User\";\nimport { EventType, EventUserType } from \"../types\";\nimport { DestroyableType } from \"../types/EventType\";\nimport { All } from \"./All\";\n\nexport class FromEvent<T> implements EventType<T>, DestroyableType {\n  private lastUser: EventUserType<T> | null = null;\n  private handler = (v: T) => {\n    if (this.lastUser) {\n      this.lastUser.use(v);\n    }\n  };\n\n  public constructor(\n    private $emitter: EventType<any>,\n    private $eventName: EventType<string>,\n    private $subscribeMethod: EventType<string>,\n    private $unsubscribeMethod?: EventType<string>,\n  ) {}\n\n  public event(user: EventUserType<T>): this {\n    const a = new All(this.$emitter, this.$eventName, this.$subscribeMethod);\n    a.event(this.parent.child(user));\n    return this;\n  }\n\n  private parent = new ParentUser<[any, string, string]>(\n    ([emitter, eventName, subscribe], parent) => {\n      this.lastUser = parent;\n      if (!emitter?.[subscribe]) {\n        return;\n      }\n      emitter[subscribe](eventName, this.handler);\n    },\n  );\n\n  public destroy(): this {\n    this.lastUser = null;\n    if (!this.$unsubscribeMethod) {\n      return this;\n    }\n    const a = new All(this.$emitter, this.$eventName, this.$unsubscribeMethod);\n    a.event(\n      new User(([emitter, eventName, unsubscribe]) => {\n        emitter?.[unsubscribe]?.(eventName, this.handler);\n      }),\n    );\n    return this;\n  }\n}\n","import { EventType, EventUserType } from \"../types\";\n\nexport class FromPromise<T> implements EventType<T> {\n  public constructor(\n    private p: Promise<T>,\n    private errorOwner?: EventUserType,\n  ) {}\n\n  public event(user: EventUserType<T>): this {\n    this.p\n      .then(function FromPromiseThen(v) {\n        user.use(v);\n      })\n      .catch((e) => {\n        this.errorOwner?.use(e);\n      });\n    return this;\n  }\n}\n","import { isFilled } from \"../helpers\";\nimport { EventUserType, SourceType } from \"../types\";\n\n/**\n * A component that allows creating linked objects of information and its owner\n * in such a way that if a new value is assigned to the owner, this value\n * will become the value of the linked information source\n * https://silentium-lab.github.io/silentium/#/en/information/of\n */\nexport class Late<T> implements SourceType<T> {\n  private lateUser: EventUserType<T> | null = null;\n  private notify = (v?: T) => {\n    if (isFilled(v) && this.lateUser) {\n      this.lateUser.use(v);\n    }\n  };\n\n  public constructor(private v?: T) {}\n\n  public event(user: EventUserType<T>): this {\n    if (this.lateUser) {\n      throw new Error(\n        \"Late component gets new user, when another was already connected!\",\n      );\n    }\n    this.lateUser = user;\n    this.notify(this.v);\n    return this;\n  }\n\n  public use(value: T): this {\n    this.notify(value);\n    return this;\n  }\n}\n","import { ParentUser } from \"../base\";\nimport { EventType, EventUserType } from \"../types\";\n\n/**\n * Limits the number of values from the information source\n * to a single value - once the first value is emitted, no more\n * values are delivered from the source\n * https://silentium-lab.github.io/silentium/#/en/information/once\n */\nexport class Once<T> implements EventType<T> {\n  private isFilled = false;\n\n  public constructor(private $base: EventType<T>) {}\n\n  public event(user: EventUserType<T>): this {\n    this.$base.event(this.parent.child(user));\n    return this;\n  }\n\n  private parent = new ParentUser<T>((v, child) => {\n    if (!this.isFilled) {\n      this.isFilled = true;\n      child.use(v);\n    }\n  });\n}\n","import { User } from \"../base\";\nimport { Late } from \"../components/Late\";\nimport { Once } from \"../components/Once\";\nimport { isFilled, OwnerPool } from \"../helpers\";\nimport { EventType, EventUserType, SourceType } from \"../types\";\n\n/**\n * An information object that helps multiple owners access\n * a single another information object\n * https://silentium-lab.github.io/silentium/#/en/information/pool\n */\nexport class Shared<T> implements SourceType<T> {\n  private ownersPool = new OwnerPool<T>();\n  private lastValue: T | undefined;\n  private calls = new Late();\n  private firstCall = new Once(this.calls).event(\n    new User(() => {\n      this.$base.event(this.firstCallUser);\n    }),\n  );\n\n  public constructor(\n    private $base: EventType<T>,\n    private stateless = false,\n  ) {}\n\n  public event(user: EventUserType<T>) {\n    this.calls.use(1);\n    if (\n      !this.stateless &&\n      isFilled(this.lastValue) &&\n      !this.ownersPool.has(user)\n    ) {\n      user.use(this.lastValue);\n    }\n    this.ownersPool.add(user);\n    return this;\n  }\n\n  public use(value: T) {\n    this.calls.use(1);\n    this.lastValue = value;\n    this.ownersPool.owner().use(value);\n    return this;\n  }\n\n  private firstCallUser = new User<T>((v: T) => {\n    this.lastValue = v;\n    this.ownersPool.owner().use(v);\n  });\n\n  public touched() {\n    this.calls.use(1);\n  }\n\n  public pool() {\n    return this.ownersPool;\n  }\n\n  public destroy() {\n    return this.ownersPool.destroy();\n  }\n}\n","import { Shared } from \"../components/Shared\";\nimport { EventUserType, SourceType } from \"../types\";\n\nexport class SharedSource<T> implements SourceType<T> {\n  private $sharedBase: Shared<T>;\n\n  public constructor(\n    private $base: SourceType<T>,\n    stateless = false,\n  ) {\n    this.$sharedBase = new Shared(this.$base, stateless);\n  }\n\n  public event(user: EventUserType<T>) {\n    this.$sharedBase.event(user);\n    return this;\n  }\n\n  public use(value: T) {\n    this.$sharedBase.touched();\n    this.$base.use(value);\n    return this;\n  }\n}\n","import { Late } from \"../components/Late\";\nimport { SharedSource } from \"../components/SharedSource\";\nimport { EventUserType, SourceType } from \"../types\";\n\nexport class LateShared<T> implements SourceType<T> {\n  private $event: SharedSource<T>;\n\n  public constructor(value?: T) {\n    this.$event = new SharedSource(new Late(value));\n  }\n\n  public event(user: EventUserType<T>) {\n    this.$event.event(user);\n    return this;\n  }\n\n  public use(value: T) {\n    this.$event.use(value);\n    return this;\n  }\n}\n","import { isEvent } from \"src/helpers\";\nimport { Of, ParentUser } from \"../base\";\nimport { EventType, EventUserType, TransportType } from \"../types\";\nimport { All } from \"./All\";\n\n/**\n * Component that applies an info object constructor to each data item,\n * producing an information source with new values\n * https://silentium-lab.github.io/silentium/#/en/information/map\n */\nexport class Map<T, TG> implements EventType<TG[]> {\n  public constructor(\n    private $base: EventType<T[]>,\n    private $target: TransportType<any[], TG>,\n  ) {}\n\n  public event(user: EventUserType<TG[]>): this {\n    this.$base.event(this.parent.child(user));\n    return this;\n  }\n\n  private parent = new ParentUser<T[]>((v, child) => {\n    const infos: EventType<TG>[] = [];\n    v.forEach((val) => {\n      let valInfo: EventType<T> | T = val;\n      if (!isEvent(valInfo as object)) {\n        valInfo = new Of(valInfo);\n      }\n      const info = this.$target.of(valInfo);\n      infos.push(info);\n    });\n    const allI = new All(...infos);\n    allI.event(child);\n  });\n}\n","import { User } from \"../base\";\nimport { EventType } from \"../types\";\n\nexport class Primitive<T> {\n  private touched = false;\n\n  public constructor(\n    private $base: EventType<T>,\n    private theValue: T | null = null,\n  ) {}\n\n  private ensureTouched() {\n    if (!this.touched) {\n      this.$base.event(\n        new User((v) => {\n          this.theValue = v;\n        }),\n      );\n    }\n    this.touched = true;\n  }\n\n  public [Symbol.toPrimitive]() {\n    this.ensureTouched();\n    return this.theValue;\n  }\n\n  public primitive() {\n    this.ensureTouched();\n    return this.theValue;\n  }\n\n  public primitiveWithException() {\n    this.ensureTouched();\n    if (this.theValue === null) {\n      throw new Error(\"Primitive value is null\");\n    }\n    return this.theValue;\n  }\n}\n","import { ParentUser } from \"../base\";\nimport { EventType, EventUserType } from \"../types\";\n\n/**\n * A component that takes one value at a time and returns\n * an array of all previous values\n * https://silentium-lab.github.io/silentium/#/en/information/sequence\n */\nexport class Sequence<T> implements EventType<T[]> {\n  private result: T[] = [];\n\n  public constructor(private $base: EventType<T>) {}\n\n  public event(user: EventUserType<T[]>): this {\n    this.$base.event(this.parent.child(user));\n    return this;\n  }\n\n  private parent = new ParentUser<T>((v, child) => {\n    this.result.push(v);\n    child.use(this.result);\n  });\n}\n","import { ParentUser } from \"../base\";\nimport { EventType, EventUserType } from \"../types\";\n\n/**\n * Component that receives a data array and yields values one by one\n * https://silentium-lab.github.io/silentium/#/en/information/stream\n */\nexport class Stream<T> implements EventType<T> {\n  public constructor(private $base: EventType<T[]>) {}\n\n  public event(user: EventUserType<T>): this {\n    this.$base.event(this.parent.child(user));\n    return this;\n  }\n\n  private parent = new ParentUser<T[]>((v, child) => {\n    v.forEach((cv) => {\n      child.use(cv);\n    });\n  });\n}\n","import { ConstructorType, EventType, TransportType } from \"../types\";\n\nexport class Transport<T> implements TransportType<any[], T> {\n  public constructor(private executor: ConstructorType<any[], EventType<T>>) {}\n\n  public of(...args: any[]): EventType<T> {\n    return this.executor(...args);\n  }\n}\n","import { EventType, ConstructorType, TransportType } from \"../types\";\n\nexport class TransportApplied<T> implements TransportType {\n  public constructor(\n    private baseTransport: TransportType<any[], T>,\n    private applier: ConstructorType<[EventType], EventType<T>>,\n  ) {}\n\n  public of(...args: unknown[]): EventType<unknown> {\n    return this.applier(this.baseTransport.of(...args));\n  }\n}\n","import { EventType, TransportType } from \"../types\";\n\nexport class TransportArgs implements TransportType {\n  public constructor(\n    private baseTransport: TransportType<any[], EventType>,\n    private args: unknown[],\n    private startFromArgIndex: number = 0,\n  ) {}\n\n  public of(...runArgs: unknown[]): EventType<unknown> {\n    return this.baseTransport.of(\n      ...mergeAtIndex(runArgs, this.args, this.startFromArgIndex),\n    );\n  }\n}\n\nfunction mergeAtIndex(arr1: unknown[], arr2: unknown[], index: number) {\n  const result = arr1.slice(0, index);\n  while (result.length < index) result.push(undefined);\n  return result.concat(arr2);\n}\n","import { isDestroyable } from \"../helpers\";\nimport { DestroyableType, TransportType } from \"../types\";\n\n/**\n * Constructor what can be destroyed\n */\nexport class TransportDestroyable<T> implements TransportType, DestroyableType {\n  private destructors: DestroyableType[] = [];\n\n  public constructor(private baseTransport: TransportType<any[], T>) {}\n\n  public of(...args: unknown[]) {\n    const inst = this.baseTransport.of(...args);\n    if (isDestroyable(inst)) {\n      this.destructors.push(inst);\n    }\n    return inst;\n  }\n\n  public destroy(): this {\n    this.destructors.forEach((i) => i.destroy());\n    return this;\n  }\n}\n"],"names":["isFilled","value","isEvent","o","event","isDestroyable","destroy","isUser","use","isTransport","of","ensureFunction","v","label","Error","ensureEvent","ensureUser","DestroyContainer","constructor","__publicField","this","add","e","destructors","push","forEach","d","Event","eventExecutor","user","mbDestructor","Local","$base","ParentUser","child","destroyed","Of","Void","OwnerPool","owners","Set","innerOwner","User","g","owner","size","has","remove","delete","userExecutor","args","childUser","All","events","key","keysFilled","keysKnown","result","Object","values","keys","$events","entries","Any","Applied","applier","Catch","errorMessage","errorOriginal","message","Chain","index","nextI","oneEventUser","lastValue","handleEvent","ExecutorApplied","ExecutorAppliedBaseUser","Filtered","predicate","defaultValue","parent","FromEvent","$emitter","$eventName","$subscribeMethod","$unsubscribeMethod","lastUser","emitter","eventName","subscribe","handler","unsubscribe","FromPromise","p","errorOwner","then","catch","Late","lateUser","notify","Once","Shared","stateless","calls","firstCallUser","ownersPool","touched","pool","SharedSource","$sharedBase","LateShared","$event","Map","$target","infos","val","valInfo","info","Primitive","theValue","ensureTouched","Symbol","toPrimitive","primitive","primitiveWithException","Sequence","Stream","cv","Transport","executor","TransportApplied","baseTransport","TransportArgs","startFromArgIndex","runArgs","arr1","arr2","slice","length","concat","mergeAtIndex","TransportDestroyable","inst","i"],"mappings":"sCAOa,MAAAA,EACXC,GAEOA,QAGF,SAASC,EAAWC,GAEvB,OAAM,OAANA,GACa,iBAANA,GACP,UAAWA,GACiB,mBAApBA,EAAUC,KAEtB,CAEO,SAASC,EAAiBF,GAE7B,OAAM,OAANA,GACa,iBAANA,GACP,YAAaA,GACiB,mBAAtBA,EAAUG,OAEtB,CAEO,SAASC,EAAUJ,GAEtB,OAAM,OAANA,GACa,iBAANA,GACP,QAASA,GACiB,mBAAlBA,EAAUK,GAEtB,CAEO,SAASC,EAAeN,GAE3B,OAAM,OAANA,GACa,iBAANA,GACP,OAAQA,GACiB,mBAAjBA,EAAUO,EAEtB,CC7CgB,SAAAC,EAAeC,EAAYC,GACrC,GAAa,mBAAND,EACT,MAAM,IAAIE,MAAM,GAAGD,qBAEvB,CAEgB,SAAAE,EAAYH,EAAYC,GAClC,IAACX,EAAQU,GACX,MAAM,IAAIE,MAAM,GAAGD,kBAEvB,CAEgB,SAAAG,EAAWJ,EAAYC,GACjC,IAACN,EAAOK,GACV,MAAM,IAAIE,MAAM,GAAGD,iBAEvB,sIChBO,MAAMI,EAAN,WAAAC,GACLC,EAAAC,KAAQ,cAAiC,GAAC,CAEnC,GAAAC,CAAIC,GAEF,OADFF,KAAAG,YAAYC,KAAKF,GACfF,IAAA,CAGF,OAAAd,GAEE,OADPc,KAAKG,YAAYE,SAASC,GAAMA,EAAEpB,YAC3Bc,IAAA,uICPJ,MAAMO,EAGJ,WAAAT,CAAoBU,GAAAR,KAAAQ,cAAAA,EAFnBT,EAAAC,KAAA,gBAGNT,EAAeiB,EAAe,uBAAsB,CAG/C,KAAAxB,CAAMyB,GAEJ,OADFT,KAAAU,aAAeV,KAAKQ,cAAcC,GAChCT,IAAA,CAGF,OAAAd,GAIE,MAH0B,mBAAtBc,KAAKU,cACdV,KAAKU,iBAEAV,IAAA,4JCdJ,MAAMW,EAGJ,WAAAb,CAAoBc,GAAAZ,KAAAY,MAAAA,EAF3Bb,EAAAC,KAAQ,aAAY,GAWpBD,EAAAC,KAAQ,OAAO,IAAIa,GAAW,CAACrB,EAAMsB,KAC9Bd,KAAKe,WACRD,EAAM1B,IAAII,EAAC,KAVbG,EAAYiB,EAAO,eAAc,CAG5B,KAAA5B,CAAMyB,GAEJ,OADPT,KAAKY,MAAM5B,MAAMgB,KAAKS,KAAKK,MAAML,IAC1BT,IAAA,CASF,OAAAd,GACE,OAAAc,IAAA,ECxBJ,MAAMgB,EACJ,WAAAlB,CAAoBjB,GAAAmB,KAAAnB,MAAAA,CAAA,CAEpB,KAAAG,CAAMyB,GAEJ,OADFA,EAAArB,IAAIY,KAAKnB,OACPmB,IAAA,ECFJ,MAAMiB,EACJ,GAAA7B,GACE,OAAAY,IAAA,4JCCJ,MAAMkB,EAIJ,WAAApB,GAHCC,EAAAC,KAAA,UACAD,EAAAC,KAAA,cAGDA,KAAAmB,WAAaC,IAClBpB,KAAKqB,WAAa,IAAIC,GAAM9B,IACrBQ,KAAAmB,OAAOd,SAASkB,IACnBA,EAAEnC,IAAII,EAAC,GACR,GACF,CAGI,KAAAgC,GACL,OAAOxB,KAAKqB,UAAA,CAGP,IAAAI,GACL,OAAOzB,KAAKmB,OAAOM,IAAA,CAGd,GAAAC,CAAIF,GACF,OAAAxB,KAAKmB,OAAOO,IAAIF,EAAK,CAGvB,GAAAvB,CAAIuB,GAEF,OADFxB,KAAAmB,OAAOlB,IAAIuB,GACTxB,IAAA,CAGF,MAAA2B,CAAOJ,GAEL,OADFvB,KAAAmB,OAAOS,OAAOL,GACZvB,IAAA,CAGF,OAAAd,GAIE,OAHFc,KAAAmB,OAAOd,SAASkB,IACnBvB,KAAK2B,OAAOJ,EAAC,IAERvB,IAAA,EC5CJ,MAAMsB,EACJ,WAAAxB,CAAoB+B,GAAA7B,KAAA6B,aAAAA,EACzBtC,EAAesC,EAAc,sBAAqB,CAG7C,GAAAzC,CAAIP,GAEF,OADPmB,KAAK6B,aAAahD,GACXmB,IAAA,EAIJ,MAAMa,EACJ,WAAAf,CACG+B,EACAC,EAAc,GACdC,GAFA/B,KAAA6B,aAAAA,EACA7B,KAAA8B,KAAAA,EACA9B,KAAA+B,UAAAA,EAERxC,EAAesC,EAAc,uBAAsB,CAG9C,GAAAzC,CAAIP,GACL,QAAmB,IAAnBmB,KAAK+B,UACD,MAAA,IAAIrC,MAAM,gBAGX,OADPM,KAAK6B,aAAahD,EAAOmB,KAAK+B,aAAc/B,KAAK8B,MAC1C9B,IAAA,CAGF,KAAAc,CAAML,KAAwBqB,GAC5B,OAAA,IAAIjB,EAAWb,KAAK6B,aAAc,IAAI7B,KAAK8B,QAASA,GAAOrB,EAAI,4JClBnE,MAAMuB,EAQJ,WAAAlC,IAAemC,GALdlC,EAAAC,KAAA,aACAD,EAAAC,KAAA,iBAAiBoB,KACjBrB,EAAAC,KAAA,WACRD,EAAAC,KAAQ,SAAkC,IAgB1CD,EAAAC,KAAQ,OAAO,IAAIa,GAAW,CAACrB,EAAMsB,EAAsBoB,KA1BzC,IAACC,EAAyBC,EA2BrCpC,KAAAmC,WAAWlC,IAAIiC,GACflC,KAAAqC,OAAOH,GAAO1C,EA5BF2C,EA6BDnC,KAAKmC,WA7BqBC,EA6BTpC,KAAKoC,UA5BjCD,EAAWV,KAAO,GAAKU,EAAWV,OAASW,EAAUX,MA6BxDX,EAAM1B,IAAIkD,OAAOC,OAAOvC,KAAKqC,QAAoC,KAjBnErC,KAAKoC,UAAY,IAAIhB,IAAYkB,OAAOE,KAAKP,IAC7CjC,KAAKyC,QAAUR,CAAA,CAGV,KAAAjD,CAAMyB,GAMJ,OALA6B,OAAAI,QAAQ1C,KAAKyC,SAASpC,SAAQ,EAAE6B,EAAKlD,MAC1CW,EAAYX,EAAO,aACdgB,KAAAoC,UAAUnC,IAAIiC,GACnBlD,EAAMA,MAAMgB,KAAKS,KAAKK,MAAML,EAAMyB,GAAI,IAEjClC,IAAA,uIC9BJ,MAAM2C,EAGJ,WAAA7C,IAAemC,GAFdlC,EAAAC,KAAA,WAGNA,KAAKyC,QAAUR,CAAA,CAGV,KAAAjD,CAAMyB,GAKJ,OAJFT,KAAAyC,QAAQpC,SAASrB,IACpBW,EAAYX,EAAO,aACnBA,EAAMA,MAAMyB,EAAI,IAEXT,IAAA,uICXJ,MAAM4C,EACJ,WAAA9C,CACGc,EACAiC,GADA7C,KAAAY,MAAAA,EACAZ,KAAA6C,QAAAA,EAUV9C,EAAAC,KAAQ,OAAO,IAAIa,GAAW,CAACrB,EAAMsB,KACnCA,EAAM1B,IAAIY,KAAK6C,QAAQrD,GAAE,KATzBG,EAAYiB,EAAO,gBAAe,CAG7B,KAAA5B,CAAMyB,GAEJ,OADPT,KAAKY,MAAM5B,MAAMgB,KAAKS,KAAKK,MAAML,IAC1BT,IAAA,ECXJ,MAAM8C,EACJ,WAAAhD,CACGc,EACAmC,EACAC,GAFAhD,KAAAY,MAAAA,EACAZ,KAAA+C,aAAAA,EACA/C,KAAAgD,cAAAA,EAERrD,EAAYiB,EAAO,eACnBhB,EAAWmD,EAAc,4BACH,IAAlBC,GACFpD,EAAWoD,EAAe,uBAC5B,CAGK,KAAAhE,CAAMyB,GACP,IACGT,KAAAY,MAAM5B,MAAMyB,SACVP,GACHA,aAAaR,MACVM,KAAA+C,aAAa3D,IAAIc,EAAE+C,SAEnBjD,KAAA+C,aAAa3D,IAAIc,GAEpBF,KAAKgD,eACFhD,KAAAgD,cAAc5D,IAAIc,EACzB,CAEK,OAAAF,IAAA,4JCtBJ,MAAMkD,EAMJ,WAAApD,IAAemC,GAHdlC,EAAAC,KAAA,WACAD,EAAAC,KAAA,aAWAD,EAAAC,KAAA,eAAc,CAACmD,EAAe1C,KAC9B,MAAAzB,EAAQgB,KAAKyC,QAAQU,GACrBC,EAAQpD,KAAKyC,QAAQU,EAAQ,GACnCnE,EAAMA,MAAMgB,KAAKqD,aAAavC,MAAML,EAAM2C,EAAOD,GAAM,IAGzDpD,EAAAC,KAAQ,eAAe,IAAIa,GACzB,CACErB,EACAsB,EACAsC,EACAD,KAEKC,IACHpD,KAAKsD,UAAY9D,GAGfQ,KAAKsD,WACDxC,EAAA1B,IAAIY,KAAKsD,WAGbF,IAAUpD,KAAKsD,WACZtD,KAAAuD,YAAYJ,EAAQ,EAAGrC,EAAK,KA9BrCd,KAAKyC,QAAUR,CAAA,CAGV,KAAAjD,CAAMyB,GAEJ,OADFT,KAAAuD,YAAY,EAAG9C,GACbT,IAAA,EChBJ,MAAMwD,EACJ,WAAA1D,CACGc,EACAiC,GADA7C,KAAAY,MAAAA,EACAZ,KAAA6C,QAAAA,EAERlD,EAAYiB,EAAO,wBAAuB,CAGrC,KAAA5B,CAAMyB,GACL,MAAAgD,EAA0BzD,KAAK6C,QAAQpC,GAEtC,OADFT,KAAAY,MAAM5B,MAAMyE,GACVzD,IAAA,uICXJ,MAAM0D,EACJ,WAAA5D,CACGc,EACA+C,EACAC,GAFA5D,KAAAY,MAAAA,EACAZ,KAAA2D,UAAAA,EACA3D,KAAA4D,aAAAA,EAQV7D,EAAAC,KAAQ,SAAS,IAAIa,GAAc,CAACrB,EAAGsB,KACjCd,KAAK2D,UAAUnE,GACjBsB,EAAM1B,IAAII,QACqB,IAAtBQ,KAAK4D,cACR9C,EAAA1B,IAAIY,KAAK4D,aAAY,IAE9B,CAXM,KAAA5E,CAAMyB,GAEJ,OADPT,KAAKY,MAAM5B,MAAMgB,KAAK6D,OAAO/C,MAAML,IAC5BT,IAAA,4JCPJ,MAAM8D,EAQJ,WAAAhE,CACGiE,EACAC,EACAC,EACAC,GAHAlE,KAAA+D,SAAAA,EACA/D,KAAAgE,WAAAA,EACAhE,KAAAiE,iBAAAA,EACAjE,KAAAkE,mBAAAA,EAXVnE,EAAAC,KAAQ,WAAoC,MACpCD,EAAAC,KAAA,WAAWR,IACbQ,KAAKmE,UACFnE,KAAAmE,SAAS/E,IAAII,EAAC,IAiBvBO,EAAAC,KAAQ,SAAS,IAAIa,GACnB,EAAEuD,EAASC,EAAWC,GAAYT,KAChC7D,KAAKmE,SAAWN,EACXO,IAAUE,IAGfF,EAAQE,GAAWD,EAAWrE,KAAKuE,QAAO,IAE9C,CAdO,KAAAvF,CAAMyB,GAGJ,OAFG,IAAIuB,EAAIhC,KAAK+D,SAAU/D,KAAKgE,WAAYhE,KAAKiE,kBACrDjF,MAAMgB,KAAK6D,OAAO/C,MAAML,IACnBT,IAAA,CAaF,OAAAd,GAED,GADJc,KAAKmE,SAAW,MACXnE,KAAKkE,mBACD,OAAAlE,KAQF,OANG,IAAIgC,EAAIhC,KAAK+D,SAAU/D,KAAKgE,WAAYhE,KAAKkE,oBACrDlF,MACA,IAAIsC,GAAK,EAAE8C,EAASC,EAAWG,MAC7BJ,IAAUI,KAAeH,EAAWrE,KAAKuE,QAAO,KAG7CvE,IAAA,EC7CJ,MAAMyE,EACJ,WAAA3E,CACG4E,EACAC,GADA3E,KAAA0E,EAAAA,EACA1E,KAAA2E,WAAAA,CAAA,CAGH,KAAA3F,CAAMyB,GAQJ,OAPPT,KAAK0E,EACFE,MAAK,SAAyBpF,GAC7BiB,EAAKrB,IAAII,EAAC,IAEXqF,OAAO3E,IACDF,KAAA2E,YAAYvF,IAAIc,EAAC,IAEnBF,IAAA,4JCPJ,MAAM8E,EAQJ,WAAAhF,CAAoBN,GAAAQ,KAAAR,EAAAA,EAP3BO,EAAAC,KAAQ,WAAoC,MACpCD,EAAAC,KAAA,UAAUR,IACZZ,EAASY,IAAMQ,KAAK+E,UACjB/E,KAAA+E,SAAS3F,IAAII,EAAC,GAEvB,CAIO,KAAAR,CAAMyB,GACX,GAAIT,KAAK+E,SACP,MAAM,IAAIrF,MACR,qEAKG,OAFPM,KAAK+E,SAAWtE,EACXT,KAAAgF,OAAOhF,KAAKR,GACVQ,IAAA,CAGF,GAAAZ,CAAIP,GAEF,OADPmB,KAAKgF,OAAOnG,GACLmB,IAAA,4JCvBJ,MAAMiF,EAGJ,WAAAnF,CAAoBc,GAAAZ,KAAAY,MAAAA,EAF3Bb,EAAAC,KAAQ,YAAW,GASnBD,EAAAC,KAAQ,SAAS,IAAIa,GAAc,CAACrB,EAAGsB,KAChCd,KAAKpB,WACRoB,KAAKpB,UAAW,EAChBkC,EAAM1B,IAAII,GAAC,IAEd,CAVM,KAAAR,CAAMyB,GAEJ,OADPT,KAAKY,MAAM5B,MAAMgB,KAAK6D,OAAO/C,MAAML,IAC5BT,IAAA,4JCLJ,MAAMkF,GAUJ,WAAApF,CACGc,EACAuE,GAAY,GADZnF,KAAAY,MAAAA,EACAZ,KAAAmF,UAAAA,EAXFpF,EAAAC,KAAA,aAAa,IAAIkB,GACjBnB,EAAAC,KAAA,aACAD,EAAAC,KAAA,QAAQ,IAAI8E,GACpB/E,EAAAC,KAAQ,YAAY,IAAIiF,EAAKjF,KAAKoF,OAAOpG,MACvC,IAAIsC,GAAK,KACFtB,KAAAY,MAAM5B,MAAMgB,KAAKqF,cAAa,MA6BvCtF,EAAAC,KAAQ,gBAAgB,IAAIsB,GAAS9B,IACnCQ,KAAKsD,UAAY9D,EACjBQ,KAAKsF,WAAW9D,QAAQpC,IAAII,EAAC,IAC9B,CAvBM,KAAAR,CAAMyB,GAUJ,OATFT,KAAAoF,MAAMhG,IAAI,GAEZY,KAAKmF,YACNvG,EAASoB,KAAKsD,YACbtD,KAAKsF,WAAW5D,IAAIjB,IAEhBA,EAAArB,IAAIY,KAAKsD,WAEXtD,KAAAsF,WAAWrF,IAAIQ,GACbT,IAAA,CAGF,GAAAZ,CAAIP,GAIF,OAHFmB,KAAAoF,MAAMhG,IAAI,GACfY,KAAKsD,UAAYzE,EACjBmB,KAAKsF,WAAW9D,QAAQpC,IAAIP,GACrBmB,IAAA,CAQF,OAAAuF,GACAvF,KAAAoF,MAAMhG,IAAI,EAAC,CAGX,IAAAoG,GACL,OAAOxF,KAAKsF,UAAA,CAGP,OAAApG,GACE,OAAAc,KAAKsF,WAAWpG,SAAQ,0ICzD5B,MAAMuG,GAGJ,WAAA3F,CACGc,EACRuE,GAAY,GADJnF,KAAAY,MAAAA,EAHFb,GAAAC,KAAA,eAMNA,KAAK0F,YAAc,IAAIR,GAAOlF,KAAKY,MAAOuE,EAAS,CAG9C,KAAAnG,CAAMyB,GAEJ,OADFT,KAAA0F,YAAY1G,MAAMyB,GAChBT,IAAA,CAGF,GAAAZ,CAAIP,GAGF,OAFPmB,KAAK0F,YAAYH,UACZvF,KAAAY,MAAMxB,IAAIP,GACRmB,IAAA,0ICjBJ,MAAM2F,GAGJ,WAAA7F,CAAYjB,GAFXkB,GAAAC,KAAA,UAGNA,KAAK4F,OAAS,IAAIH,GAAa,IAAIX,EAAKjG,GAAM,CAGzC,KAAAG,CAAMyB,GAEJ,OADFT,KAAA4F,OAAO5G,MAAMyB,GACXT,IAAA,CAGF,GAAAZ,CAAIP,GAEF,OADFmB,KAAA4F,OAAOxG,IAAIP,GACTmB,IAAA,0ICRJ,MAAM6F,GACJ,WAAA/F,CACGc,EACAkF,GADA9F,KAAAY,MAAAA,EACAZ,KAAA8F,QAAAA,EAQV/F,GAAAC,KAAQ,SAAS,IAAIa,GAAgB,CAACrB,EAAGsB,KACvC,MAAMiF,EAAyB,GAC7BvG,EAAAa,SAAS2F,IACT,IAAIC,EAA4BD,EAC3BlH,EAAQmH,KACDA,EAAA,IAAIjF,EAAGiF,IAEnB,MAAMC,EAAOlG,KAAK8F,QAAQxG,GAAG2G,GAC7BF,EAAM3F,KAAK8F,EAAI,IAEJ,IAAIlE,KAAO+D,GACnB/G,MAAM8B,EAAK,IACjB,CAjBM,KAAA9B,CAAMyB,GAEJ,OADPT,KAAKY,MAAM5B,MAAMgB,KAAK6D,OAAO/C,MAAML,IAC5BT,IAAA,0ICfJ,MAAMmG,GAGJ,WAAArG,CACGc,EACAwF,EAAqB,MADrBpG,KAAAY,MAAAA,EACAZ,KAAAoG,SAAAA,EAJVrG,GAAAC,KAAQ,WAAU,EAAA,CAOV,aAAAqG,GACDrG,KAAKuF,SACRvF,KAAKY,MAAM5B,MACT,IAAIsC,GAAM9B,IACRQ,KAAKoG,SAAW5G,CAAA,KAItBQ,KAAKuF,SAAU,CAAA,CAGjB,CAAQe,OAAOC,eAEb,OADAvG,KAAKqG,gBACErG,KAAKoG,QAAA,CAGP,SAAAI,GAEL,OADAxG,KAAKqG,gBACErG,KAAKoG,QAAA,CAGP,sBAAAK,GAED,GADJzG,KAAKqG,gBACiB,OAAlBrG,KAAKoG,SACD,MAAA,IAAI1G,MAAM,2BAElB,OAAOM,KAAKoG,QAAA,+JC7BT,MAAMM,GAGJ,WAAA5G,CAAoBc,GAAAZ,KAAAY,MAAAA,EAF3Bb,GAAAC,KAAQ,SAAc,IAStBD,GAAAC,KAAQ,SAAS,IAAIa,GAAc,CAACrB,EAAGsB,KAChCd,KAAAqC,OAAOjC,KAAKZ,GACXsB,EAAA1B,IAAIY,KAAKqC,OAAM,IACtB,CARM,KAAArD,CAAMyB,GAEJ,OADPT,KAAKY,MAAM5B,MAAMgB,KAAK6D,OAAO/C,MAAML,IAC5BT,IAAA,0ICRJ,MAAM2G,GACJ,WAAA7G,CAAoBc,GAAAZ,KAAAY,MAAAA,EAO3Bb,GAAAC,KAAQ,SAAS,IAAIa,GAAgB,CAACrB,EAAGsB,KACrCtB,EAAAa,SAASuG,IACT9F,EAAM1B,IAAIwH,EAAE,GACb,IACF,CATM,KAAA5H,CAAMyB,GAEJ,OADPT,KAAKY,MAAM5B,MAAMgB,KAAK6D,OAAO/C,MAAML,IAC5BT,IAAA,ECVJ,MAAM6G,GACJ,WAAA/G,CAAoBgH,GAAA9G,KAAA8G,SAAAA,CAAA,CAEpB,EAAAxH,IAAMwC,GACJ,OAAA9B,KAAK8G,YAAYhF,EAAI,ECJzB,MAAMiF,GACJ,WAAAjH,CACGkH,EACAnE,GADA7C,KAAAgH,cAAAA,EACAhH,KAAA6C,QAAAA,CAAA,CAGH,EAAAvD,IAAMwC,GACX,OAAO9B,KAAK6C,QAAQ7C,KAAKgH,cAAc1H,MAAMwC,GAAK,ECP/C,MAAMmF,GACJ,WAAAnH,CACGkH,EACAlF,EACAoF,EAA4B,GAF5BlH,KAAAgH,cAAAA,EACAhH,KAAA8B,KAAAA,EACA9B,KAAAkH,kBAAAA,CAAA,CAGH,EAAA5H,IAAM6H,GACX,OAAOnH,KAAKgH,cAAc1H,MAM9B,SAAsB8H,EAAiBC,EAAiBlE,GACtD,MAAMd,EAAS+E,EAAKE,MAAM,EAAGnE,GAC7B,KAAOd,EAAOkF,OAASpE,GAAOd,EAAOjC,UAAK,GACnC,OAAAiC,EAAOmF,OAAOH,EACvB,CATSI,CAAaN,EAASnH,KAAK8B,KAAM9B,KAAKkH,mBAC3C,0ICNG,MAAMQ,GAGJ,WAAA5H,CAAoBkH,GAAAhH,KAAAgH,cAAAA,EAF3BjH,GAAAC,KAAQ,cAAiC,GAAC,CAInC,EAAAV,IAAMwC,GACX,MAAM6F,EAAO3H,KAAKgH,cAAc1H,MAAMwC,GAI/B,OAHH7C,EAAc0I,IACX3H,KAAAG,YAAYC,KAAKuH,GAEjBA,CAAA,CAGF,OAAAzI,GAEE,OADPc,KAAKG,YAAYE,SAASuH,GAAMA,EAAE1I,YAC3Bc,IAAA"}