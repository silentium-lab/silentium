{"version":3,"file":"silentium.min.mjs","sources":["../src/base/Destroyable.ts","../src/base/DestroyFunc.ts","../src/base/TheOwner.ts","../src/base/From.ts","../src/base/TheInformation.ts","../src/helpers/isFilled.ts","../src/helpers/OwnerPool.ts","../src/base/Of.ts","../src/base/Lazy.ts","../src/base/OfFunc.ts","../src/base/Void.ts","../src/components/All.ts","../src/components/Any.ts","../src/components/Applied.ts","../src/components/Chain.ts","../src/components/ExecutorApplied.ts","../src/components/Filtered.ts","../src/components/FromCallback.ts","../src/components/FromEvent.ts","../src/components/FromPromise.ts","../src/components/Late.ts","../src/components/LazyApplied.ts","../src/components/LazyClass.ts","../src/components/Map.ts","../src/components/Once.ts","../src/components/Sequence.ts","../src/components/Shared.ts","../src/components/Stream.ts"],"sourcesContent":["const isDestroyable = (dep: unknown): dep is Destroyable => {\n  return typeof dep === \"object\" && dep !== null && \"destroy\" in dep;\n};\n\n/**\n * Representation of Destroyable object\n */\nexport class Destroyable {\n  private theDeps: unknown[];\n  public constructor(...deps: unknown[]) {\n    this.theDeps = deps ?? [];\n  }\n\n  public destroy() {\n    this.theDeps?.forEach((dep) => {\n      if (isDestroyable(dep)) {\n        dep.destroy();\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Add dependency what can be destroyed\n   */\n  public addDep(dep: unknown) {\n    this.theDeps?.push(dep);\n    return this;\n  }\n}\n","import { Destroyable } from \"./Destroyable\";\n\n/**\n * Representation of destructor function as object\n */\nexport class DestroyFunc extends Destroyable {\n  public constructor(private destructor: () => void) {\n    super();\n  }\n\n  public destroy(): this {\n    this.destructor();\n    return this;\n  }\n}\n","/**\n * Representation of Information Owner\n */\nexport abstract class TheOwner<T = unknown> {\n  public abstract give(value: T): this;\n}\n","import { TheOwner } from \"./TheOwner\";\n\n/**\n * Owner from function\n */\nexport class From<T = unknown> extends TheOwner<T> {\n  public constructor(private fn: (value: T) => void) {\n    super();\n  }\n\n  public give(value: T): this {\n    this.fn(value);\n    return this;\n  }\n}\n","import { Destroyable } from \"./Destroyable\";\nimport { TheOwner } from \"./TheOwner\";\n\n/**\n * Representation of Information\n */\nexport abstract class TheInformation<T = unknown> extends Destroyable {\n  public abstract value(o: TheOwner<T>): this;\n}\n","export const isFilled = <T>(value?: T): value is T => {\n  return value !== undefined && value !== null;\n};\n","import { From, TheOwner } from \"../base\";\n\n/**\n * Helps maintain an owner list allowing different\n * owners to get information from a common source\n * https://silentium-lab.github.io/silentium/#/en/utils/owner-pool\n */\nexport class OwnerPool<T> {\n  private owners: Set<TheOwner<T>>;\n  private innerOwner: TheOwner<T>;\n\n  public constructor() {\n    this.owners = new Set<TheOwner<T>>();\n    this.innerOwner = new From((v) => {\n      this.owners.forEach((g) => {\n        g.give(v);\n      });\n    });\n  }\n\n  public owner() {\n    return this.innerOwner;\n  }\n\n  public size(): number {\n    return this.owners.size;\n  }\n\n  public has(owner: TheOwner<T>): boolean {\n    return this.owners.has(owner);\n  }\n\n  public add(owner: TheOwner<T>) {\n    this.owners.add(owner);\n    return this;\n  }\n\n  public remove(g: TheOwner<T>) {\n    this.owners.delete(g);\n    return this;\n  }\n\n  public destroy() {\n    this.owners.forEach((g) => {\n      this.remove(g);\n    });\n    return this;\n  }\n}\n","import { TheOwner } from \"./TheOwner\";\nimport { TheInformation } from \"./TheInformation\";\nimport { isFilled } from \"../helpers\";\n\n/**\n * Information from primitive value\n */\nexport class Of<T> extends TheInformation<T> {\n  public constructor(private theValue: T) {\n    super(theValue);\n  }\n\n  public value(o: TheOwner<T>): this {\n    if (isFilled(this.theValue)) {\n      o.give(this.theValue);\n    }\n    return this;\n  }\n}\n","import { Destroyable } from \"./Destroyable\";\nimport { Of } from \"./Of\";\nimport { TheInformation } from \"./TheInformation\";\n\n/**\n * Ability to create information after some event\n */\nexport class Lazy<T = unknown> extends Destroyable {\n  public constructor(\n    protected buildFn?: (...args: TheInformation[]) => TheInformation<T>,\n  ) {\n    super();\n  }\n\n  public get(...args: TheInformation[]) {\n    args.forEach((dep) => {\n      this.addDep(dep);\n    });\n    return this.buildFn?.(...args) ?? (new Of(null) as TheInformation<T>);\n  }\n}\n","import { TheOwner } from \"./TheOwner\";\nimport { TheInformation } from \"./TheInformation\";\n\ntype DestructorFnType = () => void;\n\n/**\n * Information of function\n */\nexport class OfFunc<T> extends TheInformation<T> {\n  private mbDestructor?: DestructorFnType | void;\n\n  public constructor(\n    private valueFn: (o: TheOwner<T>) => DestructorFnType | undefined | void,\n  ) {\n    super(valueFn);\n  }\n\n  public value(o: TheOwner<T>): this {\n    this.mbDestructor = this.valueFn(o);\n    return this;\n  }\n\n  public destroy(): this {\n    super.destroy();\n    this.mbDestructor?.();\n    return this;\n  }\n}\n","import { TheOwner } from \"./TheOwner\";\n\n/**\n * Silent owner\n */\nexport class Void extends TheOwner {\n  public give(): this {\n    return this;\n  }\n}\n","import { From, TheInformation, TheOwner } from \"../base\";\n\ntype ExtractTypeS<T> = T extends TheInformation<infer U> ? U : never;\n\nexport type ExtractTypesFromArrayS<T extends TheInformation<any>[]> = {\n  [K in keyof T]: ExtractTypeS<T[K]>;\n};\n\n/**\n * Combines multiple information sources into a single unified source\n * represented as an array containing values from all sources\n * https://silentium-lab.github.io/silentium/#/en/information/all\n */\nexport class All<const T extends TheInformation[]> extends TheInformation<\n  ExtractTypesFromArrayS<T>\n> {\n  private keysKnown: Set<string>;\n  private keysFilled = new Set();\n  private infos: T;\n\n  public constructor(...theInfos: T) {\n    super(theInfos);\n    this.infos = theInfos;\n    this.keysKnown = new Set<string>(Object.keys(theInfos));\n  }\n\n  public value(o: TheOwner<ExtractTypesFromArrayS<T>>): this {\n    const result: Record<string, unknown> = {};\n\n    Object.entries(this.infos).forEach(([key, info]) => {\n      this.keysKnown.add(key);\n      info.value(\n        new From((v) => {\n          this.keysFilled.add(key);\n          result[key] = v;\n          if (this.isAllFilled()) {\n            o.give(Object.values(result) as ExtractTypesFromArrayS<T>);\n          }\n        }),\n      );\n    });\n    return this;\n  }\n\n  private isAllFilled() {\n    return (\n      this.keysFilled.size > 0 && this.keysFilled.size === this.keysKnown.size\n    );\n  }\n}\n","import { TheInformation, TheOwner } from \"../base\";\n\n/**\n * From a set of information sources we get\n * a common response from any source for a single owner\n * https://silentium-lab.github.io/silentium/#/en/information/any\n */\nexport class Any<T> extends TheInformation<T> {\n  private infos: TheInformation<T>[];\n\n  public constructor(...theInfos: TheInformation<T>[]) {\n    super(theInfos);\n    this.infos = theInfos;\n  }\n\n  public value(o: TheOwner<T>): this {\n    this.infos.forEach((info) => {\n      info.value(o);\n    });\n    return this;\n  }\n}\n","import { From, TheInformation, TheOwner } from \"../base\";\n\n/**\n * Information to which the function was applied to change the value\n * https://silentium-lab.github.io/silentium/#/en/information/applied\n */\nexport class Applied<T, R> extends TheInformation<R> {\n  public constructor(\n    private baseSrc: TheInformation<T>,\n    private applier: (v: T) => R,\n  ) {\n    super(baseSrc);\n  }\n\n  public value(o: TheOwner<R>): this {\n    this.baseSrc.value(\n      new From((v) => {\n        o.give(this.applier(v));\n      }),\n    );\n    return this;\n  }\n}\n","import { From, TheInformation, TheOwner } from \"../base\";\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ntype Last<T extends any[]> = T extends [...infer U, infer L] ? L : never;\n\n/**\n * The set of information sources forms a sequential chain where each source provides\n * an answer. The final answer will be the output result. If any source in the chain\n * provides a new answer, the component's overall response will be repeated.\n * https://silentium-lab.github.io/silentium/#/en/information/applied\n */\nexport class Chain<T extends TheInformation[]> extends TheInformation<Last<T>> {\n  private theInfos: T;\n\n  public constructor(...infos: T) {\n    super(infos);\n    this.theInfos = infos;\n  }\n\n  public value(o: TheOwner<Last<T>>) {\n    let lastValue: Last<T> | undefined;\n\n    const handleI = (index: number) => {\n      const info = this.theInfos[index] as TheInformation<Last<T>>;\n      const nextI = this.theInfos[index + 1] as\n        | TheInformation<Last<T>>\n        | undefined;\n\n      info.value(\n        new From((v) => {\n          if (!nextI) {\n            lastValue = v;\n          }\n\n          if (lastValue) {\n            o.give(lastValue);\n          }\n\n          if (nextI && !lastValue) {\n            handleI(index + 1);\n          }\n        }),\n      );\n    };\n\n    handleI(0);\n\n    return this;\n  }\n}\n","import { From, TheInformation, TheOwner } from \"../base\";\n\n/**\n * Information to which a function is applied in order\n * to control the value passing process\n * https://silentium-lab.github.io/silentium/#/en/information/applied\n */\nexport class ExecutorApplied<T> extends TheInformation<T> {\n  public constructor(\n    private baseSrc: TheInformation<T>,\n    private applier: (executor: (v: T) => void) => (v: T) => void,\n  ) {\n    super(baseSrc);\n  }\n\n  public value(o: TheOwner<T>): this {\n    this.baseSrc.value(\n      new From(\n        this.applier((v) => {\n          o.give(v);\n        }),\n      ),\n    );\n    return this;\n  }\n}\n","import { From, TheInformation, TheOwner } from \"../base\";\n\n/**\n * Information whose value is being validated\n * via a predicate; if the predicate returns true, the value\n * can be passed to the output\n * https://silentium-lab.github.io/silentium/#/en/information/filtered\n */\nexport class Filtered<T> extends TheInformation<T> {\n  public constructor(\n    private baseSrc: TheInformation<T>,\n    private predicate: (v: T) => boolean,\n    private defaultValue?: T,\n  ) {\n    super(baseSrc);\n  }\n\n  public value(o: TheOwner<T>): this {\n    this.baseSrc.value(\n      new From((v) => {\n        if (this.predicate(v)) {\n          o.give(v);\n        } else if (this.defaultValue !== undefined) {\n          o.give(this.defaultValue);\n        }\n      }),\n    );\n    return this;\n  }\n}\n","import { TheInformation, TheOwner } from \"../base\";\n\n/**\n * When receiving a reference to a function expecting a callback, the component\n * creates its own callback, and the data received in this callback\n * will become the value of the information object\n * https://silentium-lab.github.io/silentium/#/en/information/from-callback\n */\nexport class FromCallback<T> extends TheInformation<T> {\n  private theArgs: unknown[];\n\n  public constructor(\n    private waitForCb: (cb: (v: T) => any, ...args: unknown[]) => unknown,\n    ...args: unknown[]\n  ) {\n    super(waitForCb);\n    this.theArgs = args;\n  }\n\n  public value(o: TheOwner<T>): this {\n    this.waitForCb(\n      (v) => {\n        o.give(v);\n      },\n      ...this.theArgs,\n    );\n    return this;\n  }\n}\n","import { DestroyFunc } from \"../base/DestroyFunc\";\nimport { From, Of, TheInformation, TheOwner } from \"../base\";\nimport { All } from \"./All\";\n\n/**\n * A component that receives data from an event and\n * presents it as an information object\n * https://silentium-lab.github.io/silentium/#/en/information/from-event\n */\nexport class FromEvent<T = unknown> extends TheInformation<T> {\n  public constructor(\n    private emitterSrc: TheInformation<any>,\n    private eventNameSrc: TheInformation<string>,\n    private subscribeMethodSrc: TheInformation<string>,\n    private unsubscribeMethodSrc: TheInformation<string> = new Of(\"\"),\n  ) {\n    super(emitterSrc, eventNameSrc, subscribeMethodSrc, unsubscribeMethodSrc);\n  }\n\n  public value(o: TheOwner<T>): this {\n    const a = new All(\n      this.emitterSrc,\n      this.eventNameSrc,\n      this.subscribeMethodSrc,\n      this.unsubscribeMethodSrc,\n    );\n    const handler = (v: T) => {\n      o.give(v);\n    };\n    a.value(\n      new From(([emitter, eventName, subscribe, unsubscribe]) => {\n        emitter[subscribe](eventName, handler);\n        this.addDep(\n          new DestroyFunc(() => {\n            emitter[unsubscribe](eventName, handler);\n          }),\n        );\n      }),\n    );\n    return this;\n  }\n}\n","import { TheInformation, TheOwner } from \"../base\";\n\n/**\n * Component that gets a value from a promise and\n * presents it as information\n * https://silentium-lab.github.io/silentium/#/en/information/from-promise\n */\nexport class FromPromise<T> extends TheInformation<T> {\n  public constructor(\n    private p: Promise<T>,\n    private errorOwner?: TheOwner,\n  ) {\n    super(p);\n  }\n\n  public value(o: TheOwner<T>): this {\n    this.p\n      .then((v) => {\n        o.give(v);\n      })\n      .catch((e) => {\n        this.errorOwner?.give(e);\n      });\n    return this;\n  }\n}\n","import { From, TheInformation, TheOwner } from \"../base\";\nimport { isFilled } from \"../helpers\";\n\n/**\n * A component that allows creating linked objects of information and its owner\n * in such a way that if a new value is assigned to the owner, this value\n * will become the value of the linked information source\n * https://silentium-lab.github.io/silentium/#/en/information/of\n */\nexport class Late<T> extends TheInformation<T> {\n  private theOwner?: TheOwner<T>;\n  private lateOwner = new From((v: T) => {\n    this.theValue = v;\n    this.notify();\n  });\n\n  public constructor(private theValue?: T) {\n    super(theValue);\n  }\n\n  public value(o: TheOwner<T>): this {\n    if (this.theOwner) {\n      throw new Error(\n        \"Late component gets new owner, when another was already connected!\",\n      );\n    }\n    this.theOwner = o;\n    this.notify();\n    return this;\n  }\n\n  public owner() {\n    return this.lateOwner;\n  }\n\n  private notify() {\n    if (isFilled(this.theValue) && this.theOwner) {\n      this.theOwner.give(this.theValue);\n    }\n    return this;\n  }\n}\n","import { Lazy, TheInformation } from \"../base\";\n\n/**\n * Lazy with applied function to its results\n */\nexport class LazyApplied<T> extends Lazy<T> {\n  public constructor(\n    private baseLazy: Lazy,\n    private applier: (i: TheInformation) => TheInformation<T>,\n  ) {\n    super();\n  }\n\n  public get(...args: TheInformation[]): TheInformation<T> {\n    return this.applier(this.baseLazy.get(...args));\n  }\n}\n","import { Lazy } from \"../base\";\n\n/**\n * Lazy instance from class constructor\n */\nexport class LazyClass<T> extends Lazy<T> {\n  public constructor(constrFn: any) {\n    const buildFn = (...args: unknown[]) => new constrFn(...args);\n    super(buildFn);\n  }\n}\n","import { From, Lazy, Of, TheInformation, TheOwner } from \"../base\";\nimport { All } from \"./All\";\n\n/**\n * Component that applies an info object constructor to each data item,\n * producing an information source with new values\n * https://silentium-lab.github.io/silentium/#/en/information/map\n */\nexport class Map<T, TG> extends TheInformation<TG[]> {\n  public constructor(\n    private baseSrc: TheInformation<T[]>,\n    private targetSrc: Lazy<TG>,\n  ) {\n    super(baseSrc, targetSrc);\n  }\n\n  public value(o: TheOwner<TG[]>) {\n    this.baseSrc.value(\n      new From((v) => {\n        const infos: TheInformation<TG>[] = [];\n        v.forEach((val) => {\n          let valInfo: TheInformation<T> | T = val;\n          if (!(valInfo instanceof TheInformation)) {\n            valInfo = new Of(valInfo);\n          }\n          const info = this.targetSrc.get(valInfo);\n          infos.push(info);\n        });\n        const allI = new All(...infos);\n        allI.value(o);\n      }),\n    );\n    return this;\n  }\n}\n","import { From, TheInformation, TheOwner } from \"../base\";\n\n/**\n * Limits the number of values from the information source\n * to a single value - once the first value is emitted, no more\n * values are delivered from the source\n * https://silentium-lab.github.io/silentium/#/en/information/once\n */\nexport class Once<T> extends TheInformation<T> {\n  public constructor(private baseSrc: TheInformation<T>) {\n    super();\n  }\n\n  public value(o: TheOwner<T>): this {\n    let isFilled = false;\n    this.baseSrc.value(\n      new From((v) => {\n        if (!isFilled) {\n          isFilled = true;\n          o.give(v);\n        }\n      }),\n    );\n    return this;\n  }\n}\n","import { From, TheInformation, TheOwner } from \"../base\";\n\n/**\n * A component that takes one value at a time and returns\n * an array of all previous values\n * https://silentium-lab.github.io/silentium/#/en/information/sequence\n */\nexport class Sequence<T> extends TheInformation<T[]> {\n  public constructor(private baseSrc: TheInformation<T>) {\n    super(baseSrc);\n  }\n\n  public value(o: TheOwner<T[]>): this {\n    const result: T[] = [];\n    this.baseSrc.value(\n      new From((v) => {\n        result.push(v);\n        o.give(result);\n      }),\n    );\n    return this;\n  }\n}\n","import { isFilled, OwnerPool } from \"../helpers\";\nimport { From, OfFunc, TheInformation, TheOwner } from \"../base\";\n\n/**\n * An information object that helps multiple owners access\n * a single another information object\n * https://silentium-lab.github.io/silentium/#/en/information/pool\n */\nexport class Shared<T> extends TheInformation<T> {\n  private lastValue: T | undefined;\n  private ownersPool = new OwnerPool<T>();\n\n  public constructor(\n    private baseSrc: TheInformation<T>,\n    private stateless = false,\n  ) {\n    super(baseSrc);\n    this.addDep(this.ownersPool);\n    this.baseSrc.value(\n      new From((v) => {\n        this.ownersPool.owner().give(v);\n        this.lastValue = v;\n      }),\n    );\n  }\n\n  public value(o: TheOwner<T>): this {\n    const i = new OfFunc((g: TheOwner<T>) => {\n      if (\n        !this.stateless &&\n        isFilled(this.lastValue) &&\n        !this.ownersPool.has(g)\n      ) {\n        g.give(this.lastValue);\n      }\n      this.ownersPool.add(g);\n      return () => {\n        this.ownersPool.remove(g);\n      };\n    });\n    i.value(o);\n    this.addDep(i);\n\n    return this;\n  }\n\n  public pool() {\n    return this.ownersPool;\n  }\n}\n","import { From, TheInformation, TheOwner } from \"../base\";\n\n/**\n * Component that receives a data array and yields values one by one\n * https://silentium-lab.github.io/silentium/#/en/information/stream\n */\nexport class Stream<T> extends TheInformation<T> {\n  public constructor(private baseSrc: TheInformation<T[]>) {\n    super(baseSrc);\n  }\n\n  public value(o: TheOwner<T>): this {\n    this.baseSrc.value(\n      new From((v) => {\n        v.forEach((cv) => {\n          o.give(cv);\n        });\n      }),\n    );\n    return this;\n  }\n}\n"],"names":["Destroyable","constructor","deps","__publicField","this","theDeps","destroy","forEach","dep","isDestroyable","addDep","push","DestroyFunc","destructor","super","TheOwner","From","fn","give","value","TheInformation","isFilled","OwnerPool","owners","Set","innerOwner","v","g","owner","size","has","add","remove","delete","Of","theValue","o","Lazy","buildFn","get","args","OfFunc","valueFn","mbDestructor","Void","All","theInfos","infos","keysKnown","Object","keys","result","entries","key","info","keysFilled","isAllFilled","values","Any","Applied","baseSrc","applier","Chain","lastValue","handleI","index","nextI","ExecutorApplied","Filtered","predicate","defaultValue","FromCallback","waitForCb","theArgs","FromEvent","emitterSrc","eventNameSrc","subscribeMethodSrc","unsubscribeMethodSrc","a","handler","emitter","eventName","subscribe","unsubscribe","FromPromise","p","errorOwner","then","catch","e","Late","notify","theOwner","Error","lateOwner","LazyApplied","baseLazy","LazyClass","constrFn","Map","targetSrc","val","valInfo","Once","Sequence","Shared","stateless","ownersPool","i","pool","Stream","cv"],"mappings":"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"}