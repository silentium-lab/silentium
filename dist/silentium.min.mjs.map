{"version":3,"file":"silentium.min.mjs","sources":["../src/components/All.ts","../src/components/Any.ts","../src/components/Applied.ts","../src/components/Chain.ts","../src/components/ExecutorApplied.ts","../src/components/Filtered.ts","../src/components/FromEvent.ts","../src/components/FromPromise.ts","../src/helpers/isFilled.ts","../src/helpers/OwnerPool.ts","../src/components/Late.ts","../src/components/Once.ts","../src/components/Shared.ts","../src/components/SharedSource.ts","../src/components/LateShared.ts","../src/components/ConstructorApplied.ts","../src/components/ConstructorArgs.ts","../src/components/ConstructorDestroyable.ts","../src/base/Destructor.ts","../src/base/Local.ts","../src/base/Of.ts","../src/base/On.ts","../src/base/Void.ts","../src/components/Map.ts","../src/components/PrimitiveSource.ts","../src/components/Sequence.ts","../src/components/Stream.ts"],"sourcesContent":["import { EventType } from \"../types\";\n\ntype ExtractTypeS<T> = T extends EventType<infer U> ? U : never;\n\nexport type ExtractTypesFromArrayS<T extends EventType<any>[]> = {\n  [K in keyof T]: ExtractTypeS<T[K]>;\n};\n\nconst isAllFilled = (keysFilled: Set<string>, keysKnown: Set<string>) => {\n  return keysFilled.size > 0 && keysFilled.size === keysKnown.size;\n};\n\n/**\n * Combines multiple information sources into a single unified source\n * represented as an array containing values from all sources\n * https://silentium-lab.github.io/silentium/#/en/information/all\n */\nexport const all = <const T extends EventType[]>(\n  ...theInfos: T\n): EventType<ExtractTypesFromArrayS<T>> => {\n  const keysKnown = new Set<string>(Object.keys(theInfos));\n  const keysFilled = new Set<string>();\n\n  return function AllEvent(u) {\n    const result: Record<string, unknown> = {};\n\n    Object.entries(theInfos).forEach(([key, info]) => {\n      keysKnown.add(key);\n      info(function AllItemUser(v) {\n        keysFilled.add(key);\n        result[key] = v;\n        if (isAllFilled(keysFilled, keysKnown)) {\n          u(Object.values(result) as ExtractTypesFromArrayS<T>);\n        }\n      });\n    });\n  };\n};\n","import { EventType } from \"../types\";\n\n/**\n * From a set of information sources we get\n * a common response from any source for a single owner\n * https://silentium-lab.github.io/silentium/#/en/information/any\n */\nexport const any = <T>(...infos: EventType<T>[]): EventType<T> => {\n  return function AnyEvent(u) {\n    infos.forEach((info) => {\n      info(u);\n    });\n  };\n};\n","import { EventType, ConstructorType } from \"../types\";\n\n/**\n * Information to which the function was applied to change the value\n * https://silentium-lab.github.io/silentium/#/en/information/applied\n */\nexport const applied = <T, R>(\n  baseEv: EventType<T>,\n  applier: ConstructorType<[T], R>,\n): EventType<R> => {\n  return function AppliedEvent(u) {\n    baseEv(function AppliedBaseUser(v) {\n      u(applier(v));\n    });\n  };\n};\n","import { EventTypeValue } from \"../types/EventType\";\nimport { EventType } from \"../types\";\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ntype Last<T extends any[]> = T extends [...infer _, infer L] ? L : never;\n\n/**\n * The set of information sources forms a sequential chain where each source provides\n * an answer. The final answer will be the output result. If any source in the chain\n * provides a new answer, the component's overall response will be repeated.\n * https://silentium-lab.github.io/silentium/#/en/information/applied\n */\nexport const chain = <T extends EventType[]>(...infos: T): Last<T> => {\n  return <Last<T>>function ChainEvent(u) {\n    let lastValue: EventTypeValue<Last<T>> | undefined;\n\n    const handleI = (index: number) => {\n      const info = infos[index] as Last<T>;\n      const nextI = infos[index + 1] as Last<T> | undefined;\n\n      info(function ChainItemUser(v) {\n        if (!nextI) {\n          lastValue = v as EventTypeValue<Last<T>>;\n        }\n\n        if (lastValue) {\n          u(lastValue);\n        }\n\n        if (nextI && !lastValue) {\n          handleI(index + 1);\n        }\n      });\n    };\n\n    handleI(0);\n  };\n};\n","import { EventType, EventUserType } from \"../types\";\n\n/**\n * Information to which a function is applied in order\n * to control the value passing process\n * https://silentium-lab.github.io/silentium/#/en/information/applied\n */\nexport const executorApplied = <T>(\n  baseEv: EventType<T>,\n  applier: (executor: EventUserType<T>) => EventUserType<T>,\n): EventType<T> => {\n  return function ExecutorAppliedEvent(u) {\n    const ExecutorAppliedBaseUser = applier(u);\n    baseEv(ExecutorAppliedBaseUser);\n  };\n};\n","import { EventType, ConstructorType } from \"../types\";\n\n/**\n * Information whose value is being validated\n * via a predicate; if the predicate returns true, the value\n * can be passed to the output\n * https://silentium-lab.github.io/silentium/#/en/information/filtered\n */\nexport const filtered = <T>(\n  baseEv: EventType<T>,\n  predicate: ConstructorType<[T], boolean>,\n  defaultValue?: T,\n): EventType<T> => {\n  return function FilteredEvent(u) {\n    baseEv(function FilteredBaseUser(v) {\n      if (predicate(v)) {\n        u(v);\n      } else if (defaultValue !== undefined) {\n        u(defaultValue);\n      }\n    });\n  };\n};\n","import { EventTypeDestroyable } from \"../types/EventType\";\nimport { EventType, EventUserType } from \"../types\";\nimport { all } from \"./All\";\n\n/**\n * A component that receives data from an event and\n * presents it as an information object\n * https://silentium-lab.github.io/silentium/#/en/information/from-event\n */\nexport const fromEvent = <T>(\n  emitterEv: EventType<any>,\n  eventNameEv: EventType<string>,\n  subscribeMethodEv: EventType<string>,\n  unsubscribeMethodEv?: EventType<string>,\n): EventTypeDestroyable<T> => {\n  let lastU: EventUserType<T> | null = null;\n  const handler = function FromEventHandler(v: T) {\n    if (lastU) {\n      lastU(v);\n    }\n  };\n  return function FromEventEvent(u) {\n    lastU = u;\n    const a = all(emitterEv, eventNameEv, subscribeMethodEv);\n    a(function FromEventAllUser([emitter, eventName, subscribe]) {\n      if (!emitter?.[subscribe]) {\n        return;\n      }\n      emitter[subscribe](eventName, handler);\n    });\n\n    return function FromEventDestructor() {\n      lastU = null;\n      if (!unsubscribeMethodEv) {\n        return;\n      }\n      const a = all(emitterEv, eventNameEv, unsubscribeMethodEv);\n      a(([emitter, eventName, unsubscribe]) => {\n        emitter?.[unsubscribe]?.(eventName, handler);\n      });\n    };\n  };\n};\n","import { EventType, EventUserType } from \"../types\";\n\n/**\n * Component that gets a value from a promise and\n * presents it as information\n * https://silentium-lab.github.io/silentium/#/en/information/from-promise\n */\nexport const fromPromise = <T>(\n  p: Promise<T>,\n  errorOwner?: EventUserType,\n): EventType<T> => {\n  return function FromPromiseEvent(u) {\n    p.then(function FromPromiseThen(v) {\n      u(v);\n    }).catch(function FromPromiseCatch(e) {\n      errorOwner?.(e);\n    });\n  };\n};\n","export const isFilled = <T>(\n  value?: T,\n): value is Exclude<T, null | undefined> => {\n  return value !== undefined && value !== null;\n};\n","import { EventUserType } from \"../types\";\n\n/**\n * Helps maintain an owner list allowing different\n * owners to get information from a common source\n * https://silentium-lab.github.io/silentium/#/en/utils/owner-pool\n */\nexport class OwnerPool<T> {\n  private owners: Set<EventUserType<T>>;\n  private innerOwner: EventUserType<T>;\n\n  public constructor() {\n    this.owners = new Set<EventUserType<T>>();\n    this.innerOwner = (v) => {\n      this.owners.forEach((g) => {\n        g(v);\n      });\n    };\n  }\n\n  public owner() {\n    return this.innerOwner;\n  }\n\n  public size(): number {\n    return this.owners.size;\n  }\n\n  public has(owner: EventUserType<T>): boolean {\n    return this.owners.has(owner);\n  }\n\n  public add(owner: EventUserType<T>) {\n    this.owners.add(owner);\n    return this;\n  }\n\n  public remove(g: EventUserType<T>) {\n    this.owners.delete(g);\n    return this;\n  }\n\n  public destroy() {\n    this.owners.forEach((g) => {\n      this.remove(g);\n    });\n    return this;\n  }\n}\n","import { EventUserType, SourceType } from \"../types\";\nimport { isFilled } from \"../helpers\";\n\n/**\n * A component that allows creating linked objects of information and its owner\n * in such a way that if a new value is assigned to the owner, this value\n * will become the value of the linked information source\n * https://silentium-lab.github.io/silentium/#/en/information/of\n */\nexport const late = <T>(v?: T): SourceType<T> => {\n  let lateUser: EventUserType<T> | null = null;\n  const notify = (v?: T) => {\n    if (isFilled(v) && lateUser) {\n      lateUser(v);\n    }\n  };\n\n  return {\n    event: function LateEvent(u) {\n      if (lateUser) {\n        throw new Error(\n          \"Late component gets new user, when another was already connected!\",\n        );\n      }\n\n      lateUser = u;\n      notify(v);\n    },\n    use: function LateUser(v) {\n      notify(v);\n    },\n  };\n};\n","import { EventType } from \"../types\";\n\n/**\n * Limits the number of values from the information source\n * to a single value - once the first value is emitted, no more\n * values are delivered from the source\n * https://silentium-lab.github.io/silentium/#/en/information/once\n */\nexport const once = <T>(baseEv: EventType<T>): EventType<T> => {\n  return function OnceEvent(u) {\n    let isFilled = false;\n    baseEv(function OnceBaseUser(v) {\n      if (!isFilled) {\n        isFilled = true;\n        u(v);\n      }\n    });\n  };\n};\n","import { EventType, DestroyableType, SourceType } from \"../types\";\nimport { isFilled, OwnerPool } from \"../helpers\";\nimport { late } from \"../components/Late\";\nimport { once } from \"../components/Once\";\n\n/**\n * An information object that helps multiple owners access\n * a single another information object\n * https://silentium-lab.github.io/silentium/#/en/information/pool\n */\nexport const shared = <T>(\n  baseEv: EventType<T>,\n  stateless = false,\n): SourceType<T> & {\n  pool: () => OwnerPool<T>;\n  touched: () => void;\n} & DestroyableType => {\n  const ownersPool = new OwnerPool<T>();\n  let lastValue: T | undefined;\n\n  const calls = late();\n  once(calls.event)(function SharedCallsUser() {\n    baseEv(function SharedBaseUser(v) {\n      lastValue = v;\n      ownersPool.owner()(v);\n    });\n  });\n\n  return {\n    event: function SharedEvent(u) {\n      calls.use(1);\n      if (!stateless && isFilled(lastValue) && !ownersPool.has(u)) {\n        u(lastValue);\n      }\n      ownersPool.add(u);\n      return () => {\n        ownersPool.remove(u);\n      };\n    },\n    use: function SharedUser(value: T) {\n      calls.use(1);\n      lastValue = value;\n      ownersPool.owner()(value);\n    },\n    touched() {\n      calls.use(1);\n    },\n    pool() {\n      return ownersPool;\n    },\n    destroy() {\n      ownersPool.destroy();\n    },\n  };\n};\n","import { SourceType } from \"../types\";\nimport { shared } from \"../components/Shared\";\n\nexport const sharedSource = <T>(\n  baseEv: SourceType<T>,\n  stateless = false,\n): SourceType<T> => {\n  const sharedEv = shared(baseEv.event, stateless);\n\n  return {\n    event: function SharedSourceEvent(u) {\n      sharedEv.event(u);\n    },\n    use: function SharedSourceUser(v) {\n      sharedEv.touched();\n      baseEv.use(v);\n    },\n  };\n};\n","import { late } from \"../components/Late\";\nimport { sharedSource } from \"../components/SharedSource\";\nimport { SourceType } from \"../types\";\n\nexport const lateShared = <T>(value?: T): SourceType<T> => {\n  return sharedSource(late(value));\n};\n","import { EventType, ConstructorType } from \"../types\";\n\n/**\n * Constructor with applied function to its results\n */\nexport const constructorApplied = <T>(\n  baseConstructor: ConstructorType<any[], EventType>,\n  applier: (i: EventType) => EventType<T>,\n): ConstructorType<EventType[], EventType<T>> => {\n  return function LazyAppliedData(...args) {\n    return applier(baseConstructor(...args));\n  };\n};\n","import { EventType, ConstructorType } from \"../types\";\n\nexport const constructorArgs = (\n  baseConstructor: ConstructorType<any[], EventType>,\n  args: unknown[],\n  startFromArgIndex: number = 0,\n) => {\n  return function ConstructorArgsEvent(...runArgs: any[]) {\n    return baseConstructor(...mergeAtIndex(runArgs, args, startFromArgIndex));\n  };\n};\n\nfunction mergeAtIndex(arr1: unknown[], arr2: unknown[], index: number) {\n  const result = arr1.slice(0, index);\n  while (result.length < index) result.push(undefined);\n  return result.concat(arr2);\n}\n","import {\n  ConstructorType,\n  DestroyableType,\n  DestructorType,\n  EventObjectType,\n  EventType,\n} from \"../types\";\n\n/**\n * Constructor what can be destroyed\n */\nexport const constructorDestroyable = (\n  baseConstructor: ConstructorType<\n    any[],\n    (DestroyableType & EventObjectType) | EventType\n  >,\n): {\n  get: ConstructorType<any[], EventType>;\n  destroy: DestructorType;\n} => {\n  const destructors: DestructorType[] = [];\n  return {\n    get: function ConstructorDestroyable(...args) {\n      const inst = baseConstructor(...args);\n      return (user) => {\n        if (\"destroy\" in inst) {\n          destructors.push(inst.destroy);\n          inst.event(user);\n        } else {\n          const d = inst(user);\n          if (d) {\n            destructors.push(d);\n          }\n        }\n\n        return () => {\n          destructors.forEach((i) => i());\n        };\n      };\n    },\n    destroy: function ConstructorDestructor() {\n      destructors.forEach((i) => i());\n    },\n  };\n};\n","import { DestructorType, EventType, EventUserType } from \"../types\";\n\nexport const destructor = <T>(\n  baseEv: EventType<T>,\n  destructorUser?: EventUserType<DestructorType>,\n) => {\n  let mbDestructor: DestructorType | void;\n  let theUser: EventUserType<T> | null = null;\n  const destroy = () => {\n    theUser = null;\n    mbDestructor?.();\n  };\n  return {\n    event: function DestructorData(u: any) {\n      theUser = u;\n      mbDestructor = baseEv((v) => {\n        if (theUser) {\n          theUser(v);\n        }\n      });\n      if (mbDestructor && destructorUser) {\n        destructorUser(destroy);\n      }\n      return destroy;\n    } as EventType<T>,\n    destroy,\n  };\n};\n","import { EventType } from \"../types\";\n\n/**\n * Create local copy of source what can be destroyed\n */\nexport const local = <T>(baseEv: EventType<T>): EventType<T> => {\n  return function LocalEvent(user) {\n    let destroyed = false;\n    const d = baseEv(function LocalBaseUser(v) {\n      if (!destroyed) {\n        user(v);\n      }\n    });\n    return () => {\n      destroyed = true;\n      d?.();\n    };\n  };\n};\n","import { EventType } from \"../types\";\n\nexport const of = <T>(value: T): EventType<T> =>\n  function OfEvent(u) {\n    return u(value);\n  };\n","import { EventType, EventUserType } from \"../types\";\n\n/**\n * Run data with user\n */\nexport const on = <T>(event: EventType<T>, user: EventUserType<T>) =>\n  event(user);\n","import { EventUserType } from \"../types\";\n\n/**\n * Silent user\n */\nexport const _void = (): EventUserType => function VoidEvent() {};\n","import { EventType, ConstructorType } from \"../types\";\nimport { of } from \"../base\";\nimport { all } from \"./All\";\n\n/**\n * Component that applies an info object constructor to each data item,\n * producing an information source with new values\n * https://silentium-lab.github.io/silentium/#/en/information/map\n */\nexport const map = <T, TG>(\n  baseEv: EventType<T[]>,\n  targetEv: ConstructorType<any[], EventType<TG>>,\n): EventType<TG[]> => {\n  return function MapData(u) {\n    baseEv(function MapBaseUser(v) {\n      const infos: EventType<TG>[] = [];\n      v.forEach((val) => {\n        let valInfo: EventType<T> | T = val;\n        if (typeof valInfo !== \"function\") {\n          valInfo = of(valInfo);\n        }\n        const info = targetEv(valInfo);\n        infos.push(info);\n      });\n      const allI = all(...infos);\n      allI(u);\n    });\n  };\n};\n","import { EventType } from \"../types\";\n\nexport const primitive = <T>(\n  baseEv: EventType<T>,\n  theValue: T | null = null,\n) => {\n  baseEv(function PrimitiveBaseUser(v) {\n    theValue = v;\n  });\n\n  return {\n    [Symbol.toPrimitive]() {\n      return theValue;\n    },\n    primitive() {\n      return theValue;\n    },\n    primitiveWithException() {\n      if (theValue === null) {\n        throw new Error(\"Primitive value is null\");\n      }\n      return theValue;\n    },\n  };\n};\n","import { EventType } from \"../types\";\n\n/**\n * A component that takes one value at a time and returns\n * an array of all previous values\n * https://silentium-lab.github.io/silentium/#/en/information/sequence\n */\nexport const sequence = <T>(baseEv: EventType<T>): EventType<T[]> => {\n  return function SequenceEvent(u) {\n    const result: T[] = [];\n    baseEv(function SequenceBaseUser(v) {\n      result.push(v);\n      u(result);\n    });\n  };\n};\n","import { EventType } from \"../types\";\n\n/**\n * Component that receives a data array and yields values one by one\n * https://silentium-lab.github.io/silentium/#/en/information/stream\n */\nexport const stream = <T>(baseEv: EventType<T[]>): EventType<T> => {\n  return function StreamEvent(u) {\n    baseEv(function StreamBaseUser(v) {\n      v.forEach((cv) => {\n        u(cv);\n      });\n    });\n  };\n};\n"],"names":["all","theInfos","keysKnown","Set","Object","keys","keysFilled","u","result","entries","forEach","key","info","add","v","size","isAllFilled","values","any","infos","applied","baseEv","applier","chain","lastValue","handleI","index","nextI","executorApplied","ExecutorAppliedBaseUser","filtered","predicate","defaultValue","fromEvent","emitterEv","eventNameEv","subscribeMethodEv","unsubscribeMethodEv","lastU","handler","a","emitter","eventName","subscribe","unsubscribe","fromPromise","p","errorOwner","then","catch","e","isFilled","value","OwnerPool","constructor","__publicField","this","owners","innerOwner","g","owner","has","remove","delete","destroy","late","lateUser","notify","event","Error","use","once","shared","stateless","ownersPool","calls","touched","pool","sharedSource","sharedEv","lateShared","constructorApplied","baseConstructor","args","constructorArgs","startFromArgIndex","runArgs","arr1","arr2","slice","length","push","concat","mergeAtIndex","constructorDestroyable","destructors","get","inst","user","d","i","destructor","destructorUser","mbDestructor","theUser","local","destroyed","of","on","_void","map","targetEv","val","valInfo","allI","primitive","theValue","Symbol","toPrimitive","primitiveWithException","sequence","stream","cv"],"mappings":"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"}