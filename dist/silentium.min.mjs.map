{"version":3,"file":"silentium.min.mjs","sources":["../src/helpers/guards.ts","../src/helpers/ensures.ts","../src/base/DestroyContainer.ts","../src/base/Event.ts","../src/base/Local.ts","../src/base/Of.ts","../src/base/Void.ts","../src/helpers/OwnerPool.ts","../src/base/Transport.ts","../src/components/All.ts","../src/components/Any.ts","../src/components/Applied.ts","../src/components/Catch.ts","../src/components/Chain.ts","../src/components/ExecutorApplied.ts","../src/components/Filtered.ts","../src/components/FromEvent.ts","../src/components/FromPromise.ts","../src/components/Late.ts","../src/components/Once.ts","../src/components/Shared.ts","../src/components/SharedSource.ts","../src/components/LateShared.ts","../src/components/Map.ts","../src/components/Primitive.ts","../src/components/Sequence.ts","../src/components/Stream.ts","../src/components/TransportApplied.ts","../src/components/TransportArgs.ts","../src/components/TransportDestroyable.ts"],"sourcesContent":["import { DestroyableType, EventType, TransportType } from \"../types\";\n\nexport const isFilled = <T>(\n  value?: T,\n): value is Exclude<T, null | undefined> => {\n  return value !== undefined && value !== null;\n};\n\nexport function isEvent<T>(o: T): o is T & EventType {\n  return (\n    o !== null &&\n    typeof o === \"object\" &&\n    \"event\" in o &&\n    typeof (o as any).event === \"function\"\n  );\n}\n\nexport function isDestroyable<T>(o: T): o is T & DestroyableType {\n  return (\n    o !== null &&\n    typeof o === \"object\" &&\n    \"destroy\" in o &&\n    typeof (o as any).destroy === \"function\"\n  );\n}\n\nexport function isTransport<T>(o: T): o is T & TransportType {\n  return (\n    o !== null &&\n    typeof o === \"object\" &&\n    \"use\" in o &&\n    typeof (o as any).use === \"function\"\n  );\n}\n","import { isEvent, isTransport } from \"../helpers/guards\";\n\nexport function ensureFunction(v: unknown, label: string) {\n  if (typeof v !== \"function\") {\n    throw new Error(`${label}: is not function`);\n  }\n}\n\nexport function ensureEvent(v: unknown, label: string) {\n  if (!isEvent(v)) {\n    throw new Error(`${label}: is not event`);\n  }\n}\n\nexport function ensureTransport(v: unknown, label: string) {\n  if (!isTransport(v)) {\n    throw new Error(`${label}: is not transport`);\n  }\n}\n","import { DestroyableType } from \"../types\";\n\n/**\n * An object that allows collecting all disposable objects and\n * disposing them later all together\n */\nexport function DestroyContainer() {\n  return new TheDestroyContainer();\n}\n\nclass TheDestroyContainer implements DestroyableType {\n  private destructors: DestroyableType[] = [];\n\n  public add(e: DestroyableType) {\n    this.destructors.push(e);\n    return this;\n  }\n\n  public destroy() {\n    this.destructors.forEach((d) => d.destroy());\n    return this;\n  }\n}\n","import { ensureFunction } from \"../helpers\";\nimport { DestroyableType, EventType, TransportType } from \"../types\";\n\ntype EventExecutor<T> = (transport: TransportType<T>) => void | (() => void);\n\n/**\n * An event created from an executor function.\n * The executor function can return an event destruction function.\n */\nexport function Event<T>(eventExecutor: EventExecutor<T>) {\n  return new TheEvent<T>(eventExecutor);\n}\n\nclass TheEvent<T> implements EventType<T>, DestroyableType {\n  private mbDestructor: unknown;\n\n  public constructor(private eventExecutor: EventExecutor<T>) {\n    ensureFunction(eventExecutor, \"Event: eventExecutor\");\n  }\n\n  public event(transport: TransportType<T>) {\n    this.mbDestructor = this.eventExecutor(transport);\n    return this;\n  }\n\n  public destroy() {\n    if (typeof this.mbDestructor === \"function\") {\n      this.mbDestructor?.();\n    }\n    return this;\n  }\n}\n","import { ensureEvent } from \"../helpers\";\nimport { ParentTransport } from \"./Transport\";\nimport { DestroyableType, EventType, TransportType } from \"../types\";\n\n/**\n * Create local copy of source what can be destroyed\n */\nexport function Local<T>($base: EventType<T>) {\n  return new TheLocal<T>($base);\n}\n\nclass TheLocal<T> implements EventType<T>, DestroyableType {\n  private destroyed = false;\n\n  public constructor(private $base: EventType<T>) {\n    ensureEvent($base, \"Local: $base\");\n  }\n\n  public event(transport: TransportType<T>): this {\n    this.$base.event(this.transport.child(transport));\n    return this;\n  }\n\n  private transport = new ParentTransport((v: T, child: TransportType<T>) => {\n    if (!this.destroyed) {\n      child.use(v);\n    }\n  });\n\n  public destroy(): this {\n    return this;\n  }\n}\n","import { EventType, TransportType } from \"../types\";\n\n/**\n * Helps convert a value into an event\n */\nexport function Of<T>(value: T) {\n  return new TheOf<T>(value);\n}\n\nclass TheOf<T> implements EventType<T> {\n  public constructor(private value: T) {}\n\n  public event(transport: TransportType<T>): this {\n    transport.use(this.value);\n    return this;\n  }\n}\n","import { TransportType } from \"../types\";\n\n/**\n * Transport that does nothing with the passed value,\n * needed for silent event triggering\n */\nexport function Void() {\n  return new TheVoid();\n}\n\nclass TheVoid implements TransportType {\n  public use(): this {\n    return this;\n  }\n}\n","import { Transport } from \"../base\";\nimport { TransportType } from \"../types\";\n\n/**\n * Helps maintain an owner list allowing different\n * owners to get information from a common source\n * https://silentium-lab.github.io/silentium/#/en/utils/owner-pool\n */\nexport class OwnerPool<T> {\n  private owners: Set<TransportType<T>>;\n  private innerOwner: TransportType<T>;\n\n  public constructor() {\n    this.owners = new Set<TransportType<T>>();\n    this.innerOwner = Transport((v) => {\n      this.owners.forEach((g) => {\n        g.use(v);\n      });\n    });\n  }\n\n  public owner() {\n    return this.innerOwner;\n  }\n\n  public size(): number {\n    return this.owners.size;\n  }\n\n  public has(owner: TransportType<T>): boolean {\n    return this.owners.has(owner);\n  }\n\n  public add(owner: TransportType<T>) {\n    this.owners.add(owner);\n    return this;\n  }\n\n  public remove(g: TransportType<T>) {\n    this.owners.delete(g);\n    return this;\n  }\n\n  public destroy() {\n    this.owners.forEach((g) => {\n      this.remove(g);\n    });\n    return this;\n  }\n}\n","import { ensureFunction } from \"../helpers\";\nimport { EventType, TransportType } from \"../types\";\n\n/**\n * Type of value transfer logic executor\n */\nexport type TransportExecutor<T> = (v: T) => void;\n\n/**\n * Base transport that accepts the passed value,\n * acts as a conductor to deliver the value from an event to somewhere\n */\nexport function Transport<T>(transportExecutor: TransportExecutor<T>) {\n  return new TheTransport<T>(transportExecutor);\n}\n\nclass TheTransport<T> implements TransportType<T> {\n  public constructor(private transportExecutor: TransportExecutor<T>) {\n    ensureFunction(transportExecutor, \"Transport: transport executor\");\n  }\n\n  public use(value: T) {\n    this.transportExecutor(value);\n    return this;\n  }\n}\n\n/**\n * Type of executor for value passing logic and event returning\n */\nexport type TransportEventExecutor<T, ET = T> = (v: T) => EventType<ET>;\n\n/**\n * A transport that delivers a value from one event\n * and returns another event based on the value\n */\nexport function TransportEvent<T, ET = any>(\n  transportExecutor: TransportEventExecutor<T, ET>,\n) {\n  return new TheTransportEvent<T, ET>(transportExecutor);\n}\n\nclass TheTransportEvent<T, ET = T> implements TransportType<T, EventType<ET>> {\n  public constructor(private executor: TransportEventExecutor<T, ET>) {\n    ensureFunction(executor, \"TheTransportEvent: transport executor\");\n  }\n\n  public use(value: T) {\n    return this.executor(value);\n  }\n}\n\n/**\n * A transport that accepts a child transport\n * to perform some transformation on the value\n * during its transmission\n */\nexport class ParentTransport<T> implements TransportType<T> {\n  public constructor(\n    private executor: (v: T, transport: TransportType, ...args: any[]) => void,\n    private args: any[] = [],\n    private _child?: TransportType<T>,\n  ) {\n    ensureFunction(executor, \"ParentTransport: executor\");\n  }\n\n  public use(value: T): this {\n    if (this._child === undefined) {\n      throw new Error(\"no base transport\");\n    }\n    this.executor(value, this._child, ...this.args);\n    return this;\n  }\n\n  public child(transport: TransportType, ...args: any[]) {\n    return new ParentTransport(\n      this.executor,\n      [...this.args, ...args],\n      transport,\n    );\n  }\n}\n","import { ParentTransport } from \"../base/Transport\";\nimport { ensureEvent } from \"../helpers\";\nimport { EventType, TransportType } from \"../types\";\n\ntype ExtractTypeS<T> = T extends EventType<infer U> ? U : never;\n\ntype ExtractTypesFromArrayS<T extends EventType<any>[]> = {\n  [K in keyof T]: ExtractTypeS<T[K]>;\n};\n\nconst isAllFilled = (keysFilled: Set<string>, keysKnown: Set<string>) => {\n  return keysFilled.size > 0 && keysFilled.size === keysKnown.size;\n};\n\n/**\n * An event that represents values from\n * all provided events as an array.\n * When all events emit their values,\n * the combined value will be returned.\n * If at least one event later emits a new\n * value, the updated array with the new value\n * will be emitted by All.\n */\nexport function All<const T extends EventType[]>(...events: T) {\n  return new TheAll<T>(...events);\n}\n\nclass TheAll<const T extends EventType[]>\n  implements EventType<ExtractTypesFromArrayS<T>>\n{\n  private keysKnown: Set<string>;\n  private keysFilled = new Set<string>();\n  private $events: T;\n  private result: Record<string, unknown> = {};\n\n  public constructor(...events: T) {\n    this.keysKnown = new Set<string>(Object.keys(events));\n    this.$events = events;\n  }\n\n  public event(transport: TransportType<ExtractTypesFromArrayS<T>>): this {\n    Object.entries(this.$events).forEach(([key, event]) => {\n      ensureEvent(event, \"All: item\");\n      this.keysKnown.add(key);\n      event.event(this.transport.child(transport, key));\n    });\n    return this;\n  }\n\n  private transport = new ParentTransport(\n    (v: T, child: TransportType, key: string) => {\n      this.keysFilled.add(key);\n      this.result[key] = v;\n      if (isAllFilled(this.keysFilled, this.keysKnown)) {\n        child.use(Object.values(this.result) as ExtractTypesFromArrayS<T>);\n      }\n    },\n  );\n}\n","import { ensureEvent } from \"../helpers\";\nimport { EventType, TransportType } from \"../types\";\n\n/**\n * An event that emits values received from\n * any of its bound events\n */\nexport function Any<T>(...events: EventType<T>[]) {\n  return new TheAny(...events);\n}\n\nclass TheAny<T> implements EventType<T> {\n  private $events: EventType[];\n\n  public constructor(...events: EventType<T>[]) {\n    this.$events = events;\n  }\n\n  public event(transport: TransportType<T>): this {\n    this.$events.forEach((event) => {\n      ensureEvent(event, \"Any: item\");\n      event.event(transport);\n    });\n    return this;\n  }\n}\n","import { ensureEvent } from \"../helpers\";\nimport { ParentTransport } from \"../base/Transport\";\nimport { ConstructorType, EventType, TransportType } from \"../types\";\n\n/**\n * An event that applies a function\n * to the value of the base event\n */\nexport function Applied<T, R>(\n  $base: EventType<T>,\n  applier: ConstructorType<[T], R>,\n) {\n  return new TheApplied<T, R>($base, applier);\n}\n\nclass TheApplied<T, R> implements EventType<R> {\n  public constructor(\n    private $base: EventType<T>,\n    private applier: ConstructorType<[T], R>,\n  ) {\n    ensureEvent($base, \"Applied: base\");\n  }\n\n  public event(transport: TransportType<R>) {\n    this.$base.event(this.transport.child(transport));\n    return this;\n  }\n\n  private transport = new ParentTransport((v: T, child) => {\n    child.use(this.applier(v));\n  });\n}\n","import { ensureEvent, ensureTransport } from \"../helpers\";\nimport { EventType, TransportType } from \"../types\";\n\n/**\n * An event representing a base event where\n * its operation is wrapped in try-catch\n * and expects exceptions. If an exception\n * bubbles up, it's passed to the transports\n * as errorMessage and errorOriginal\n */\nexport function Catch<T>(\n  $base: EventType<T>,\n  errorMessage: TransportType,\n  errorOriginal?: TransportType,\n) {\n  return new TheCatch<T>($base, errorMessage, errorOriginal);\n}\n\nclass TheCatch<T> implements EventType<T> {\n  public constructor(\n    private $base: EventType<T>,\n    private errorMessage: TransportType,\n    private errorOriginal?: TransportType,\n  ) {\n    ensureEvent($base, \"Catch: base\");\n    ensureTransport(errorMessage, \"Catch: errorMessage\");\n    if (errorOriginal !== undefined) {\n      ensureTransport(errorOriginal, \"Catch: errorOriginal\");\n    }\n  }\n\n  public event(transport: TransportType<T>) {\n    try {\n      this.$base.event(transport);\n    } catch (e: any) {\n      if (e instanceof Error) {\n        this.errorMessage.use(e.message);\n      } else {\n        this.errorMessage.use(e);\n      }\n      if (this.errorOriginal) {\n        this.errorOriginal.use(e);\n      }\n    }\n    return this;\n  }\n}\n","import { EventTypeValue } from \"../types/EventType\";\nimport { EventType, TransportType } from \"../types\";\nimport { ParentTransport } from \"../base/Transport\";\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ntype Last<T extends any[]> = T extends [...infer _, infer L] ? L : never;\n\n/**\n * Chains events together and triggers\n * the last event only when all previous events\n * have emitted their values. The value of Chain will be the value\n * of the last event. If any events\n * emit a value again after the overall Chain response was already returned,\n * then Chain emits again with the value of the last event.\n */\nexport function Chain<T extends EventType[]>(...events: T) {\n  return new TheChain<T>(...events);\n}\n\nexport class TheChain<T extends EventType[]>\n  implements EventType<EventTypeValue<Last<T>>>\n{\n  private $events: T;\n  private lastValue: EventTypeValue<Last<T>> | undefined;\n\n  public constructor(...events: T) {\n    this.$events = events;\n  }\n\n  public event(transport: TransportType<EventTypeValue<Last<T>>>) {\n    this.handleEvent(0, transport);\n    return this;\n  }\n\n  private handleEvent = (index: number, transport: TransportType) => {\n    const event = this.$events[index] as Last<T>;\n    const nextI = this.$events[index + 1] as Last<T> | undefined;\n    event.event(this.oneEventTransport.child(transport, nextI, index));\n  };\n\n  private oneEventTransport = new ParentTransport(\n    (\n      v: EventTypeValue<Last<T>>,\n      child,\n      nextI: Last<T> | undefined,\n      index: number,\n    ) => {\n      if (!nextI) {\n        this.lastValue = v as EventTypeValue<Last<T>>;\n      }\n\n      if (this.lastValue) {\n        child.use(this.lastValue);\n      }\n\n      if (nextI && !this.lastValue) {\n        this.handleEvent(index + 1, child);\n      }\n    },\n  );\n}\n","import { Transport, TransportExecutor } from \"../base\";\nimport { ensureEvent } from \"../helpers\";\nimport { EventType, TransportType } from \"../types\";\n\ntype ExecutorApplier<T> = (\n  executor: TransportExecutor<T>,\n) => TransportExecutor<T>;\n\n/**\n * Applies a value transfer function to the transport\n * and returns the same value transfer function for the transport\n * Useful for applying functions like debounced or throttle\n */\nexport function ExecutorApplied<T>(\n  $base: EventType<T>,\n  applier: ExecutorApplier<T>,\n) {\n  return new TheExecutorApplied($base, applier);\n}\n\nclass TheExecutorApplied<T> implements EventType<T> {\n  public constructor(\n    private $base: EventType<T>,\n    private applier: ExecutorApplier<T>,\n  ) {\n    ensureEvent($base, \"ExecutorApplied: base\");\n  }\n\n  public event(transport: TransportType<T>) {\n    const ExecutorAppliedBaseTransport = this.applier(\n      transport.use.bind(transport),\n    );\n    this.$base.event(Transport(ExecutorAppliedBaseTransport));\n    return this;\n  }\n}\n","import { ParentTransport } from \"../base/Transport\";\nimport { EventType, ConstructorType, TransportType } from \"../types\";\n\nexport function Filtered<T>(\n  $base: EventType<T>,\n  predicate: ConstructorType<[T], boolean>,\n  defaultValue?: T,\n) {\n  return new TheFiltered<T>($base, predicate, defaultValue);\n}\n\nclass TheFiltered<T> implements EventType<T> {\n  public constructor(\n    private $base: EventType<T>,\n    private predicate: ConstructorType<[T], boolean>,\n    private defaultValue?: T,\n  ) {}\n\n  public event(transport: TransportType<T>) {\n    this.$base.event(this.parent.child(transport));\n    return this;\n  }\n\n  private parent = new ParentTransport<T>((v, child) => {\n    if (this.predicate(v)) {\n      child.use(v);\n    } else if (this.defaultValue !== undefined) {\n      child.use(this.defaultValue);\n    }\n  });\n}\n","import { ParentTransport, Transport } from \"../base/Transport\";\nimport { EventType, TransportType } from \"../types\";\nimport { DestroyableType } from \"../types/EventType\";\nimport { All } from \"./All\";\n\n/**\n * An event derived from another event with a different\n * method call interface, based on callbacks.\n * Allows attaching a custom handler to an existing event source\n * and presenting it as a silentium event\n */\nexport function FromEvent<T>(\n  $emitter: EventType<any>,\n  $eventName: EventType<string>,\n  $subscribeMethod: EventType<string>,\n  $unsubscribeMethod?: EventType<string>,\n) {\n  return new TheFromEvent<T>(\n    $emitter,\n    $eventName,\n    $subscribeMethod,\n    $unsubscribeMethod,\n  );\n}\n\nclass TheFromEvent<T> implements EventType<T>, DestroyableType {\n  private lastTransport: TransportType<T> | null = null;\n  private handler = (v: T) => {\n    if (this.lastTransport) {\n      this.lastTransport.use(v);\n    }\n  };\n\n  public constructor(\n    private $emitter: EventType<any>,\n    private $eventName: EventType<string>,\n    private $subscribeMethod: EventType<string>,\n    private $unsubscribeMethod?: EventType<string>,\n  ) {}\n\n  public event(transport: TransportType<T>): this {\n    const a = All(this.$emitter, this.$eventName, this.$subscribeMethod);\n    a.event(this.parent.child(transport));\n    return this;\n  }\n\n  private parent = new ParentTransport<[any, string, string]>(\n    ([emitter, eventName, subscribe], parent) => {\n      this.lastTransport = parent;\n      if (!emitter?.[subscribe]) {\n        return;\n      }\n      emitter[subscribe](eventName, this.handler);\n    },\n  );\n\n  public destroy(): this {\n    this.lastTransport = null;\n    if (!this.$unsubscribeMethod) {\n      return this;\n    }\n    const a = All(this.$emitter, this.$eventName, this.$unsubscribeMethod);\n    a.event(\n      Transport(([emitter, eventName, unsubscribe]) => {\n        emitter?.[unsubscribe]?.(eventName, this.handler);\n      }),\n    );\n    return this;\n  }\n}\n","import { EventType, TransportType } from \"../types\";\n\n/**\n * Promise event\n */\nexport function FromPromise<T>(p: Promise<T>, errorOwner?: TransportType) {\n  return new TheFromPromise<T>(p, errorOwner);\n}\n\nexport class TheFromPromise<T> implements EventType<T> {\n  public constructor(\n    private p: Promise<T>,\n    private errorOwner?: TransportType,\n  ) {}\n\n  public event(transport: TransportType<T>): this {\n    this.p\n      .then(function FromPromiseThen(v) {\n        transport.use(v);\n      })\n      .catch((e) => {\n        this.errorOwner?.use(e);\n      });\n    return this;\n  }\n}\n","import { isFilled } from \"../helpers\";\nimport { TransportType, SourceType } from \"../types\";\n\n/**\n * A component that allows creating linked objects of information and its owner\n * in such a way that if a new value is assigned to the owner, this value\n * will become the value of the linked information source\n * https://silentium-lab.github.io/silentium/#/en/information/of\n */\nexport function Late<T>(v?: T) {\n  return new TheLate<T>(v);\n}\n\nclass TheLate<T> implements SourceType<T> {\n  private lateTransport: TransportType<T> | null = null;\n  private notify = (v?: T) => {\n    if (isFilled(v) && this.lateTransport) {\n      this.lateTransport.use(v);\n    }\n  };\n\n  public constructor(private v?: T) {}\n\n  public event(transport: TransportType<T>): this {\n    if (this.lateTransport) {\n      throw new Error(\n        \"Late component gets new transport, when another was already connected!\",\n      );\n    }\n    this.lateTransport = transport;\n    this.notify(this.v);\n    return this;\n  }\n\n  public use(value: T): this {\n    this.notify(value);\n    return this;\n  }\n}\n","import { ParentTransport } from \"../base\";\nimport { EventType, TransportType } from \"../types\";\n\n/**\n * Limits the number of values from the information source\n * to a single value - once the first value is emitted, no more\n * values are delivered from the source\n */\nexport function Once<T>($base: EventType<T>) {\n  return new TheOnce<T>($base);\n}\n\nclass TheOnce<T> implements EventType<T> {\n  private isFilled = false;\n\n  public constructor(private $base: EventType<T>) {}\n\n  public event(transport: TransportType<T>): this {\n    this.$base.event(this.parent.child(transport));\n    return this;\n  }\n\n  private parent = new ParentTransport<T>((v, child) => {\n    if (!this.isFilled) {\n      this.isFilled = true;\n      child.use(v);\n    }\n  });\n}\n","import { Transport } from \"../base\";\nimport { Late } from \"../components/Late\";\nimport { Once } from \"../components/Once\";\nimport { isFilled, OwnerPool } from \"../helpers\";\nimport { EventType, TransportType, SourceType } from \"../types\";\n\n/**\n * An information object that helps multiple owners access\n * a single another information object\n */\nexport function Shared<T>($base: EventType<T>, stateless = false) {\n  return new TheShared<T>($base, stateless);\n}\n\nclass TheShared<T> implements SourceType<T> {\n  private ownersPool = new OwnerPool<T>();\n  private lastValue: T | undefined;\n  private calls = Late();\n\n  public constructor(\n    private $base: EventType<T>,\n    private stateless = false,\n  ) {\n    Once(this.calls).event(\n      Transport(() => {\n        this.$base.event(this.firstCallTransport);\n      }),\n    );\n  }\n\n  public event(transport: TransportType<T>) {\n    this.calls.use(1);\n    if (\n      !this.stateless &&\n      isFilled(this.lastValue) &&\n      !this.ownersPool.has(transport)\n    ) {\n      transport.use(this.lastValue);\n    }\n    this.ownersPool.add(transport);\n    return this;\n  }\n\n  public use(value: T) {\n    this.calls.use(1);\n    this.lastValue = value;\n    this.ownersPool.owner().use(value);\n    return this;\n  }\n\n  private firstCallTransport = Transport<T>((v: T) => {\n    this.lastValue = v;\n    this.ownersPool.owner().use(v);\n  });\n\n  public touched() {\n    this.calls.use(1);\n  }\n\n  public pool() {\n    return this.ownersPool;\n  }\n\n  public destroy() {\n    return this.ownersPool.destroy();\n  }\n}\n","import { Shared } from \"../components/Shared\";\nimport { TransportType, SourceType } from \"../types\";\n\nexport function SharedSource<T>($base: SourceType<T>, stateless = false) {\n  return new TheSharedSource<T>($base, stateless);\n}\n\nclass TheSharedSource<T> implements SourceType<T> {\n  private $sharedBase: SourceType<T> & { touched: () => void };\n\n  public constructor(\n    private $base: SourceType<T>,\n    stateless = false,\n  ) {\n    this.$sharedBase = Shared(this.$base, stateless);\n  }\n\n  public event(transport: TransportType<T>) {\n    this.$sharedBase.event(transport);\n    return this;\n  }\n\n  public use(value: T) {\n    this.$sharedBase.touched();\n    this.$base.use(value);\n    return this;\n  }\n}\n","import { Late } from \"../components/Late\";\nimport { SharedSource } from \"../components/SharedSource\";\nimport { TransportType, SourceType } from \"../types\";\n\n/**\n * An event with a value that will be set later,\n * capable of responding to different transports\n */\nexport function LateShared<T>(value?: T) {\n  return new TheLateShared<T>(value);\n}\n\nclass TheLateShared<T> implements SourceType<T> {\n  private $event: SourceType<T>;\n\n  public constructor(value?: T) {\n    this.$event = SharedSource(Late(value));\n  }\n\n  public event(transport: TransportType<T>) {\n    this.$event.event(transport);\n    return this;\n  }\n\n  public use(value: T) {\n    this.$event.use(value);\n    return this;\n  }\n}\n","import { isEvent } from \"../helpers\";\nimport { Of, ParentTransport } from \"../base\";\nimport { EventType, TransportType } from \"../types\";\nimport { All } from \"./All\";\n\n/**\n * Component that applies an info object constructor to each data item,\n * producing an information source with new values\n */\nexport function Map<T, TG>(\n  $base: EventType<T[]>,\n  $target: TransportType<any, EventType<TG>>,\n) {\n  return new TheMap<T, TG>($base, $target);\n}\n\nclass TheMap<T, TG> implements EventType<TG[]> {\n  public constructor(\n    private $base: EventType<T[]>,\n    private $target: TransportType<any, EventType<TG>>,\n  ) {}\n\n  public event(transport: TransportType<TG[]>): this {\n    this.$base.event(this.parent.child(transport));\n    return this;\n  }\n\n  private parent = new ParentTransport<T[]>((v, child) => {\n    const infos: EventType<TG>[] = [];\n    v.forEach((val) => {\n      let valInfo: EventType<T> | T = val;\n      if (!isEvent(valInfo as object)) {\n        valInfo = Of(valInfo);\n      }\n      const info = this.$target.use(valInfo);\n      infos.push(info);\n    });\n    const allI = All(...infos);\n    allI.event(child);\n  });\n}\n","import { Transport } from \"../base\";\nimport { EventType } from \"../types\";\n\n/**\n * Helps represent an event as a primitive type, which can be useful\n * for cases when you need to always have a reference to the current value\n * without updating the shared value when the current one changes.\n * For example, this could be used when passing an authorization token.\n * It can also be useful for testing or logging purposes.\n */\nexport function Primitive<T>($base: EventType<T>, theValue: T | null = null) {\n  return new ThePrimitive<T>($base, theValue);\n}\n\nclass ThePrimitive<T> {\n  private touched = false;\n\n  public constructor(\n    private $base: EventType<T>,\n    private theValue: T | null = null,\n  ) {}\n\n  private ensureTouched() {\n    if (!this.touched) {\n      this.$base.event(\n        Transport((v) => {\n          this.theValue = v;\n        }),\n      );\n    }\n    this.touched = true;\n  }\n\n  public [Symbol.toPrimitive]() {\n    this.ensureTouched();\n    return this.theValue;\n  }\n\n  public primitive() {\n    this.ensureTouched();\n    return this.theValue;\n  }\n\n  public primitiveWithException() {\n    this.ensureTouched();\n    if (this.theValue === null) {\n      throw new Error(\"Primitive value is null\");\n    }\n    return this.theValue;\n  }\n}\n","import { ParentTransport } from \"../base\";\nimport { EventType, TransportType } from \"../types\";\n\nexport function Sequence<T>($base: EventType<T>) {\n  return new TheSequence<T>($base);\n}\n\n/**\n * A component that takes one value at a time and returns\n * an array of all previous values\n */\nclass TheSequence<T> implements EventType<T[]> {\n  private result: T[] = [];\n\n  public constructor(private $base: EventType<T>) {}\n\n  public event(transport: TransportType<T[]>): this {\n    this.$base.event(this.parent.child(transport));\n    return this;\n  }\n\n  private parent = new ParentTransport<T>((v, child) => {\n    this.result.push(v);\n    child.use(this.result);\n  });\n}\n","import { ParentTransport } from \"../base\";\nimport { EventType, TransportType } from \"../types\";\n\n/**\n * Component that receives a data array and yields values one by one\n */\nexport function Stream<T>($base: EventType<T[]>) {\n  return new TheStream<T>($base);\n}\n\nclass TheStream<T> implements EventType<T> {\n  public constructor(private $base: EventType<T[]>) {}\n\n  public event(transport: TransportType<T>): this {\n    this.$base.event(this.parent.child(transport));\n    return this;\n  }\n\n  private parent = new ParentTransport<T[]>((v, child) => {\n    v.forEach((cv) => {\n      child.use(cv);\n    });\n  });\n}\n","import { EventType, ConstructorType, TransportType } from \"../types\";\n\nexport function TransportApplied<T>(\n  baseTransport: TransportType<any, EventType<T>>,\n  applier: ConstructorType<[EventType], EventType<T>>,\n) {\n  return new TheTransportApplied(baseTransport, applier);\n}\n\nexport class TheTransportApplied<T>\n  implements TransportType<unknown[], EventType<T>>\n{\n  public constructor(\n    private baseTransport: TransportType<any, EventType<T>>,\n    private applier: ConstructorType<[EventType], EventType<T>>,\n  ) {}\n\n  public use(args: unknown) {\n    return this.applier(this.baseTransport.use(args));\n  }\n}\n","import { EventType, TransportType } from \"../types\";\n\nexport function TransportArgs(\n  baseTransport: TransportType<any[], EventType>,\n  args: unknown[],\n  startFromArgIndex: number = 0,\n) {\n  return new TheTransportArgs(baseTransport, args, startFromArgIndex);\n}\n\nexport class TheTransportArgs\n  implements TransportType<unknown[], EventType<unknown>>\n{\n  public constructor(\n    private baseTransport: TransportType<any[], EventType>,\n    private args: unknown[],\n    private startFromArgIndex: number = 0,\n  ) {}\n\n  public use(runArgs: unknown[]): EventType<unknown> {\n    return this.baseTransport.use(\n      mergeAtIndex(runArgs, this.args, this.startFromArgIndex),\n    );\n  }\n}\n\nfunction mergeAtIndex(arr1: unknown[], arr2: unknown[], index: number) {\n  const result = arr1.slice(0, index);\n  while (result.length < index) result.push(undefined);\n  return result.concat(arr2);\n}\n","import { isDestroyable } from \"../helpers\";\nimport { DestroyableType, EventType, TransportType } from \"../types\";\n\nexport function TransportDestroyable<T>(\n  baseTransport: TransportType<any[], EventType<T>>,\n) {\n  return new TheTransportDestroyable<T>(baseTransport);\n}\n\n/**\n * Constructor what can be destroyed\n */\nclass TheTransportDestroyable<T>\n  implements TransportType<unknown[], EventType>, DestroyableType\n{\n  private destructors: DestroyableType[] = [];\n\n  public constructor(\n    private baseTransport: TransportType<any[], EventType<T>>,\n  ) {}\n\n  public use(args: unknown[]) {\n    const inst = this.baseTransport.use(args);\n    if (isDestroyable(inst)) {\n      this.destructors.push(inst);\n    }\n    return inst;\n  }\n\n  public destroy(): this {\n    this.destructors.forEach((i) => i.destroy());\n    return this;\n  }\n}\n"],"names":["isFilled","value","isEvent","o","event","isDestroyable","destroy","isTransport","use","ensureFunction","v","label","Error","ensureEvent","ensureTransport","DestroyContainer","TheDestroyContainer","constructor","__publicField","this","add","e","destructors","push","forEach","d","Event","eventExecutor","TheEvent","transport","mbDestructor","Local","$base","TheLocal","ParentTransport","child","destroyed","Of","TheOf","Void","TheVoid","OwnerPool","owners","Set","innerOwner","Transport","g","owner","size","has","remove","delete","transportExecutor","TheTransport","TransportEvent","TheTransportEvent","executor","args","_child","All","events","TheAll","key","keysFilled","keysKnown","result","Object","values","keys","$events","entries","Any","TheAny","Applied","applier","TheApplied","Catch","errorMessage","errorOriginal","TheCatch","message","Chain","TheChain","index","nextI","oneEventTransport","lastValue","handleEvent","ExecutorApplied","TheExecutorApplied","ExecutorAppliedBaseTransport","bind","Filtered","predicate","defaultValue","TheFiltered","parent","FromEvent","$emitter","$eventName","$subscribeMethod","$unsubscribeMethod","TheFromEvent","lastTransport","emitter","eventName","subscribe","handler","unsubscribe","FromPromise","p","errorOwner","TheFromPromise","then","catch","Late","TheLate","lateTransport","notify","Once","TheOnce","Shared","stateless","TheShared","ownersPool","calls","firstCallTransport","touched","pool","SharedSource","TheSharedSource","$sharedBase","LateShared","TheLateShared","$event","Map","$target","TheMap","infos","val","valInfo","info","Primitive","theValue","ThePrimitive","ensureTouched","Symbol","toPrimitive","primitive","primitiveWithException","Sequence","TheSequence","Stream","TheStream","cv","TransportApplied","baseTransport","TheTransportApplied","TransportArgs","startFromArgIndex","TheTransportArgs","runArgs","arr1","arr2","slice","length","concat","mergeAtIndex","TransportDestroyable","TheTransportDestroyable","inst","i"],"mappings":"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"}