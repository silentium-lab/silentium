{"version":3,"file":"silentium.min.mjs","sources":["../src/Source/Source.ts","../src/Guest/Guest.ts","../src/Guest/GuestCast.ts","../src/Guest/GuestSync.ts","../src/Guest/GuestDisposable.ts","../src/Guest/GuestApplied.ts","../src/Guest/GuestExecutorApplied.ts","../src/Patron/Patron.ts","../src/Patron/PatronOnce.ts","../src/Patron/PatronPool.ts","../src/Patron/PatronApplied.ts","../src/Patron/PatronExecutorApplied.ts","../src/Source/SourceChangeable.ts","../src/Source/SourceAll.ts","../src/Source/SourceSequence.ts","../src/Source/SourceMap.ts","../src/Source/SourceRace.ts","../src/Source/SourceDynamic.ts","../src/Source/SourceApplied.ts","../src/Source/SourceExecutorApplied.ts","../src/Source/SourceFiltered.ts","../src/Source/SourceOnce.ts","../src/Source/SourceSync.ts","../src/Personal/PersonalClass.ts","../src/Personal/Personal.ts"],"sourcesContent":["import { give, GuestType } from \"../Guest/Guest\";\n\nexport type SourceExecutorType<T> = (guest: GuestType<T>) => unknown;\n\nexport interface SourceObjectType<T> {\n  value: SourceExecutorType<T>;\n}\n\nexport type SourceDataType<T> = Extract<\n  T,\n  string | number | boolean | Date | object | Array<unknown> | symbol\n>;\n\nexport type SourceType<T = any> =\n  | SourceExecutorType<T>\n  | SourceObjectType<T>\n  | SourceDataType<T>;\n\n/**\n * Helps to connect source and guest, if you need to get value in guest from source\n * helpful because we don't know what shape of source do we have, it can be function or object or primitive\n * @url https://silentium-lab.github.io/silentium/#/utils/value\n */\nexport const value = <T>(source: SourceType<T>, guest: GuestType<T>) => {\n  if (source === undefined || source === null) {\n    throw new Error(\"value didn't receive source argument\");\n  }\n  if (guest === undefined || source === null) {\n    throw new Error(\"value didn't receive guest argument\");\n  }\n  if (typeof source === \"function\") {\n    source(guest);\n  } else if (\n    typeof source === \"object\" &&\n    \"value\" in source &&\n    typeof source.value === \"function\"\n  ) {\n    source.value(guest);\n  } else {\n    give(source as T, guest);\n  }\n\n  return source;\n};\n\n/**\n * Helps to check what some information is of source shape\n * @url https://silentium-lab.github.io/silentium/#/utils/is-source\n */\nexport const isSource = <T>(\n  mbSource: T | SourceType<T>,\n): mbSource is SourceType<T> => {\n  if (\n    mbSource !== null &&\n    typeof mbSource === \"object\" &&\n    \"value\" in mbSource &&\n    typeof mbSource.value === \"function\"\n  ) {\n    return true;\n  }\n  return mbSource !== null && mbSource !== undefined;\n};\n\n/**\n * Represents source as function\n * @url https://silentium-lab.github.io/silentium/#/source\n */\nexport const source = <T>(source: SourceType<T>): SourceExecutorType<T> => {\n  if (source === undefined) {\n    throw new Error(\"Source constructor didn't receive executor function\");\n  }\n\n  return (guest: GuestType<T>) => {\n    value(source, guest);\n  };\n};\n","import { source, SourceExecutorType, SourceType } from \"../Source/Source\";\n\ntype GuestIntroduction = \"guest\" | \"patron\";\n\nexport type GuestExecutorType<T = any, This = void> = (value: T) => This;\n\nexport interface GuestObjectType<T = any> {\n  give(value: T): this;\n  introduction?(): GuestIntroduction;\n}\n\nexport type GuestType<T = any> = GuestExecutorType<T> | GuestObjectType<T>;\n\n/**\n * Helps to give data to guest, guests can be of different shapes\n * function guest or object guest\n * @url https://silentium-lab.github.io/silentium/#/utils/give\n */\nexport const give = <T>(\n  data: T,\n  guest?: GuestType<T>,\n): GuestType<T> | SourceExecutorType<T> => {\n  if (data === undefined) {\n    throw new Error(\"give didn't receive data argument\");\n  }\n  if (guest === undefined) {\n    return source<T>(data as SourceType<T>) as SourceExecutorType<T>;\n  }\n  if (typeof guest === \"function\") {\n    guest(data);\n  } else {\n    guest.give(data);\n  }\n  return guest;\n};\n\n/**\n * Helps to check if mbGuest can be used to retrieve value\n * @url https://silentium-lab.github.io/silentium/#/utils/is-guest\n */\nexport const isGuest = (mbGuest: any): mbGuest is GuestType => {\n  if (mbGuest === undefined) {\n    throw new Error(\"isGuest didnt receive mbGuest argument\");\n  }\n  return typeof mbGuest === \"function\" || typeof mbGuest?.give === \"function\";\n};\n\n/**\n * Helps to create guest of object type\n * @url https://silentium-lab.github.io/silentium/#/guest\n */\nexport const guest = <T>(receiver: GuestExecutorType<T>) => {\n  if (!receiver) {\n    throw new Error(\"receiver function was not passed to Guest constructor\");\n  }\n  const result = {\n    give(value: T) {\n      receiver(value);\n      return result;\n    },\n  };\n  return result;\n};\n","import { give, GuestType } from \"./Guest\";\nimport { GuestDisposableType, MaybeDisposableType } from \"./GuestDisposable\";\n\n/**\n * Helps to inherit guest behavior, its introduction and dispose settings\n * @url https://silentium-lab.github.io/silentium/#/guest/guest-cast\n */\nexport const guestCast = <T>(\n  sourceGuest: GuestType<any>,\n  targetGuest: GuestType<T>,\n): GuestDisposableType<T> => {\n  if (sourceGuest === undefined) {\n    throw new Error(\"GuestCast didn't receive sourceGuest argument\");\n  }\n  if (targetGuest === undefined) {\n    throw new Error(\"GuestCast didn't receive targetGuest argument\");\n  }\n\n  const result = {\n    disposed(value: T | null): boolean {\n      const maybeDisposable = sourceGuest as MaybeDisposableType;\n      return maybeDisposable.disposed ? maybeDisposable.disposed(value) : false;\n    },\n    give(value: T) {\n      give(value, targetGuest);\n      return result;\n    },\n    introduction() {\n      if (typeof sourceGuest === \"function\") {\n        return \"guest\";\n      }\n      if (!sourceGuest.introduction) {\n        return \"guest\";\n      }\n      return sourceGuest.introduction();\n    },\n  };\n\n  return result;\n};\n","import { GuestObjectType } from \"./Guest\";\n\nexport interface GuestValueType<T = any> extends GuestObjectType<T> {\n  value(): T;\n}\n\n/**\n * @url https://silentium-lab.github.io/silentium/#/guest/guest-sync\n */\nexport const guestSync = <T>(theValue?: T): GuestValueType<T> => {\n  const result = {\n    give(value: T) {\n      theValue = value;\n      return result;\n    },\n    value() {\n      if (theValue === undefined) {\n        throw new Error(\"no value in GuestSync!\");\n      }\n      return theValue;\n    },\n  };\n\n  return result;\n};\n","import { give, GuestObjectType, GuestType } from \"./Guest\";\n\nexport interface GuestDisposableType<T = any> extends GuestObjectType<T> {\n  disposed(value: T | null): boolean;\n}\n\nexport type MaybeDisposableType<T = any> = Partial<GuestDisposableType<T>>;\n\n/**\n * Connects to guest logic what can tell PatronPool\n * what guest don't need to receive new values\n * @url https://silentium-lab.github.io/silentium/#/guest/guest-disposable\n */\nexport const guestDisposable = <T>(\n  guest: GuestType,\n  disposeCheck: (value: T | null) => boolean,\n): GuestDisposableType<T> => {\n  if (guest === undefined) {\n    throw new Error(\"GuestDisposable didn't receive guest argument\");\n  }\n  if (disposeCheck === undefined) {\n    throw new Error(\"GuestDisposable didn't receive disposeCheck argument\");\n  }\n\n  const result = {\n    disposed(value: T | null): boolean {\n      return disposeCheck(value);\n    },\n    give(value: T) {\n      give(value, guest);\n      return result;\n    },\n  };\n\n  return result;\n};\n","import { give, GuestObjectType, GuestType } from \"../Guest/Guest\";\n\n/**\n * Helps to apply function to value before baseGuest will receive it\n * @url https://silentium-lab.github.io/silentium/#/guest/guest-applied\n */\nexport const guestApplied = <T, R>(\n  baseGuest: GuestType<R>,\n  applier: (value: T) => R,\n): GuestObjectType<T> => {\n  const result = {\n    give(value: T) {\n      give(applier(value), baseGuest);\n      return result;\n    },\n  };\n  return result;\n};\n","import {\n  give,\n  GuestExecutorType,\n  GuestObjectType,\n  GuestType,\n} from \"../Guest/Guest\";\n\n/**\n * Apply function to guest function of receiving value, useful for debouncing or throttling\n * @url https://silentium-lab.github.io/silentium/#/guest/guest-executor-applied\n */\nexport const guestExecutorApplied = <T>(\n  baseGuest: GuestType<T>,\n  applier: (executor: GuestExecutorType<T>) => GuestExecutorType<T>,\n): GuestObjectType<T> => {\n  const result = {\n    give: applier((v) => give(v, baseGuest)),\n  };\n\n  return result as GuestObjectType<T>;\n};\n","import { give, GuestType } from \"../Guest/Guest\";\nimport { GuestDisposableType } from \"../Guest/GuestDisposable\";\n\nexport type PatronType<T> = GuestDisposableType<T> & {\n  introduction(): \"patron\";\n};\n\n/**\n * Helps to check what incoming object is patron\n * @url https://silentium-lab.github.io/silentium/#/utils/is-patron\n */\nexport const isPatron = (guest: GuestType): guest is PatronType<unknown> =>\n  typeof guest === \"object\" &&\n  guest !== null &&\n  guest?.introduction?.() === \"patron\";\n\nexport const introduction = () => \"patron\" as const;\n\n/**\n * Help to turn existed guest intro patron\n * @url https://silentium-lab.github.io/silentium/#/patron\n */\nexport const patron = <T>(\n  willBePatron: GuestType<T>,\n): GuestDisposableType<T> => {\n  if (willBePatron === undefined) {\n    throw new Error(\"Patron didn't receive willBePatron argument\");\n  }\n\n  const result = {\n    give(value: T) {\n      give(value, willBePatron);\n      return result;\n    },\n    disposed(value: T | null): boolean {\n      const maybeDisposable = willBePatron as GuestDisposableType;\n      return maybeDisposable?.disposed?.(value) || false;\n    },\n    introduction,\n  };\n\n  return result;\n};\n","import { introduction } from \"../Patron/Patron\";\nimport { give, GuestType } from \"../Guest/Guest\";\nimport {\n  GuestDisposableType,\n  MaybeDisposableType,\n} from \"../Guest/GuestDisposable\";\n\n/**\n * Helps to call patron only once, this will be helpful when you\n * need value but you know what value can not be existed at a time of requesting\n * @url https://silentium-lab.github.io/silentium/#/patron/patron-once\n */\nexport const patronOnce = <T>(\n  baseGuest: GuestType<T>,\n): GuestDisposableType<T> => {\n  if (baseGuest === undefined) {\n    throw new Error(\"PatronOnce didn't receive baseGuest argument\");\n  }\n\n  let received = false;\n\n  const result = {\n    give(value: T) {\n      if (!received) {\n        received = true;\n        give(value, baseGuest);\n      }\n      return result;\n    },\n    disposed(value: T | null): boolean {\n      if (received) {\n        return true;\n      }\n      const maybeDisposable = baseGuest as MaybeDisposableType;\n      return maybeDisposable.disposed ? maybeDisposable.disposed(value) : false;\n    },\n    introduction,\n  };\n\n  return result;\n};\n","import { give, GuestObjectType, GuestType } from \"../Guest/Guest\";\nimport { GuestDisposableType } from \"../Guest/GuestDisposable\";\n\nconst poolSets = new Map<PoolType, Set<GuestObjectType>>();\nconst poolsOfInitiators = new Map<unknown, PoolType>();\n\n/**\n * Helps to remove all pools of related initiators\n * @url https://silentium-lab.github.io/silentium/#/utils/destroy\n */\nexport const destroy = (initiators: unknown[]) => {\n  initiators.forEach((initiator) => {\n    const pool = poolsOfInitiators.get(initiator);\n    pool?.destroy();\n  });\n};\n\n/**\n * Returns all pools related to one patron\n * @url https://silentium-lab.github.io/silentium/#/utils/patron-pools\n */\nexport const patronPools = (patron: GuestObjectType) => {\n  const pools: PoolType[] = [];\n  poolSets.forEach((pool, poolInstance) => {\n    if (pool.has(patron)) {\n      pools.push(poolInstance);\n    }\n  });\n  return pools;\n};\n\n/**\n * Removes patron from all existed pools\n * @url https://silentium-lab.github.io/silentium/#/utils/remove-patron-from-pools\n */\nexport const removePatronFromPools = (patron: GuestObjectType) => {\n  if (patron === undefined) {\n    throw new Error(\"removePatronFromPools didnt receive patron argument\");\n  }\n  poolSets.forEach((pool) => {\n    pool.delete(patron);\n  });\n};\n\n/**\n * Checks what patron is connected with any pool\n * @url https://silentium-lab.github.io/silentium/#/utils/is-patron-in-pools\n */\nexport const isPatronInPools = (patron: GuestObjectType) => {\n  if (patron === undefined) {\n    throw new Error(\"isPatronInPools didnt receive patron argument\");\n  }\n  let inPool = false;\n  poolSets.forEach((pool) => {\n    if (!inPool) {\n      inPool = pool.has(patron);\n    }\n  });\n  return inPool;\n};\n\nexport interface PoolType<T = any> extends GuestObjectType<T> {\n  add(guest: GuestObjectType<T>): this;\n  distribute(receiving: T, possiblePatron: GuestObjectType<T>): this;\n  remove(patron: GuestObjectType<T>): this;\n  size(): number;\n  destroy(): void;\n}\n\n/**\n * Pool class helps to implement dispatching for patron about new values\n * what may appear in sources\n * @url https://silentium-lab.github.io/silentium/#/patron/patron-pool\n */\nexport class PatronPool<T> implements PoolType<T> {\n  private patrons: Set<GuestObjectType<T>>;\n\n  public give: (value: T) => this;\n\n  public constructor(private initiator: unknown) {\n    this.patrons = new Set<GuestObjectType<T>>();\n    poolSets.set(this, this.patrons);\n    poolsOfInitiators.set(this.initiator, this);\n    const doReceive = (value: T) => {\n      this.patrons.forEach((target) => {\n        this.sendValueToGuest(value, target);\n      });\n    };\n    this.give = (value: T) => {\n      doReceive(value);\n      return this;\n    };\n  }\n\n  public size(): number {\n    return this.patrons.size;\n  }\n\n  public add(shouldBePatron: GuestType<T>) {\n    if (!shouldBePatron) {\n      throw new Error(\"PatronPool add method received nothing!\");\n    }\n    if (\n      typeof shouldBePatron !== \"function\" &&\n      shouldBePatron.introduction &&\n      shouldBePatron.introduction() === \"patron\"\n    ) {\n      this.patrons.add(shouldBePatron);\n    }\n    return this;\n  }\n\n  public remove(patron: GuestObjectType<T>) {\n    this.patrons.delete(patron);\n    return this;\n  }\n\n  public distribute(receiving: T, possiblePatron: GuestType<T>): this {\n    this.add(possiblePatron);\n    this.sendValueToGuest(receiving, possiblePatron);\n    return this;\n  }\n\n  public destroy() {\n    this.patrons.forEach((patron) => {\n      this.remove(patron);\n    });\n    poolSets.delete(this);\n    poolsOfInitiators.delete(this.initiator);\n  }\n\n  private sendValueToGuest(value: T, guest: GuestType<T>) {\n    const isDisposed = this.guestDisposed(value, guest);\n    if (!isDisposed) {\n      give(value, guest);\n    }\n  }\n\n  private guestDisposed(value: T, guest: GuestType<T>) {\n    if ((guest as GuestDisposableType).disposed?.(value)) {\n      this.remove(guest as GuestObjectType);\n      return true;\n    }\n    return false;\n  }\n}\n","import { introduction } from \"../Patron/Patron\";\nimport { GuestObjectType, GuestType } from \"../Guest/Guest\";\nimport { guestApplied } from \"../Guest/GuestApplied\";\n\n/**\n * Helps to apply function to patron\n * @url https://silentium-lab.github.io/silentium/#/patron/patron-applied\n */\nexport const patronApplied = <T, R>(\n  baseGuest: GuestType<R>,\n  applier: (value: T) => R,\n): GuestObjectType<T> => {\n  const applied = guestApplied(baseGuest, applier);\n\n  const result = {\n    give(value: T) {\n      applied.give(value);\n      return result;\n    },\n    introduction,\n  };\n\n  return result;\n};\n","import { introduction } from \"../Patron/Patron\";\nimport { GuestExecutorType, GuestType } from \"../Guest/Guest\";\nimport { guestExecutorApplied } from \"../Guest/GuestExecutorApplied\";\n\n/**\n * Helps to apply function to patrons executor\n * @url https://silentium-lab.github.io/silentium/#/patron/patron-executor-applied\n */\nexport const patronExecutorApplied = <T>(\n  baseGuest: GuestType<T>,\n  applier: (executor: GuestExecutorType) => GuestExecutorType,\n) => {\n  const guestApplied = guestExecutorApplied(baseGuest, applier);\n\n  const result = {\n    give(value: T) {\n      guestApplied.give(value);\n      return result;\n    },\n    introduction,\n  };\n\n  return result;\n};\n","import { guest, GuestObjectType, GuestType } from \"../Guest/Guest\";\nimport { isPatron } from \"../Patron/Patron\";\nimport { patronOnce } from \"../Patron/PatronOnce\";\nimport { PatronPool } from \"../Patron/PatronPool\";\nimport {\n  isSource,\n  SourceDataType,\n  SourceObjectType,\n  SourceType,\n  value,\n} from \"./Source\";\n\nexport type SourceChangeableType<T = any> = SourceObjectType<T> &\n  GuestObjectType<T>;\n\n/**\n * Ability to create source what can be changed later\n * @url https://silentium-lab.github.io/silentium/#/source/source-changeable\n */\nexport const sourceChangeable = <T>(source?: SourceType<T>) => {\n  const createdSource = {} as SourceChangeableType<T>;\n  const thePool = new PatronPool(createdSource);\n  const theEmptyPool = new PatronPool(createdSource);\n  let isEmpty = source === undefined;\n\n  if (source !== undefined && isSource(source)) {\n    value(\n      source,\n      patronOnce((unwrappedSourceDocument) => {\n        isEmpty = unwrappedSourceDocument === undefined;\n        source = unwrappedSourceDocument as SourceDataType<T>;\n      }),\n    );\n  } else {\n    isEmpty = source === undefined;\n  }\n\n  createdSource.value = (g: GuestType<T>) => {\n    if (isEmpty) {\n      if (isPatron(g)) {\n        theEmptyPool.add(g);\n      }\n      return createdSource;\n    }\n\n    if (typeof g === \"function\") {\n      thePool.distribute(source, guest(g));\n    } else {\n      thePool.distribute(source, g);\n    }\n\n    return createdSource;\n  };\n\n  createdSource.give = (value: T) => {\n    isEmpty = false;\n    source = value as SourceDataType<T>;\n    thePool.give(source);\n    theEmptyPool.give(source);\n    return createdSource;\n  };\n\n  return createdSource as SourceChangeableType<T>;\n};\n","import { give, guest, GuestType } from \"../Guest/Guest\";\nimport { guestCast } from \"../Guest/GuestCast\";\nimport { patron } from \"../Patron/Patron\";\nimport { SourceType, value } from \"./Source\";\nimport { sourceChangeable } from \"./SourceChangeable\";\n\n/**\n * Represents common value as Record or Array of bunch of sources,\n * when all sources will gets it's values\n * @url https://silentium-lab.github.io/silentium/#/source/source-all\n */\nexport const sourceAll = <T>(\n  sources: SourceType<any>[] | Record<string, SourceType<any>>,\n) => {\n  const keysKnown = new Set<string>(Object.keys(sources));\n  const keysFilled = new Set();\n  const isAllFilled = () => {\n    return keysFilled.size > 0 && keysFilled.size === keysKnown.size;\n  };\n  const isSourcesArray = Array.isArray(sources);\n  const theAll = sourceChangeable<Record<string, unknown>>({});\n\n  Object.entries(sources).forEach(([key, source]) => {\n    keysKnown.add(key);\n    value(\n      source,\n      patron((v) => {\n        theAll.value(\n          guest((all: Record<string, unknown>) => {\n            keysFilled.add(key);\n            const lastAll = {\n              ...all,\n              [key]: v,\n            };\n            theAll.give(lastAll);\n          }),\n        );\n      }),\n    );\n  });\n\n  return (guest: GuestType<T>) => {\n    value((g) => {\n      theAll.value(\n        guestCast(g, (value) => {\n          if (isAllFilled()) {\n            give((isSourcesArray ? Object.values(value) : value) as T, g);\n          }\n        }),\n      );\n    }, guest);\n  };\n};\n","import { give, GuestType } from \"../Guest/Guest\";\nimport { guestCast } from \"../Guest/GuestCast\";\nimport { patronOnce } from \"../Patron/PatronOnce\";\nimport { PersonalType } from \"../Personal/Personal\";\nimport { isSource, SourceType, value } from \"./Source\";\nimport { sourceAll } from \"./SourceAll\";\nimport { sourceChangeable, SourceChangeableType } from \"./SourceChangeable\";\n\n/**\n * Ability to apply source to source of array values sequentially\n * @url https://silentium-lab.github.io/silentium/#/source/source-sequence\n */\nexport const sourceSequence = <T, TG>(\n  baseSource: SourceType<T[]>,\n  targetSource: PersonalType<SourceType<TG>>,\n) => {\n  if (baseSource === undefined) {\n    throw new Error(\"SourceSequence didn't receive baseSource argument\");\n  }\n  if (targetSource === undefined) {\n    throw new Error(\"SourceSequence didn't receive targetSource argument\");\n  }\n\n  return (guest: GuestType<TG[]>) => {\n    const sequenceSource = sourceChangeable();\n    const source = targetSource.get(sequenceSource);\n\n    value(\n      baseSource,\n      guestCast(guest, (theValue) => {\n        let index = 0;\n\n        const sources: SourceChangeableType[] = [];\n        theValue.forEach(() => {\n          sources.push(sourceChangeable());\n        });\n\n        const nextItemHandle = () => {\n          if (theValue[index + 1] !== undefined) {\n            index = index + 1;\n            handle();\n          }\n        };\n\n        function handle() {\n          const currentSource = sources[index];\n          const nextValue = theValue[index];\n          if (isSource(nextValue)) {\n            value(\n              nextValue,\n              patronOnce((theNextValue) => {\n                sequenceSource.give(theNextValue);\n                value(source, currentSource);\n                nextItemHandle();\n              }),\n            );\n          } else {\n            sequenceSource.give(nextValue);\n            value(source, currentSource);\n            nextItemHandle();\n          }\n        }\n\n        if (theValue[index] !== undefined) {\n          handle();\n          value(sourceAll(sources), guest);\n        } else {\n          give([], guest);\n        }\n      }),\n    );\n  };\n};\n","import { GuestType } from \"../Guest/Guest\";\nimport { guestCast } from \"../Guest/GuestCast\";\nimport { PersonalType } from \"../Personal/Personal\";\nimport { SourceType, value } from \"./Source\";\nimport { sourceAll } from \"./SourceAll\";\n\n/**\n * Helps to modify many sources with one private source\n * @url https://silentium-lab.github.io/silentium/#/source/source-map\n */\nexport const sourceMap = <T, TG>(\n  baseSource: SourceType<T[]>,\n  targetSource: PersonalType<SourceType<TG>>,\n) => {\n  if (baseSource === undefined) {\n    throw new Error(\"SourceMap didn't receive baseSource argument\");\n  }\n  if (targetSource === undefined) {\n    throw new Error(\"SourceMap didn't receive targetSource argument\");\n  }\n\n  return (guest: GuestType<TG[]>) => {\n    value(\n      baseSource,\n      guestCast(<GuestType>guest, (theValue) => {\n        const sources: SourceType[] = [];\n        theValue.forEach((val) => {\n          const source = targetSource.get(val);\n          sources.push(source);\n        });\n        value(sourceAll(sources), guest);\n      }),\n    );\n    return this;\n  };\n};\n","import { give, GuestType } from \"../Guest/Guest\";\nimport { guestCast } from \"../Guest/GuestCast\";\nimport { SourceType, value } from \"./Source\";\n\n/**\n * Connects guest with source what give response faster than others\n * @url https://silentium-lab.github.io/silentium/#/source/source-race\n */\nexport const sourceRace = <T>(sources: SourceType<T>[]) => {\n  if (sources === undefined) {\n    throw new Error(\"SourceRace didnt receive sources argument\");\n  }\n\n  return (guest: GuestType<T>) => {\n    let connectedWithSource: SourceType | null = null;\n    sources.forEach((source) => {\n      value(\n        source,\n        guestCast(<GuestType>guest, (value) => {\n          if (!connectedWithSource || connectedWithSource === source) {\n            give(value as T, guest);\n            connectedWithSource = source;\n          }\n        }),\n      );\n    });\n  };\n};\n","import { give, GuestType } from \"../Guest/Guest\";\nimport { SourceType, value } from \"./Source\";\nimport { SourceChangeableType } from \"./SourceChangeable\";\n\n/**\n * Ability to build common changeable source from different guest and source\n * @url https://silentium-lab.github.io/silentium/#/source/source-dynamic\n */\nexport const sourceDynamic = <T>(\n  baseGuest: GuestType<T>,\n  baseSource: SourceType<T>,\n): SourceChangeableType<T> => {\n  if (baseGuest === undefined) {\n    throw new Error(\"SourceDynamic didn't receive baseGuest argument\");\n  }\n  if (baseSource === undefined) {\n    throw new Error(\"SourceDynamic didn't receive baseSource argument\");\n  }\n\n  const sourceObject = {\n    value(guest: GuestType<T>) {\n      value(baseSource, guest);\n      return sourceObject;\n    },\n    give(value: T) {\n      give(value, baseGuest);\n      return this;\n    },\n  };\n\n  return sourceObject;\n};\n","import { give, GuestType } from \"../Guest/Guest\";\nimport { guestCast } from \"../Guest/GuestCast\";\nimport { SourceType, value } from \"../Source/Source\";\n\n/**\n * Gives ability to apply function to source value\n * @url https://silentium-lab.github.io/silentium/#/source/source-applied\n */\nexport const sourceApplied = <T, R>(\n  baseSource: SourceType<T>,\n  applier: (v: T) => R,\n) => {\n  return (guest: GuestType<R>) => {\n    value(\n      baseSource,\n      guestCast(guest, (v) => {\n        give(applier(v), guest);\n      }),\n    );\n  };\n};\n","import { SourceExecutorType, SourceType, value } from \"../Source/Source\";\n\n/**\n * Ability to apply function to source executor, helpful when need to apply throttling or debounce\n * @url https://silentium-lab.github.io/silentium/#/source/source-executor-applied\n */\nexport const sourceExecutorApplied = <T>(\n  source: SourceType<T>,\n  applier: (executor: SourceExecutorType<T>) => SourceExecutorType<T>,\n) => {\n  return applier((g) => {\n    value(source, g);\n  });\n};\n","import { give, GuestType } from \"../Guest/Guest\";\nimport { guestCast } from \"../Guest/GuestCast\";\nimport { SourceType, value } from \"../Source/Source\";\n\n/**\n * Helps not to respond with information what checked by predicate function\n * @url https://silentium-lab.github.io/silentium/#/source/source-filtered\n */\nexport const sourceFiltered = <T>(\n  baseSource: SourceType<T>,\n  predicate: (v: T) => boolean,\n) => {\n  return (g: GuestType<T>) => {\n    value(\n      baseSource,\n      guestCast(g, (v) => {\n        if (predicate(v) === true) {\n          give(v, g);\n        }\n      }),\n    );\n  };\n};\n","import { GuestType } from \"../Guest/Guest\";\nimport { SourceType, value } from \"./Source\";\nimport { sourceChangeable } from \"./SourceChangeable\";\n\n/**\n * Ability set the value only once\n * @url https://silentium-lab.github.io/silentium/#/source/source-once\n */\nexport const sourceOnce = <T>(initialValue?: SourceType<T>) => {\n  let isFilled = initialValue !== undefined;\n  const source = sourceChangeable(initialValue);\n\n  return {\n    value(guest: GuestType<T>) {\n      value(source, guest);\n      return this;\n    },\n    give(value: T) {\n      if (!isFilled) {\n        source.give(value);\n        isFilled = true;\n      }\n      return this;\n    },\n  };\n};\n","import { GuestType } from \"../Guest/Guest\";\nimport { guestSync } from \"../Guest/GuestSync\";\nimport { patron } from \"../Patron/Patron\";\nimport { SourceObjectType, SourceType, value } from \"../Source/Source\";\n\n/**\n * Helps to represent source value as sync value, what can be returned\n * useful for example in tests\n * @url https://silentium-lab.github.io/silentium/#/source/source-sync\n */\nexport const sourceSync = <T>(\n  baseSource: SourceType<T>,\n): SourceObjectType<T> & { syncValue(): T } => {\n  const syncGuest = guestSync<T>();\n  value(baseSource, patron(syncGuest));\n\n  return {\n    value(guest: GuestType<T>) {\n      value(baseSource, guest);\n      return this;\n    },\n    syncValue() {\n      try {\n        return syncGuest.value() as T;\n      } catch {\n        throw new Error(\"No value in SourceSync\");\n      }\n    },\n  };\n};\n","import { PersonalType } from \"./Personal\";\n\ninterface Constructable<T> {\n  new (...args: unknown[]): T;\n}\n\ninterface Prototyped<T> {\n  prototype: T;\n}\n\nexport const personalClass = <T>(\n  constructorFn: Prototyped<T>,\n  modules: Record<string, unknown> = {},\n): PersonalType<T> => {\n  if (constructorFn === undefined) {\n    throw new Error(\"PrivateClass didn't receive constructorFn argument\");\n  }\n\n  return {\n    get<R extends unknown[], CT = null>(...args: R): CT extends null ? T : CT {\n      return new (constructorFn as Constructable<T>)(\n        ...args,\n        modules,\n      ) as CT extends null ? T : CT;\n    },\n  };\n};\n","export interface PersonalType<T> {\n  get<R extends unknown[], CT = null>(...args: R): CT extends null ? T : CT;\n}\n\n/**\n * Helps to get personal instance of dependency\n * @url https://silentium-lab.github.io/silentium/#/utils/private\n */\nexport const personal = <T>(\n  buildingFn: (...args: any[]) => T,\n): PersonalType<T> => {\n  if (buildingFn === undefined) {\n    throw new Error(\"personal didn't receive buildingFn argument\");\n  }\n\n  return {\n    get<R extends unknown[], CT = null>(...args: R): CT extends null ? T : CT {\n      return buildingFn(...args) as CT extends null ? T : CT;\n    },\n  };\n};\n"],"names":["value","source","guest","Error","give","isSource","mbSource","data","isGuest","mbGuest","receiver","result","guestCast","sourceGuest","targetGuest","disposed","maybeDisposable","introduction","guestSync","theValue","guestDisposable","disposeCheck","guestApplied","baseGuest","applier","guestExecutorApplied","v","isPatron","patron","willBePatron","patronOnce","received","poolSets","Map","poolsOfInitiators","destroy","initiators","forEach","initiator","pool","get","patronPools","pools","poolInstance","has","push","removePatronFromPools","delete","isPatronInPools","inPool","PatronPool","constructor","this","__publicField","patrons","Set","set","doReceive","target","sendValueToGuest","size","add","shouldBePatron","remove","distribute","receiving","possiblePatron","guestDisposed","patronApplied","applied","patronExecutorApplied","sourceChangeable","createdSource","thePool","theEmptyPool","isEmpty","unwrappedSourceDocument","g","sourceAll","sources","keysKnown","Object","keys","keysFilled","isSourcesArray","Array","isArray","theAll","entries","key","all","lastAll","values","sourceSequence","baseSource","targetSource","sequenceSource","index","nextItemHandle","handle","currentSource","nextValue","theNextValue","sourceMap","val","sourceRace","connectedWithSource","sourceDynamic","sourceObject","sourceApplied","sourceExecutorApplied","sourceFiltered","predicate","sourceOnce","initialValue","isFilled","sourceSync","syncGuest","syncValue","personalClass","constructorFn","modules","args","personal","buildingFn"],"mappings":"AAuBa,MAAAA,EAAQ,CAAIC,EAAuBC,KAC1CD,GAAAA,QACI,MAAA,IAAIE,MAAM,wCAEd,QAAU,IAAVD,GAAkC,OAAXD,EACnB,MAAA,IAAIE,MAAM,uCAcXF,MAZe,mBAAXA,EACTA,EAAOC,GAEW,iBAAXD,GACP,UAAWA,GACa,mBAAjBA,EAAOD,MAEdC,EAAOD,MAAME,GAEbE,EAAKH,EAAaC,GAGbD,CAAAA,EAOII,EACXC,GAGe,OAAbA,GACoB,iBAAbA,GACP,UAAWA,GACe,mBAAnBA,EAASN,OAIXM,QAOIL,EAAaA,IACxB,QAAe,IAAXA,EACI,MAAA,IAAIE,MAAM,uDAGlB,OAAQD,IACNF,EAAMC,EAAQC,EAAK,CACrB,ECxDWE,EAAO,CAClBG,EACAL,KAEA,QAAa,IAATK,EACI,MAAA,IAAIJ,MAAM,qCAElB,YAAc,IAAVD,EACKD,EAAUM,IAEE,mBAAVL,EACTA,EAAMK,GAENL,EAAME,KAAKG,GAENL,EAAAA,EAOIM,EAAWC,IACtB,QAAgB,IAAZA,EACI,MAAA,IAAIN,MAAM,0CAElB,MAA0B,mBAAZM,GAAmD,mBAAlBA,GAASL,IAAS,EAOtDF,EAAYQ,IACvB,IAAKA,EACG,MAAA,IAAIP,MAAM,yDAElB,MAAMQ,EAAS,CACbP,KAAKJ,IACHU,EAASV,GACFW,IAGJ,OAAAA,CAAA,ECtDIC,EAAY,CACvBC,EACAC,KAEA,QAAoB,IAAhBD,EACI,MAAA,IAAIV,MAAM,iDAElB,QAAoB,IAAhBW,EACI,MAAA,IAAIX,MAAM,iDAGlB,MAAMQ,EAAS,CACb,QAAAI,CAASf,GACP,MAAMgB,EAAkBH,EACxB,QAAOG,EAAgBD,UAAWC,EAAgBD,SAASf,EAC7D,EACAI,KAAKJ,IACHI,EAAKJ,EAAOc,GACLH,GAETM,aAAe,IACc,mBAAhBJ,EACF,QAEJA,EAAYI,aAGVJ,EAAYI,eAFV,SAMN,OAAAN,CAAA,EC7BIO,EAAgBC,IAC3B,MAAMR,EAAS,CACbP,KAAKJ,IACQmB,EAAAnB,EACJW,GAET,KAAAX,GACE,QAAiB,IAAbmB,EACI,MAAA,IAAIhB,MAAM,0BAEX,OAAAgB,CAAA,GAIJ,OAAAR,CAAA,ECVIS,EAAkB,CAC7BlB,EACAmB,KAEA,QAAc,IAAVnB,EACI,MAAA,IAAIC,MAAM,iDAElB,QAAqB,IAAjBkB,EACI,MAAA,IAAIlB,MAAM,wDAGlB,MAAMQ,EAAS,CACbI,SAASf,GACAqB,EAAarB,GAEtBI,KAAKJ,IACHI,EAAKJ,EAAOE,GACLS,IAIJ,OAAAA,CAAA,EC5BIW,EAAe,CAC1BC,EACAC,KAEA,MAAMb,EAAS,CACbP,KAAKJ,IACEI,EAAAoB,EAAQxB,GAAQuB,GACdZ,IAGJ,OAAAA,CAAA,ECLIc,EAAuB,CAClCF,EACAC,KAEe,CACbpB,KAAMoB,GAASE,GAAMtB,EAAKsB,EAAGH,OCLpBI,EAAYzB,GACN,iBAAVA,GACG,OAAVA,GAC4B,WAA5BA,GAAOe,iBAEIA,EAAe,IAAM,SAMrBW,EACXC,IAEA,QAAqB,IAAjBA,EACI,MAAA,IAAI1B,MAAM,+CAGlB,MAAMQ,EAAS,CACbP,KAAKJ,IACHI,EAAKJ,EAAO6B,GACLlB,GAET,QAAAI,CAASf,GACP,MAAMgB,EAAkBa,EACjB,OAAAb,GAAiBD,WAAWf,KAAU,CAC/C,EACAiB,gBAGK,OAAAN,CAAA,EC7BImB,EACXP,IAEA,QAAkB,IAAdA,EACI,MAAA,IAAIpB,MAAM,gDAGlB,IAAI4B,GAAW,EAEf,MAAMpB,EAAS,CACbP,KAAKJ,IACE+B,IACQA,GAAA,EACX3B,EAAKJ,EAAOuB,IAEPZ,GAET,QAAAI,CAASf,GACP,GAAI+B,EACK,OAAA,EAET,MAAMf,EAAkBO,EACxB,QAAOP,EAAgBD,UAAWC,EAAgBD,SAASf,EAC7D,EACAiB,gBAGK,OAAAN,CAAA,4JCpCT,MAAMqB,MAAeC,IACfC,MAAwBD,IAMjBE,EAAWC,IACXA,EAAAC,SAASC,IACZ,MAAAC,EAAOL,EAAkBM,IAAIF,GACnCC,GAAMJ,SAAQ,GACf,EAOUM,EAAeb,IAC1B,MAAMc,EAAoB,GAMnB,OALEV,EAAAK,SAAQ,CAACE,EAAMI,KAClBJ,EAAKK,IAAIhB,IACXc,EAAMG,KAAKF,EAAY,IAGpBD,CAAA,EAOII,EAAyBlB,IACpC,QAAe,IAAXA,EACI,MAAA,IAAIzB,MAAM,uDAET6B,EAAAK,SAASE,IAChBA,EAAKQ,OAAOnB,EAAM,GACnB,EAOUoB,EAAmBpB,IAC9B,QAAe,IAAXA,EACI,MAAA,IAAIzB,MAAM,iDAElB,IAAI8C,GAAS,EAMN,OALEjB,EAAAK,SAASE,IACXU,IACMA,EAAAV,EAAKK,IAAIhB,GAAM,IAGrBqB,CAAA,EAgBF,MAAMC,EAKJ,WAAAC,CAAoBb,GAAAc,KAAAd,UAAAA,EAJnBe,EAAAD,KAAA,WAEDC,EAAAD,KAAA,QAGAA,KAAAE,YAAcC,IACVvB,EAAAwB,IAAIJ,KAAMA,KAAKE,SACNpB,EAAAsB,IAAIJ,KAAKd,UAAWc,MAChC,MAAAK,EAAazD,IACZoD,KAAAE,QAAQjB,SAASqB,IACfN,KAAAO,iBAAiB3D,EAAO0D,EAAM,GACpC,EAEEN,KAAAhD,KAAQJ,IACXyD,EAAUzD,GACHoD,KACT,CAGK,IAAAQ,GACL,OAAOR,KAAKE,QAAQM,IAAA,CAGf,GAAAC,CAAIC,GACT,IAAKA,EACG,MAAA,IAAI3D,MAAM,2CASX,MANqB,mBAAnB2D,GACPA,EAAe7C,cACmB,WAAlC6C,EAAe7C,gBAEVmC,KAAAE,QAAQO,IAAIC,GAEZV,IAAA,CAGF,MAAAW,CAAOnC,GAEL,OADFwB,KAAAE,QAAQP,OAAOnB,GACbwB,IAAA,CAGF,UAAAY,CAAWC,EAAcC,GAGvB,OAFPd,KAAKS,IAAIK,GACJd,KAAAO,iBAAiBM,EAAWC,GAC1Bd,IAAA,CAGF,OAAAjB,GACAiB,KAAAE,QAAQjB,SAAST,IACpBwB,KAAKW,OAAOnC,EAAM,IAEpBI,EAASe,OAAOK,MACElB,EAAAa,OAAOK,KAAKd,UAAS,CAGjC,gBAAAqB,CAAiB3D,EAAUE,GACdkD,KAAKe,cAAcnE,EAAOE,IAE3CE,EAAKJ,EAAOE,EACd,CAGM,aAAAiE,CAAcnE,EAAUE,GACzB,QAAAA,EAA8Ba,WAAWf,KAC5CoD,KAAKW,OAAO7D,IACL,EAEF,ECvIE,MAAAkE,EAAgB,CAC3B7C,EACAC,KAEM,MAAA6C,EAAU/C,EAAaC,EAAWC,GAElCb,EAAS,CACbP,KAAKJ,IACHqE,EAAQjE,KAAKJ,GACNW,GAETM,gBAGK,OAAAN,CAAA,ECdI2D,EAAwB,CACnC/C,EACAC,KAEM,MAAAF,EAAeG,EAAqBF,EAAWC,GAE/Cb,EAAS,CACbP,KAAKJ,IACHsB,EAAalB,KAAKJ,GACXW,GAETM,gBAGK,OAAAN,CAAA,ECHI4D,EAAuBtE,IAClC,MAAMuE,EAAgB,CAAC,EACjBC,EAAU,IAAIvB,EAAWsB,GACzBE,EAAe,IAAIxB,EAAWsB,GACpC,IAAIG,OAAqB,IAAX1E,EAuCP,YArCQ,IAAXA,GAAwBI,EAASJ,GACnCD,EACEC,EACA6B,GAAY8C,IACVD,OAAsC,IAA5BC,EACD3E,EAAA2E,CAAA,KAIbD,OAAqB,IAAX1E,EAGEuE,EAAAxE,MAAS6E,GACjBF,GACEhD,EAASkD,IACXH,EAAab,IAAIgB,GAEZL,IAGQ,mBAANK,EACTJ,EAAQT,WAAW/D,EAAQC,EAAM2E,IAEzBJ,EAAAT,WAAW/D,EAAQ4E,GAGtBL,GAGKA,EAAApE,KAAQJ,IACV2E,GAAA,EACD3E,EAAAA,EACTyE,EAAQrE,KAAKH,GACbyE,EAAatE,KAAKH,GACXuE,GAGFA,CAAA,ECnDIM,EACXC,IAEA,MAAMC,EAAY,IAAIzB,IAAY0B,OAAOC,KAAKH,IACxCI,MAAiB5B,IAIjB6B,EAAiBC,MAAMC,QAAQP,GAC/BQ,EAAShB,EAA0C,IAqBzD,OAnBOU,OAAAO,QAAQT,GAAS1C,SAAQ,EAAEoD,EAAKxF,MACrC+E,EAAUnB,IAAI4B,GACdzF,EACEC,EACA2B,GAAQF,IACC6D,EAAAvF,MACLE,GAAOwF,IACLP,EAAWtB,IAAI4B,GACf,MAAME,EAAU,IACXD,EACHD,CAACA,GAAM/D,GAET6D,EAAOnF,KAAKuF,EAAO,IAEvB,IAEJ,IAGMzF,IACNF,GAAO6E,IACEU,EAAAvF,MACLY,EAAUiE,GAAI7E,IA3BXmF,EAAWvB,KAAO,GAAKuB,EAAWvB,OAASoB,EAAUpB,MA6BpDxD,EAAMgF,EAAiBH,OAAOW,OAAO5F,GAASA,EAAa6E,EAAC,IAGlE,GACC3E,EAAK,CACV,ECvCW2F,EAAiB,CAC5BC,EACAC,KAEA,QAAmB,IAAfD,EACI,MAAA,IAAI3F,MAAM,qDAElB,QAAqB,IAAjB4F,EACI,MAAA,IAAI5F,MAAM,uDAGlB,OAAQD,IACN,MAAM8F,EAAiBzB,IACjBtE,EAAS8F,EAAavD,IAAIwD,GAEhChG,EACE8F,EACAlF,EAAUV,GAAQiB,IAChB,IAAI8E,EAAQ,EAEZ,MAAMlB,EAAkC,GACxC5D,EAASkB,SAAQ,KACP0C,EAAAlC,KAAK0B,IAAkB,IAGjC,MAAM2B,EAAiB,UACO,IAAxB/E,EAAS8E,EAAQ,KACnBA,GAAgB,EACTE,IAAA,EAIX,SAASA,IACD,MAAAC,EAAgBrB,EAAQkB,GACxBI,EAAYlF,EAAS8E,GACvB5F,EAASgG,GACXrG,EACEqG,EACAvE,GAAYwE,IACVN,EAAe5F,KAAKkG,GACpBtG,EAAMC,EAAQmG,GACCF,GAAA,MAInBF,EAAe5F,KAAKiG,GACpBrG,EAAMC,EAAQmG,GACCF,IACjB,MAGsB,IAApB/E,EAAS8E,IACJE,IACDnG,EAAA8E,EAAUC,GAAU7E,IAErBE,EAAA,GAAIF,EAAK,IAGpB,CACF,EC7DWqG,EAAY,CACvBT,EACAC,KAEA,QAAmB,IAAfD,EACI,MAAA,IAAI3F,MAAM,gDAElB,QAAqB,IAAjB4F,EACI,MAAA,IAAI5F,MAAM,kDAGlB,OAAQD,IACNF,EACE8F,EACAlF,EAAqBV,GAAQiB,IAC3B,MAAM4D,EAAwB,GACrB5D,EAAAkB,SAASmE,IACV,MAAAvG,EAAS8F,EAAavD,IAAIgE,GAChCzB,EAAQlC,KAAK5C,EAAM,IAEfD,EAAA8E,EAAUC,GAAU7E,EAAK,IAG5B,CACT,EC1BWuG,EAAiB1B,IAC5B,QAAgB,IAAZA,EACI,MAAA,IAAI5E,MAAM,6CAGlB,OAAQD,IACN,IAAIwG,EAAyC,KACrC3B,EAAA1C,SAASpC,IACfD,EACEC,EACAW,EAAqBV,GAAQF,IACtB0G,GAAuBA,IAAwBzG,IAClDG,EAAKJ,EAAYE,GACKwG,EAAAzG,EAAA,IAG5B,GACD,CACH,EClBW0G,EAAgB,CAC3BpF,EACAuE,KAEA,QAAkB,IAAdvE,EACI,MAAA,IAAIpB,MAAM,mDAElB,QAAmB,IAAf2F,EACI,MAAA,IAAI3F,MAAM,oDAGlB,MAAMyG,EAAe,CACnB5G,MAAME,IACJF,EAAM8F,EAAY5F,GACX0G,GAET,IAAAxG,CAAKJ,GAEI,OADPI,EAAKJ,EAAOuB,GACL6B,IAAA,GAIJ,OAAAwD,CAAA,ECtBIC,EAAgB,CAC3Bf,EACAtE,IAEQtB,IACNF,EACE8F,EACAlF,EAAUV,GAAQwB,IACXtB,EAAAoB,EAAQE,GAAIxB,EAAK,IAE1B,ECZS4G,EAAwB,CACnC7G,EACAuB,IAEOA,GAASqD,IACd7E,EAAMC,EAAQ4E,EAAC,ICHNkC,EAAiB,CAC5BjB,EACAkB,IAEQnC,IACN7E,EACE8F,EACAlF,EAAUiE,GAAInD,KACS,IAAjBsF,EAAUtF,IACZtB,EAAKsB,EAAGmD,EAAC,IAGf,ECZSoC,EAAiBC,IAC5B,IAAIC,OAA4B,IAAjBD,EACT,MAAAjH,EAASsE,EAAiB2C,GAEzB,MAAA,CACL,KAAAlH,CAAME,GAEG,OADPF,EAAMC,EAAQC,GACPkD,IACT,EACA,IAAAhD,CAAKJ,GAKI,OAJFmH,IACHlH,EAAOG,KAAKJ,GACDmH,GAAA,GAEN/D,IAAA,EAEX,ECdWgE,EACXtB,IAEA,MAAMuB,EAAYnG,IAGX,OAFDlB,EAAA8F,EAAYlE,EAAOyF,IAElB,CACL,KAAArH,CAAME,GAEG,OADPF,EAAM8F,EAAY5F,GACXkD,IACT,EACA,SAAAkE,GACM,IACF,OAAOD,EAAUrH,OAAM,CACjB,MACA,MAAA,IAAIG,MAAM,yBAAwB,CAC1C,EAEJ,EClBWoH,EAAgB,CAC3BC,EACAC,EAAmC,MAEnC,QAAsB,IAAlBD,EACI,MAAA,IAAIrH,MAAM,sDAGX,MAAA,CACLqC,QAAuCkF,IAC9B,IAAKF,KACPE,EACHD,GAGN,ECjBWE,EACXC,IAEA,QAAmB,IAAfA,EACI,MAAA,IAAIzH,MAAM,+CAGX,MAAA,CACLqC,QAAuCkF,IAC9BE,KAAcF,GAEzB"}