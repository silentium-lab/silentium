{"version":3,"file":"silentium.min.mjs","sources":["../src/components/All.ts","../src/components/Any.ts","../src/components/Applied.ts","../src/components/Chain.ts","../src/components/ExecutorApplied.ts","../src/components/Filtered.ts","../src/components/FromEvent.ts","../src/components/FromPromise.ts","../src/helpers/isFilled.ts","../src/helpers/OwnerPool.ts","../src/components/Late.ts","../src/components/Once.ts","../src/components/Shared.ts","../src/components/SharedSource.ts","../src/components/LateShared.ts","../src/components/ConstructorApplied.ts","../src/components/ConstructorArgs.ts","../src/components/ConstructorDestroyable.ts","../src/base/Destructor.ts","../src/base/Local.ts","../src/base/Of.ts","../src/base/On.ts","../src/base/Void.ts","../src/base/DestroyContainer.ts","../src/components/Map.ts","../src/components/Primitive.ts","../src/components/Sequence.ts","../src/components/Stream.ts"],"sourcesContent":["import { EventType } from \"../types\";\n\ntype ExtractTypeS<T> = T extends EventType<infer U> ? U : never;\n\nexport type ExtractTypesFromArrayS<T extends EventType<any>[]> = {\n  [K in keyof T]: ExtractTypeS<T[K]>;\n};\n\nconst isAllFilled = (keysFilled: Set<string>, keysKnown: Set<string>) => {\n  return keysFilled.size > 0 && keysFilled.size === keysKnown.size;\n};\n\n/**\n * Combines multiple information sources into a single unified source\n * represented as an array containing values from all sources\n * https://silentium-lab.github.io/silentium/#/en/information/all\n */\nexport function All<const T extends EventType[]>(\n  ...theInfos: T\n): EventType<ExtractTypesFromArrayS<T>> {\n  const keysKnown = new Set<string>(Object.keys(theInfos));\n  const keysFilled = new Set<string>();\n\n  return function AllEvent(user) {\n    const result: Record<string, unknown> = {};\n\n    Object.entries(theInfos).forEach(([key, info]) => {\n      keysKnown.add(key);\n      info(function AllItemUser(v) {\n        keysFilled.add(key);\n        result[key] = v;\n        if (isAllFilled(keysFilled, keysKnown)) {\n          user(Object.values(result) as ExtractTypesFromArrayS<T>);\n        }\n      });\n    });\n  };\n}\n","import { EventType } from \"../types\";\n\n/**\n * From a set of information sources we get\n * a common response from any source for a single owner\n * https://silentium-lab.github.io/silentium/#/en/information/any\n */\nexport function Any<T>(...infos: EventType<T>[]): EventType<T> {\n  return function AnyEvent(user) {\n    infos.forEach((info) => {\n      info(user);\n    });\n  };\n}\n","import { EventType, ConstructorType } from \"../types\";\n\n/**\n * Information to which the function was applied to change the value\n * https://silentium-lab.github.io/silentium/#/en/information/applied\n */\nexport function Applied<T, R>(\n  baseEv: EventType<T>,\n  applier: ConstructorType<[T], R>,\n): EventType<R> {\n  return function AppliedEvent(user) {\n    baseEv(function AppliedBaseUser(v) {\n      user(applier(v));\n    });\n  };\n}\n","import { EventTypeValue } from \"../types/EventType\";\nimport { EventType } from \"../types\";\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ntype Last<T extends any[]> = T extends [...infer _, infer L] ? L : never;\n\n/**\n * The set of information sources forms a sequential chain where each source provides\n * an answer. The final answer will be the output result. If any source in the chain\n * provides a new answer, the component's overall response will be repeated.\n * https://silentium-lab.github.io/silentium/#/en/information/applied\n */\nexport function Chain<T extends EventType[]>(...infos: T): Last<T> {\n  return <Last<T>>function ChainEvent(user) {\n    let lastValue: EventTypeValue<Last<T>> | undefined;\n\n    const handleI = (index: number) => {\n      const info = infos[index] as Last<T>;\n      const nextI = infos[index + 1] as Last<T> | undefined;\n\n      info(function ChainItemUser(v) {\n        if (!nextI) {\n          lastValue = v as EventTypeValue<Last<T>>;\n        }\n\n        if (lastValue) {\n          user(lastValue);\n        }\n\n        if (nextI && !lastValue) {\n          handleI(index + 1);\n        }\n      });\n    };\n\n    handleI(0);\n  };\n}\n","import { EventType, EventUserType } from \"../types\";\n\n/**\n * Information to which a function is applied in order\n * to control the value passing process\n * https://silentium-lab.github.io/silentium/#/en/information/applied\n */\nexport function ExecutorApplied<T>(\n  baseEv: EventType<T>,\n  applier: (executor: EventUserType<T>) => EventUserType<T>,\n): EventType<T> {\n  return function ExecutorAppliedEvent(user) {\n    const ExecutorAppliedBaseUser = applier(user);\n    baseEv(ExecutorAppliedBaseUser);\n  };\n}\n","import { EventType, ConstructorType } from \"../types\";\n\n/**\n * Information whose value is being validated\n * via a predicate; if the predicate returns true, the value\n * can be passed to the output\n * https://silentium-lab.github.io/silentium/#/en/information/filtered\n */\nexport function Filtered<T>(\n  baseEv: EventType<T>,\n  predicate: ConstructorType<[T], boolean>,\n  defaultValue?: T,\n): EventType<T> {\n  return function FilteredEvent(user) {\n    baseEv(function FilteredBaseUser(v) {\n      if (predicate(v)) {\n        user(v);\n      } else if (defaultValue !== undefined) {\n        user(defaultValue);\n      }\n    });\n  };\n}\n","import { EventTypeDestroyable } from \"../types/EventType\";\nimport { EventType, EventUserType } from \"../types\";\nimport { All } from \"./All\";\n\n/**\n * A component that receives data from an event and\n * presents it as an information object\n * https://silentium-lab.github.io/silentium/#/en/information/from-event\n */\nexport function FromEvent<T>(\n  emitterEv: EventType<any>,\n  eventNameEv: EventType<string>,\n  subscribeMethodEv: EventType<string>,\n  unsubscribeMethodEv?: EventType<string>,\n): EventTypeDestroyable<T> {\n  let lastU: EventUserType<T> | null = null;\n  const handler = function FromEventHandler(v: T) {\n    if (lastU) {\n      lastU(v);\n    }\n  };\n  return function FromEventEvent(user) {\n    lastU = user;\n    const a = All(emitterEv, eventNameEv, subscribeMethodEv);\n    a(function FromEventAllUser([emitter, eventName, subscribe]) {\n      if (!emitter?.[subscribe]) {\n        return;\n      }\n      emitter[subscribe](eventName, handler);\n    });\n\n    return function FromEventDestructor() {\n      lastU = null;\n      if (!unsubscribeMethodEv) {\n        return;\n      }\n      const a = All(emitterEv, eventNameEv, unsubscribeMethodEv);\n      a(([emitter, eventName, unsubscribe]) => {\n        emitter?.[unsubscribe]?.(eventName, handler);\n      });\n    };\n  };\n}\n","import { EventType, EventUserType } from \"../types\";\n\n/**\n * Component that gets a value from a promise and\n * presents it as information\n * https://silentium-lab.github.io/silentium/#/en/information/from-promise\n */\nexport function FromPromise<T>(\n  p: Promise<T>,\n  errorOwner?: EventUserType,\n): EventType<T> {\n  return function FromPromiseEvent(user) {\n    p.then(function FromPromiseThen(v) {\n      user(v);\n    }).catch(function FromPromiseCatch(e) {\n      errorOwner?.(e);\n    });\n  };\n}\n","export const isFilled = <T>(\n  value?: T,\n): value is Exclude<T, null | undefined> => {\n  return value !== undefined && value !== null;\n};\n","import { EventUserType } from \"../types\";\n\n/**\n * Helps maintain an owner list allowing different\n * owners to get information from a common source\n * https://silentium-lab.github.io/silentium/#/en/utils/owner-pool\n */\nexport class OwnerPool<T> {\n  private owners: Set<EventUserType<T>>;\n  private innerOwner: EventUserType<T>;\n\n  public constructor() {\n    this.owners = new Set<EventUserType<T>>();\n    this.innerOwner = (v) => {\n      this.owners.forEach((g) => {\n        g(v);\n      });\n    };\n  }\n\n  public owner() {\n    return this.innerOwner;\n  }\n\n  public size(): number {\n    return this.owners.size;\n  }\n\n  public has(owner: EventUserType<T>): boolean {\n    return this.owners.has(owner);\n  }\n\n  public add(owner: EventUserType<T>) {\n    this.owners.add(owner);\n    return this;\n  }\n\n  public remove(g: EventUserType<T>) {\n    this.owners.delete(g);\n    return this;\n  }\n\n  public destroy() {\n    this.owners.forEach((g) => {\n      this.remove(g);\n    });\n    return this;\n  }\n}\n","import { EventUserType, SourceType } from \"../types\";\nimport { isFilled } from \"../helpers\";\n\n/**\n * A component that allows creating linked objects of information and its owner\n * in such a way that if a new value is assigned to the owner, this value\n * will become the value of the linked information source\n * https://silentium-lab.github.io/silentium/#/en/information/of\n */\nexport function Late<T>(v?: T): SourceType<T> {\n  let lateUser: EventUserType<T> | null = null;\n  const notify = (v?: T) => {\n    if (isFilled(v) && lateUser) {\n      lateUser(v);\n    }\n  };\n\n  return {\n    event: function LateEvent(user) {\n      if (lateUser) {\n        throw new Error(\n          \"Late component gets new user, when another was already connected!\",\n        );\n      }\n\n      lateUser = user;\n      notify(v);\n    },\n    use: function LateUser(v) {\n      notify(v);\n    },\n  };\n}\n","import { EventType } from \"../types\";\n\n/**\n * Limits the number of values from the information source\n * to a single value - once the first value is emitted, no more\n * values are delivered from the source\n * https://silentium-lab.github.io/silentium/#/en/information/once\n */\nexport function Once<T>(baseEv: EventType<T>): EventType<T> {\n  return function OnceEvent(user) {\n    let isFilled = false;\n    baseEv(function OnceBaseUser(v) {\n      if (!isFilled) {\n        isFilled = true;\n        user(v);\n      }\n    });\n  };\n}\n","import { EventType, DestroyableType, SourceType } from \"../types\";\nimport { isFilled, OwnerPool } from \"../helpers\";\nimport { Late } from \"../components/Late\";\nimport { Once } from \"../components/Once\";\n\n/**\n * An information object that helps multiple owners access\n * a single another information object\n * https://silentium-lab.github.io/silentium/#/en/information/pool\n */\nexport function Shared<T>(\n  baseEv: EventType<T>,\n  stateless = false,\n): SourceType<T> & {\n  pool: () => OwnerPool<T>;\n  touched: () => void;\n} & DestroyableType {\n  const ownersPool = new OwnerPool<T>();\n  let lastValue: T | undefined;\n\n  const calls = Late();\n  Once(calls.event)(function SharedCallsUser() {\n    baseEv(function SharedBaseUser(v) {\n      lastValue = v;\n      ownersPool.owner()(v);\n    });\n  });\n\n  return {\n    event: function SharedEvent(user) {\n      calls.use(1);\n      if (!stateless && isFilled(lastValue) && !ownersPool.has(user)) {\n        user(lastValue);\n      }\n      ownersPool.add(user);\n      return () => {\n        ownersPool.remove(user);\n      };\n    },\n    use: function SharedUser(value: T) {\n      calls.use(1);\n      lastValue = value;\n      ownersPool.owner()(value);\n    },\n    touched() {\n      calls.use(1);\n    },\n    pool() {\n      return ownersPool;\n    },\n    destroy() {\n      ownersPool.destroy();\n    },\n  };\n}\n","import { SourceType } from \"../types\";\nimport { Shared } from \"../components/Shared\";\n\nexport function SharedSource<T>(\n  baseEv: SourceType<T>,\n  stateless = false,\n): SourceType<T> {\n  const sharedEv = Shared(baseEv.event, stateless);\n\n  return {\n    event: function SharedSourceEvent(user) {\n      sharedEv.event(user);\n    },\n    use: function SharedSourceUser(v) {\n      sharedEv.touched();\n      baseEv.use(v);\n    },\n  };\n}\n","import { Late } from \"../components/Late\";\nimport { SharedSource } from \"../components/SharedSource\";\nimport { SourceType } from \"../types\";\n\nexport function LateShared<T>(value?: T): SourceType<T> {\n  return SharedSource(Late(value));\n}\n","import { EventType, ConstructorType } from \"../types\";\n\n/**\n * Constructor with applied function to its results\n */\nexport function ConstructorApplied<T>(\n  baseConstructor: ConstructorType<any[], EventType>,\n  applier: (i: EventType) => EventType<T>,\n): ConstructorType<EventType[], EventType<T>> {\n  return function LazyAppliedData(...args) {\n    return applier(baseConstructor(...args));\n  };\n}\n","import { EventType, ConstructorType } from \"../types\";\n\nexport function ConstructorArgs(\n  baseConstructor: ConstructorType<any[], EventType>,\n  args: unknown[],\n  startFromArgIndex: number = 0,\n) {\n  return function ConstructorArgsEvent(...runArgs: any[]) {\n    return baseConstructor(...mergeAtIndex(runArgs, args, startFromArgIndex));\n  };\n}\n\nfunction mergeAtIndex(arr1: unknown[], arr2: unknown[], index: number) {\n  const result = arr1.slice(0, index);\n  while (result.length < index) result.push(undefined);\n  return result.concat(arr2);\n}\n","import {\n  ConstructorType,\n  DestroyableType,\n  DestructorType,\n  EventObjectType,\n  EventType,\n} from \"../types\";\n\n/**\n * Constructor what can be destroyed\n */\nexport function ConstructorDestroyable(\n  baseConstructor: ConstructorType<\n    any[],\n    (DestroyableType & EventObjectType) | EventType\n  >,\n): {\n  get: ConstructorType<any[], EventType>;\n  destroy: DestructorType;\n} {\n  const destructors: DestructorType[] = [];\n  return {\n    get: function ConstructorDestroyableGet(...args) {\n      const inst = baseConstructor(...args);\n      return (user) => {\n        if (\"destroy\" in inst) {\n          destructors.push(inst.destroy);\n          inst.event(user);\n        } else {\n          const d = inst(user);\n          if (d) {\n            destructors.push(d);\n          }\n        }\n\n        return () => {\n          destructors.forEach((i) => i());\n        };\n      };\n    },\n    destroy: function ConstructorDestructor() {\n      destructors.forEach((i) => i());\n    },\n  };\n}\n","import { DestructorType, EventType, EventUserType } from \"../types\";\n\nexport function Destructor<T>(\n  baseEv: EventType<T>,\n  destructorUser?: EventUserType<DestructorType>,\n) {\n  let mbDestructor: DestructorType | void;\n  let theUser: WeakRef<EventUserType<T>> | null = null;\n  const destroy = () => {\n    theUser = null;\n    mbDestructor?.();\n  };\n  return {\n    event: function DestructorEvent(user) {\n      theUser = new WeakRef(user);\n      mbDestructor = baseEv((v) => {\n        if (theUser) {\n          theUser.deref()?.(v);\n        }\n      });\n      if (mbDestructor && destructorUser) {\n        destructorUser(destroy);\n      }\n      return destroy;\n    } as EventType<T>,\n    destroy,\n  };\n}\n","import { EventType } from \"../types\";\n\n/**\n * Create local copy of source what can be destroyed\n */\nexport function Local<T>(baseEv: EventType<T>): EventType<T> {\n  return function LocalEvent(user) {\n    let destroyed = false;\n    const d = baseEv(function LocalBaseUser(v) {\n      if (!destroyed) {\n        user(v);\n      }\n    });\n    return () => {\n      destroyed = true;\n      d?.();\n    };\n  };\n}\n","import { EventType } from \"../types\";\n\nexport function Of<T>(value: T): EventType<T> {\n  return function OfEvent(user) {\n    return user(value);\n  };\n}\n","import { EventType, EventUserType } from \"../types\";\n\n/**\n * Run data with user\n */\nexport function On<T>(event: EventType<T>, user: EventUserType<T>) {\n  return event(user);\n}\n","import { EventUserType } from \"../types\";\n\n/**\n * Silent user\n */\nexport function Void(): EventUserType {\n  return function VoidEvent() {};\n}\n","import { Destructor } from \"../base/Destructor\";\nimport { DestructorType, EventType } from \"../types\";\n\nexport function DestroyContainer() {\n  const destructors: DestructorType[] = [];\n  return {\n    add(e: EventType) {\n      const d = Destructor(e);\n      destructors.push(d.destroy);\n      return d.event;\n    },\n    destroy() {\n      destructors.forEach((d) => d());\n    },\n  };\n}\n","import { EventType, ConstructorType } from \"../types\";\nimport { Of } from \"../base\";\nimport { All } from \"./All\";\n\n/**\n * Component that applies an info object constructor to each data item,\n * producing an information source with new values\n * https://silentium-lab.github.io/silentium/#/en/information/map\n */\nexport function Map<T, TG>(\n  baseEv: EventType<T[]>,\n  targetEv: ConstructorType<any[], EventType<TG>>,\n): EventType<TG[]> {\n  return function MapData(user) {\n    baseEv(function MapBaseUser(v) {\n      const infos: EventType<TG>[] = [];\n      v.forEach((val) => {\n        let valInfo: EventType<T> | T = val;\n        if (typeof valInfo !== \"function\") {\n          valInfo = Of(valInfo);\n        }\n        const info = targetEv(valInfo);\n        infos.push(info);\n      });\n      const allI = All(...infos);\n      allI(user);\n    });\n  };\n}\n","import { EventType } from \"../types\";\n\nexport function Primitive<T>(baseEv: EventType<T>, theValue: T | null = null) {\n  baseEv(function PrimitiveBaseUser(v) {\n    theValue = v;\n  });\n\n  return {\n    [Symbol.toPrimitive]() {\n      return theValue;\n    },\n    primitive() {\n      return theValue;\n    },\n    primitiveWithException() {\n      if (theValue === null) {\n        throw new Error(\"Primitive value is null\");\n      }\n      return theValue;\n    },\n  };\n}\n","import { EventType } from \"../types\";\n\n/**\n * A component that takes one value at a time and returns\n * an array of all previous values\n * https://silentium-lab.github.io/silentium/#/en/information/sequence\n */\nexport function Sequence<T>(baseEv: EventType<T>): EventType<T[]> {\n  return function SequenceEvent(user) {\n    const result: T[] = [];\n    baseEv(function SequenceBaseUser(v) {\n      result.push(v);\n      user(result);\n    });\n  };\n}\n","import { EventType } from \"../types\";\n\n/**\n * Component that receives a data array and yields values one by one\n * https://silentium-lab.github.io/silentium/#/en/information/stream\n */\nexport function Stream<T>(baseEv: EventType<T[]>): EventType<T> {\n  return function StreamEvent(user) {\n    baseEv(function StreamBaseUser(v) {\n      v.forEach((cv) => {\n        user(cv);\n      });\n    });\n  };\n}\n"],"names":["All","theInfos","keysKnown","Set","Object","keys","keysFilled","user","result","entries","forEach","key","info","add","v","size","isAllFilled","values","Any","infos","Applied","baseEv","applier","Chain","lastValue","handleI","index","nextI","ExecutorApplied","ExecutorAppliedBaseUser","Filtered","predicate","defaultValue","FromEvent","emitterEv","eventNameEv","subscribeMethodEv","unsubscribeMethodEv","lastU","handler","a","emitter","eventName","subscribe","unsubscribe","FromPromise","p","errorOwner","then","catch","e","isFilled","value","OwnerPool","constructor","__publicField","this","owners","innerOwner","g","owner","has","remove","delete","destroy","Late","lateUser","notify","event","Error","use","Once","Shared","stateless","ownersPool","calls","touched","pool","SharedSource","sharedEv","LateShared","ConstructorApplied","baseConstructor","args","ConstructorArgs","startFromArgIndex","runArgs","arr1","arr2","slice","length","push","concat","mergeAtIndex","ConstructorDestroyable","destructors","get","inst","d","i","Destructor","destructorUser","mbDestructor","theUser","WeakRef","deref","Local","destroyed","Of","On","Void","DestroyContainer","Map","targetEv","val","valInfo","allI","Primitive","theValue","Symbol","toPrimitive","primitive","primitiveWithException","Sequence","Stream","cv"],"mappings":"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"}