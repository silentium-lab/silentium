{"version":3,"file":"silentium.min.mjs","sources":["../src/Source/Source.ts","../src/Guest/Guest.ts","../src/Guest/GuestCast.ts","../src/Patron/PatronPool.ts","../src/Guest/GuestPool.ts","../src/Guest/GuestSync.ts","../src/Guest/GuestObject.ts","../src/Guest/GuestDisposable.ts","../src/Guest/GuestApplied.ts","../src/Guest/GuestExecutorApplied.ts","../src/Patron/Patron.ts","../src/Patron/PatronOnce.ts","../src/Patron/PatronApplied.ts","../src/Patron/PatronExecutorApplied.ts","../src/Source/SourceChangeable.ts","../src/Source/SourceAll.ts","../src/Source/SourceSequence.ts","../src/Source/SourceMap.ts","../src/Source/SourceRace.ts","../src/Source/SourceDynamic.ts","../src/Source/SourceApplied.ts","../src/Source/SourceExecutorApplied.ts","../src/Source/SourceFiltered.ts","../src/Source/SourceOnce.ts","../src/Source/SourceSync.ts","../src/Private/PrivateClass.ts","../src/Private/Private.ts"],"sourcesContent":["import { give, GuestType } from \"../Guest/Guest\";\n\nexport type SourceExecutorType<T> = (guest: GuestType<T>) => unknown;\n\nexport interface SourceObjectType<T> {\n  value: SourceExecutorType<T>;\n}\n\nexport type SourceDataType =\n  | string\n  | number\n  | boolean\n  | Date\n  | object\n  | Array<unknown>\n  | symbol;\n\nexport type SourceType<T = any> =\n  | SourceExecutorType<T>\n  | SourceObjectType<T>\n  | SourceDataType;\n\n/**\n * @url https://silentium-lab.github.io/silentium/#/utils/value\n */\nexport function value<T>(source: SourceType<T>, guest: GuestType<T>) {\n  if (source === undefined || source === null) {\n    throw new Error(\"value didnt receive source argument\");\n  }\n  if (guest === undefined || source === null) {\n    throw new Error(\"value didnt receive guest argument\");\n  }\n  if (typeof source === \"function\") {\n    source(guest);\n  } else if (\n    typeof source === \"object\" &&\n    \"value\" in source &&\n    typeof source.value === \"function\"\n  ) {\n    source.value(guest);\n  } else {\n    give(source as T, guest);\n  }\n\n  return source;\n}\n\n/**\n * @url https://silentium-lab.github.io/silentium/#/utils/is-source\n */\nexport function isSource(mbSource: any): mbSource is SourceType {\n  if (typeof mbSource === \"object\" && typeof mbSource.value === \"function\") {\n    return true;\n  }\n  return mbSource !== null && mbSource !== undefined;\n}\n\n/**\n * @url https://silentium-lab.github.io/silentium/#/source\n */\nexport const source = <T>(source: SourceType<T>) => {\n  if (source === undefined) {\n    throw new Error(\"Source constructor didn't receive executor function\");\n  }\n\n  return (guest: GuestType<T>) => {\n    value(source, guest);\n  };\n};\n","import { source, SourceExecutorType, SourceType } from \"../Source/Source\";\n\ntype GuestIntroduction = \"guest\" | \"patron\";\n\nexport type GuestExecutorType<T = any, This = void> = (value: T) => This;\n\nexport interface GuestObjectType<T = any> {\n  give(value: T): this;\n  introduction?(): GuestIntroduction;\n}\n\nexport type GuestType<T = any> = GuestExecutorType<T> | GuestObjectType<T>;\n\n/**\n * @url https://silentium-lab.github.io/silentium/#/utils/give\n */\nexport function give<T>(\n  data: T,\n  guest?: GuestType<T>,\n): GuestType<T> | SourceExecutorType<T> {\n  if (data === undefined) {\n    throw new Error(\"give didn't receive data argument\");\n  }\n  if (guest === undefined) {\n    return source<T>(data as SourceType<T>) as SourceExecutorType<T>;\n  }\n  if (typeof guest === \"function\") {\n    guest(data);\n  } else {\n    guest.give(data);\n  }\n  return guest;\n}\n\n/**\n * @url https://silentium-lab.github.io/silentium/#/utils/is-guest\n */\nexport function isGuest(mbGuest: any): mbGuest is GuestType {\n  if (mbGuest === undefined) {\n    throw new Error(\"isGuest didnt receive mbGuest argument\");\n  }\n  return typeof mbGuest === \"function\" || typeof mbGuest?.give === \"function\";\n}\n\n/**\n * @url https://silentium-lab.github.io/silentium/#/guest\n */\nexport class Guest<T> implements GuestObjectType<T> {\n  public constructor(private receiver: GuestExecutorType<T>) {\n    if (!receiver) {\n      throw new Error(\"reseiver function was not passed to Guest constructor\");\n    }\n  }\n\n  public give(value: T) {\n    this.receiver(value);\n    return this;\n  }\n}\n","import { give, GuestType } from \"./Guest\";\nimport { GuestDisposableType, MaybeDisposableType } from \"./GuestDisposable\";\n\n/**\n * @url https://silentium-lab.github.io/silentium/#/guest/guest-cast\n */\nexport class GuestCast<T> implements GuestDisposableType<T> {\n  public constructor(\n    private sourceGuest: GuestType<any>,\n    private targetGuest: GuestType<T>,\n  ) {\n    if (sourceGuest === undefined) {\n      throw new Error(\"GuestCast didnt receive sourceGuest argument\");\n    }\n    if (targetGuest === undefined) {\n      throw new Error(\"GuestCast didnt receive targetGuest argument\");\n    }\n  }\n\n  public introduction() {\n    if (typeof this.sourceGuest === \"function\") {\n      return \"guest\";\n    }\n    if (!this.sourceGuest.introduction) {\n      return \"guest\";\n    }\n    return this.sourceGuest.introduction();\n  }\n\n  public give(value: T): this {\n    give(value, this.targetGuest);\n    return this;\n  }\n\n  public disposed(value: T | null): boolean {\n    const maybeDisposable = this.sourceGuest as MaybeDisposableType;\n    return maybeDisposable.disposed ? maybeDisposable.disposed(value) : false;\n  }\n}\n","import { give, GuestObjectType, GuestType } from \"../Guest/Guest\";\nimport { GuestDisposableType } from \"../Guest/GuestDisposable\";\n\nconst poolSets = new Map<PoolType, Set<GuestObjectType>>();\n\n/**\n * @url https://silentium-lab.github.io/silentium/#/utils/patron-pools\n */\nexport const patronPools = (patron: GuestObjectType) => {\n  const pools: PoolType[] = [];\n  poolSets.forEach((pool, poolInstance) => {\n    if (pool.has(patron)) {\n      pools.push(poolInstance);\n    }\n  });\n  return pools;\n};\n\n/**\n * @url https://silentium-lab.github.io/silentium/#/utils/remove-patron-from-pools\n */\nexport const removePatronFromPools = (patron: GuestObjectType) => {\n  if (patron === undefined) {\n    throw new Error(\"removePatronFromPools didnt receive patron argument\");\n  }\n  poolSets.forEach((pool) => {\n    pool.delete(patron);\n  });\n};\n\n/**\n * @url https://silentium-lab.github.io/silentium/#/utils/is-patron-in-pools\n */\nexport const isPatronInPools = (patron: GuestObjectType) => {\n  if (patron === undefined) {\n    throw new Error(\"isPatronInPools didnt receive patron argument\");\n  }\n  let inPool = false;\n  poolSets.forEach((pool) => {\n    if (!inPool) {\n      inPool = pool.has(patron);\n    }\n  });\n  return inPool;\n};\n\nexport interface PoolType<T = any> extends GuestObjectType<T> {\n  add(guest: GuestObjectType<T>): this;\n  distribute(receiving: T, possiblePatron: GuestObjectType<T>): this;\n  remove(patron: GuestObjectType<T>): this;\n  size(): number;\n}\n\n/**\n * @url https://silentium-lab.github.io/silentium/#/patron/patron-pool\n */\nexport class PatronPool<T> implements PoolType<T> {\n  private patrons: Set<GuestObjectType<T>>;\n\n  public give: (value: T) => this;\n\n  public constructor(private initiator: unknown) {\n    this.patrons = new Set<GuestObjectType<T>>();\n    poolSets.set(this, this.patrons);\n    const doReceive = (value: T) => {\n      this.patrons.forEach((target) => {\n        this.sendValueToGuest(value, target);\n      });\n    };\n    this.give = (value: T) => {\n      doReceive(value);\n      return this;\n    };\n  }\n\n  public size(): number {\n    return this.patrons.size;\n  }\n\n  public add(shouldBePatron: GuestType<T>) {\n    if (!shouldBePatron) {\n      throw new Error(\"PatronPool add method received nothing!\");\n    }\n    if (\n      typeof shouldBePatron !== \"function\" &&\n      shouldBePatron.introduction &&\n      shouldBePatron.introduction() === \"patron\"\n    ) {\n      this.patrons.add(shouldBePatron);\n    }\n    return this;\n  }\n\n  public remove(patron: GuestObjectType<T>) {\n    this.patrons.delete(patron);\n    return this;\n  }\n\n  public distribute(receiving: T, possiblePatron: GuestType<T>): this {\n    this.add(possiblePatron);\n    this.sendValueToGuest(receiving, possiblePatron);\n    return this;\n  }\n\n  private sendValueToGuest(value: T, guest: GuestType<T>) {\n    const isDisposed = this.guestDisposed(value, guest);\n\n    if (!isDisposed) {\n      give(value, guest);\n    }\n  }\n\n  private guestDisposed(value: T, guest: GuestType<T>) {\n    if ((guest as GuestDisposableType).disposed?.(value)) {\n      this.remove(guest as GuestObjectType);\n      return true;\n    }\n\n    return false;\n  }\n}\n","import { PatronPool, PoolType } from \"../Patron/PatronPool\";\nimport { give, GuestObjectType, GuestType } from \"./Guest\";\n\n/**\n * @url https://silentium-lab.github.io/silentium/#/guest/guest-pool\n */\nexport class GuestPool<T> implements GuestObjectType<T>, PoolType<T> {\n  private guests = new Set<GuestType<T>>();\n\n  private patronPool: PatronPool<T>;\n\n  public constructor(initiator: unknown) {\n    this.patronPool = new PatronPool(initiator);\n  }\n\n  public give(value: T): this {\n    this.deliverToGuests(value);\n    this.patronPool.give(value);\n    return this;\n  }\n\n  public add(guest: GuestType<T>): this {\n    if (\n      typeof guest === \"function\" ||\n      !guest.introduction ||\n      guest.introduction() === \"guest\"\n    ) {\n      this.guests.add(guest);\n    }\n    this.patronPool.add(guest);\n    return this;\n  }\n\n  public remove(patron: GuestObjectType<T>): this {\n    this.guests.delete(patron);\n    this.patronPool.remove(patron);\n    return this;\n  }\n\n  public distribute(receiving: T, possiblePatron: GuestObjectType<T>): this {\n    this.add(possiblePatron);\n    this.give(receiving);\n    return this;\n  }\n\n  public size() {\n    return this.patronPool.size() + this.guests.size;\n  }\n\n  private deliverToGuests(value: T) {\n    this.guests.forEach((target) => {\n      give(value, target);\n    });\n    this.guests.clear();\n  }\n}\n","import { GuestObjectType } from \"./Guest\";\n\nexport interface GuestValueType<T = any> extends GuestObjectType<T> {\n  value(): T;\n}\n\n/**\n * @url https://silentium-lab.github.io/silentium/#/guest/guest-sync\n */\nexport class GuestSync<T> implements GuestValueType<T> {\n  public constructor(private theValue?: T) {}\n\n  public give(value: T): this {\n    this.theValue = value;\n    return this;\n  }\n\n  public value() {\n    if (this.theValue === undefined) {\n      throw new Error(\"no value in GuestSync!\");\n    }\n    return this.theValue;\n  }\n}\n","import { Guest, GuestType } from \"./Guest\";\nimport { GuestDisposableType, MaybeDisposableType } from \"./GuestDisposable\";\n\n/**\n * @url https://silentium-lab.github.io/silentium/#/guest/guest-object\n */\nexport class GuestObject<T> implements GuestDisposableType<T> {\n  public constructor(private baseGuest: GuestType<T>) {\n    if (baseGuest === undefined) {\n      throw new Error(\"GuestObject didnt receive baseGuest argument\");\n    }\n  }\n\n  public give(value: T): this {\n    let guest = this.baseGuest;\n    if (typeof guest === \"function\") {\n      guest = new Guest(guest);\n    }\n    guest.give(value);\n    return this;\n  }\n\n  public introduction() {\n    if (typeof this.baseGuest === \"function\" || !this.baseGuest.introduction) {\n      return \"guest\";\n    }\n    return this.baseGuest.introduction();\n  }\n\n  public disposed(value: T | null): boolean {\n    const maybeDisposable = this.baseGuest as MaybeDisposableType;\n    return maybeDisposable.disposed ? maybeDisposable.disposed(value) : false;\n  }\n}\n","import { give, GuestObjectType, GuestType } from \"./Guest\";\n\nexport interface GuestDisposableType<T = any> extends GuestObjectType<T> {\n  disposed(value: T | null): boolean;\n}\n\nexport type MaybeDisposableType<T = any> = Partial<GuestDisposableType<T>>;\n\n/**\n * @url https://silentium-lab.github.io/silentium/#/guest/guest-disposable\n */\nexport class GuestDisposable<T> implements GuestDisposableType<T> {\n  public constructor(\n    private guest: GuestType,\n    private disposeCheck: (value: T | null) => boolean,\n  ) {\n    if (guest === undefined) {\n      throw new Error(\"GuestDisposable didnt receive guest argument\");\n    }\n    if (disposeCheck === undefined) {\n      throw new Error(\"GuestDisposable didnt receive disposeCheck argument\");\n    }\n  }\n\n  public disposed(value: T | null): boolean {\n    return this.disposeCheck(value);\n  }\n\n  public give(value: T): this {\n    give(value, this.guest);\n    return this;\n  }\n}\n","import { give, GuestObjectType, GuestType } from \"../Guest/Guest\";\n\n/**\n * @url https://silentium-lab.github.io/silentium/#/guest/guest-applied\n */\nexport class GuestApplied<T, R> implements GuestObjectType<T> {\n  public constructor(\n    private baseGuest: GuestType<R>,\n    private applier: (value: T) => R,\n  ) {}\n\n  public give(value: T): this {\n    give(this.applier(value), this.baseGuest);\n    return this;\n  }\n}\n","import {\n  give,\n  GuestExecutorType,\n  GuestObjectType,\n  GuestType,\n} from \"../Guest/Guest\";\n\n/**\n * @url https://silentium-lab.github.io/silentium/#/guest/guest-executor-applied\n */\nexport class GuestExecutorApplied<T> implements GuestObjectType<T> {\n  public give: GuestExecutorType<T, this>;\n\n  public constructor(\n    baseGuest: GuestType<T>,\n    applier: (executor: GuestExecutorType) => GuestExecutorType,\n  ) {\n    this.give = applier((v) => give(v, baseGuest)) as GuestExecutorType<\n      T,\n      this\n    >;\n  }\n}\n","import { give, GuestType } from \"../Guest/Guest\";\nimport { GuestDisposableType } from \"../Guest/GuestDisposable\";\n\n/**\n * @url https://silentium-lab.github.io/silentium/#/patron\n */\nexport class Patron<T> implements GuestDisposableType<T> {\n  public constructor(private willBePatron: GuestType<T>) {\n    if (willBePatron === undefined) {\n      throw new Error(\"Patron didnt receive willBePatron argument\");\n    }\n  }\n\n  public introduction() {\n    return \"patron\" as const;\n  }\n\n  public give(value: T): this {\n    give(value, this.willBePatron);\n    return this;\n  }\n\n  public disposed(value: T | null): boolean {\n    const maybeDisposable = this.willBePatron as GuestDisposableType;\n    return maybeDisposable?.disposed?.(value) || false;\n  }\n}\n\n/**\n * @url https://silentium-lab.github.io/silentium/#/utils/is-patron\n */\nexport const isPatron = (guest: GuestType): guest is Patron<unknown> =>\n  typeof guest === \"object\" &&\n  guest !== null &&\n  guest?.introduction?.() === \"patron\";\n","import { give, GuestType } from \"../Guest/Guest\";\nimport {\n  GuestDisposableType,\n  MaybeDisposableType,\n} from \"../Guest/GuestDisposable\";\n\n/**\n * @url https://silentium-lab.github.io/silentium/#/patron/patron-once\n */\nexport class PatronOnce<T> implements GuestDisposableType<T> {\n  private received = false;\n\n  public constructor(private baseGuest: GuestType<T>) {\n    if (baseGuest === undefined) {\n      throw new Error(\"PatronOnce didnt receive baseGuest argument\");\n    }\n  }\n\n  public introduction() {\n    return \"patron\" as const;\n  }\n\n  public give(value: T): this {\n    if (!this.received) {\n      this.received = true;\n      give(value, this.baseGuest);\n    }\n    return this;\n  }\n\n  public disposed(value: T | null): boolean {\n    if (this.received) {\n      return true;\n    }\n    const maybeDisposable = this.baseGuest as MaybeDisposableType;\n    return maybeDisposable.disposed ? maybeDisposable.disposed(value) : false;\n  }\n}\n","import { GuestObjectType, GuestType } from \"../Guest/Guest\";\nimport { GuestApplied } from \"../Guest/GuestApplied\";\n\n/**\n * @url https://silentium-lab.github.io/silentium/#/patron/patron-applied\n */\nexport class PatronApplied<T, R> implements GuestObjectType<T> {\n  private guestApplied: GuestApplied<T, R>;\n\n  public constructor(baseGuest: GuestType<R>, applier: (value: T) => R) {\n    this.guestApplied = new GuestApplied(baseGuest, applier);\n  }\n\n  public give(value: T): this {\n    this.guestApplied.give(value);\n    return this;\n  }\n\n  public introduction(): \"guest\" | \"patron\" {\n    return \"patron\";\n  }\n}\n","import { GuestExecutorType, GuestObjectType, GuestType } from \"../Guest/Guest\";\nimport { GuestExecutorApplied } from \"../Guest/GuestExecutorApplied\";\n\n/**\n * @url https://silentium-lab.github.io/silentium/#/patron/patron-executor-applied\n */\nexport class PatronExecutorApplied<T> implements GuestObjectType<T> {\n  private guestApplied: GuestExecutorApplied<T>;\n\n  public constructor(\n    baseGuest: GuestType<T>,\n    applier: (executor: GuestExecutorType) => GuestExecutorType,\n  ) {\n    this.guestApplied = new GuestExecutorApplied(baseGuest, applier);\n  }\n\n  public give(value: T): this {\n    this.guestApplied.give(value);\n    return this;\n  }\n\n  public introduction(): \"guest\" | \"patron\" {\n    return \"patron\";\n  }\n}\n","import { Guest, GuestObjectType, GuestType } from \"../Guest/Guest\";\nimport { isSource, SourceObjectType, SourceType, value } from \"./Source\";\nimport { PatronPool } from \"../Patron/PatronPool\";\nimport { isPatron } from \"../Patron/Patron\";\nimport { PatronOnce } from \"../Patron/PatronOnce\";\n\nexport interface PoolAwareType<T = any> {\n  pool(): PatronPool<T>;\n}\n\n/**\n * @url https://silentium-lab.github.io/silentium/#/source/source-changeable\n */\nexport type SourceChangeableType<T = any> = SourceObjectType<T> &\n  GuestObjectType<T> &\n  PoolAwareType<T>;\n\nexport class SourceChangeable<T> implements SourceChangeableType<T> {\n  private thePool = new PatronPool(this);\n  private theEmptyPool = new PatronPool(this);\n  private isEmpty: boolean;\n  private sourceDocument?: T;\n\n  public constructor(sourceDocument?: T | SourceType<T>) {\n    this.isEmpty = sourceDocument === undefined;\n\n    if (sourceDocument !== undefined && isSource(sourceDocument)) {\n      value(\n        sourceDocument,\n        new PatronOnce((unwrappedSourceDocument) => {\n          this.isEmpty = unwrappedSourceDocument === undefined;\n          this.sourceDocument = unwrappedSourceDocument;\n        }),\n      );\n    } else {\n      this.isEmpty = sourceDocument === undefined;\n      this.sourceDocument = sourceDocument;\n    }\n  }\n\n  public pool() {\n    return this.thePool;\n  }\n\n  public give(value: T): this {\n    this.isEmpty = false;\n    this.sourceDocument = value;\n    this.thePool.give(this.sourceDocument);\n    this.theEmptyPool.give(this.sourceDocument);\n    return this;\n  }\n\n  public value(guest: GuestType<T>): this {\n    if (this.isEmpty) {\n      if (isPatron(guest)) {\n        this.theEmptyPool.add(guest);\n      }\n      return this;\n    }\n\n    if (typeof guest === \"function\") {\n      this.thePool.distribute(this.sourceDocument, new Guest(guest));\n    } else {\n      this.thePool.distribute(this.sourceDocument, guest);\n    }\n\n    return this;\n  }\n\n  public filled() {\n    return !this.isEmpty;\n  }\n}\n","import { SourceObjectType } from \"./Source\";\nimport { SourceChangeable } from \"./SourceChangeable\";\nimport { Guest, GuestObjectType, GuestType } from \"../Guest/Guest\";\nimport { GuestCast } from \"../Guest/GuestCast\";\nimport { GuestObject } from \"../Guest/GuestObject\";\nimport { GuestPool } from \"../Guest/GuestPool\";\n\nexport interface SourceAllType<T = any> extends SourceObjectType<T> {\n  valueArray(guest: GuestObjectType<T>): this;\n  guestKey<R>(key: string): GuestObjectType<R>;\n}\n\n/**\n * @url https://silentium-lab.github.io/silentium/#/source/source-all\n */\nexport class SourceAll<T> implements SourceAllType<T> {\n  private theAll: SourceChangeable<Record<string, unknown>>;\n\n  private keysKnown: Set<string>;\n\n  private keysFilled = new Set();\n\n  private filledAllPool = new GuestPool(this);\n\n  public constructor(initialKnownKeys: string[] = []) {\n    this.theAll = new SourceChangeable<Record<string, unknown>>({});\n    this.keysKnown = new Set(initialKnownKeys);\n  }\n\n  public valueArray(guest: GuestType<T>) {\n    const guestObject = new GuestObject(guest);\n    this.filledAllPool.add(\n      new GuestCast(guestObject, (value: Record<string, unknown>) => {\n        guestObject.give(Object.values(value) as T);\n      }),\n    );\n    if (this.isAllFilled()) {\n      this.theAll.value(\n        new Guest((all: Record<string, unknown>) => {\n          this.filledAllPool.give(Object.values(all));\n        }),\n      );\n    }\n    return this;\n  }\n\n  public value(guest: GuestType<T>) {\n    const guestObject = new GuestObject(guest);\n    if (this.isAllFilled()) {\n      this.filledAllPool.add(guestObject);\n      this.theAll.value(\n        new Guest((all) => {\n          this.filledAllPool.give(all);\n        }),\n      );\n    } else {\n      this.filledAllPool.add(guestObject);\n    }\n    return this;\n  }\n\n  public guestKey<R>(key: string): GuestObjectType<R> {\n    this.keysKnown.add(key);\n    return new Guest((value) => {\n      this.theAll.value(\n        new Guest((all: Record<string, unknown>) => {\n          this.keysFilled.add(key);\n          const lastAll = {\n            ...all,\n            [key]: value,\n          };\n          this.theAll.give(lastAll);\n          if (this.isAllFilled()) {\n            this.filledAllPool.give(lastAll);\n          }\n        }),\n      );\n    });\n  }\n\n  private isAllFilled() {\n    return (\n      this.keysFilled.size > 0 && this.keysFilled.size === this.keysKnown.size\n    );\n  }\n}\n","import { SourceChangeable } from \"./SourceChangeable\";\nimport { give, GuestType } from \"../Guest/Guest\";\nimport { GuestCast } from \"../Guest/GuestCast\";\nimport { PatronOnce } from \"../Patron/PatronOnce\";\nimport { PrivateType } from \"../Private/Private\";\nimport { isSource, SourceObjectType, SourceType, value } from \"./Source\";\nimport { SourceAll } from \"./SourceAll\";\n\n/**\n * @url https://silentium-lab.github.io/silentium/#/source/source-sequence\n */\nexport class SourceSequence<T, TG> implements SourceObjectType<TG[]> {\n  public constructor(\n    private baseSource: SourceType<T[]>,\n    private targetSource: PrivateType<SourceType<TG>>,\n  ) {\n    if (baseSource === undefined) {\n      throw new Error(\"SourceSequence didn't receive baseSource argument\");\n    }\n    if (targetSource === undefined) {\n      throw new Error(\"SourceSequence didn't receive targetSource argument\");\n    }\n  }\n\n  public value(guest: GuestType<TG[]>) {\n    const all = new SourceAll<TG[]>();\n    const sequenceSource = new SourceChangeable();\n    const targetSource = this.targetSource.get(sequenceSource);\n\n    value(\n      this.baseSource,\n      new GuestCast(guest, (theValue) => {\n        let index = 0;\n\n        const nextItemHandle = () => {\n          if (theValue[index + 1] !== undefined) {\n            index = index + 1;\n            handle();\n          } else {\n            all.valueArray(guest);\n          }\n        };\n\n        function handle() {\n          sequenceSource.give(null);\n          const nextValue = theValue[index];\n          if (isSource(nextValue)) {\n            value(\n              nextValue,\n              new PatronOnce((theNextValue) => {\n                sequenceSource.give(theNextValue);\n                value(targetSource, all.guestKey(index.toString()));\n                nextItemHandle();\n              }),\n            );\n          } else {\n            sequenceSource.give(nextValue);\n            value(targetSource, all.guestKey(index.toString()));\n            nextItemHandle();\n          }\n        }\n\n        if (theValue[index] !== undefined) {\n          handle();\n        } else {\n          give([], guest);\n        }\n      }),\n    );\n    return this;\n  }\n}\n","import { GuestType } from \"../Guest/Guest\";\nimport { GuestCast } from \"../Guest/GuestCast\";\nimport { PrivateType } from \"../Private/Private\";\nimport { SourceObjectType, SourceType, value } from \"./Source\";\nimport { SourceAll } from \"./SourceAll\";\n\n/**\n * @url https://silentium-lab.github.io/silentium/#/source/source-map\n */\nexport class SourceMap<T, TG> implements SourceObjectType<TG[]> {\n  public constructor(\n    private baseSource: SourceType<T[]>,\n    private targetSource: PrivateType<SourceType<TG>>,\n  ) {\n    if (baseSource === undefined) {\n      throw new Error(\"SourceMap didnt receive baseSource argument\");\n    }\n    if (targetSource === undefined) {\n      throw new Error(\"SourceMap didnt receive targetSource argument\");\n    }\n  }\n\n  public value(guest: GuestType<TG[]>) {\n    const all = new SourceAll();\n    value(\n      this.baseSource,\n      new GuestCast(<GuestType>guest, (theValue) => {\n        theValue.forEach((val, index) => {\n          const targetSource = this.targetSource.get(val);\n          value(targetSource, all.guestKey(index.toString()));\n        });\n      }),\n    );\n    all.valueArray(<GuestType>guest);\n    return this;\n  }\n}\n","import { give, GuestType } from \"../Guest/Guest\";\nimport { SourceObjectType, SourceType, value } from \"./Source\";\nimport { GuestCast } from \"../Guest/GuestCast\";\n\n/**\n * @url https://silentium-lab.github.io/silentium/#/source/source-race\n */\nexport class SourceRace<T> implements SourceObjectType<T> {\n  public constructor(private sources: SourceType<T>[]) {\n    if (sources === undefined) {\n      throw new Error(\"SourceRace didnt receive sources argument\");\n    }\n  }\n\n  public value(guest: GuestType<T>): this {\n    let connectedWithSource: SourceType | null = null;\n    this.sources.forEach((source) => {\n      value(\n        source,\n        new GuestCast(<GuestType>guest, (value) => {\n          if (!connectedWithSource || connectedWithSource === source) {\n            give(value as T, guest);\n            connectedWithSource = source;\n          }\n        }),\n      );\n    });\n    return this;\n  }\n}\n","import { give, GuestType } from \"../Guest/Guest\";\nimport { SourceType, value } from \"./Source\";\nimport { PatronPool } from \"../Patron/PatronPool\";\nimport { SourceChangeableType } from \"./SourceChangeable\";\n\n/**\n * @url https://silentium-lab.github.io/silentium/#/source/source-dynamic\n */\nexport class SourceDynamic<T = unknown> implements SourceChangeableType<T> {\n  public constructor(\n    private baseGuest: GuestType<T>,\n    private baseSource: SourceType<T>,\n  ) {\n    if (baseGuest === undefined) {\n      throw new Error(\"SourceDynamic didnt receive baseGuest argument\");\n    }\n    if (baseSource === undefined) {\n      throw new Error(\"SourceDynamic didnt receive baseSource argument\");\n    }\n  }\n\n  public value(guest: GuestType<T>) {\n    value(this.baseSource, guest);\n    return this;\n  }\n\n  public give(value: T) {\n    give(value, this.baseGuest);\n    return this;\n  }\n\n  public pool(): PatronPool<T> {\n    throw Error(\"No pool in SourceDynamic\");\n  }\n}\n","import { give, GuestType } from \"../Guest/Guest\";\nimport { GuestCast } from \"../Guest/GuestCast\";\nimport { SourceObjectType, SourceType, value } from \"../Source/Source\";\n\n/**\n * @url https://silentium-lab.github.io/silentium/#/source/source-applied\n */\nexport class SourceApplied<T, R> implements SourceObjectType<R> {\n  public constructor(\n    private baseSource: SourceType<T>,\n    private applier: (v: T) => R,\n  ) {}\n\n  public value(g: GuestType<R>) {\n    value(\n      this.baseSource,\n      new GuestCast(g, (v) => {\n        give(this.applier(v), g);\n      }),\n    );\n    return this;\n  }\n}\n","import {\n  SourceExecutorType,\n  SourceObjectType,\n  SourceType,\n  value,\n} from \"../Source/Source\";\n\n/**\n * @url https://silentium-lab.github.io/silentium/#/source/source-executor-applied\n */\nexport class SourceExecutorApplied<T> implements SourceObjectType<T> {\n  public value: SourceExecutorType<T>;\n\n  public constructor(\n    source: SourceType<T>,\n    applier: (executor: SourceExecutorType<T>) => SourceExecutorType<T>,\n  ) {\n    this.value = applier((g) => {\n      value(source, g);\n    });\n  }\n}\n","import { give, GuestType } from \"../Guest/Guest\";\nimport { GuestCast } from \"../Guest/GuestCast\";\nimport { SourceObjectType, SourceType, value } from \"../Source/Source\";\n\n/**\n * @url https://silentium-lab.github.io/silentium/#/source/source-filtered\n */\nexport class SourceFiltered<T> implements SourceObjectType<T> {\n  public constructor(\n    private baseSource: SourceType<T>,\n    private predicate: (v: T) => boolean,\n  ) {}\n\n  public value(g: GuestType<T>) {\n    value(\n      this.baseSource,\n      new GuestCast(g, (v) => {\n        if (this.predicate(v) === true) {\n          give(v, g);\n        }\n      }),\n    );\n    return this;\n  }\n}\n","import { GuestType } from \"../Guest/Guest\";\nimport { PatronPool } from \"../Patron/PatronPool\";\nimport { value } from \"./Source\";\nimport { SourceChangeable, SourceChangeableType } from \"./SourceChangeable\";\n\n/**\n * @url https://silentium-lab.github.io/silentium/#/source/source-once\n */\nexport class SourceOnce<T> implements SourceChangeableType<T> {\n  private source: SourceChangeable<T>;\n\n  public constructor(initialValue?: T) {\n    this.source = new SourceChangeable(initialValue);\n  }\n\n  public value(guest: GuestType<T>) {\n    value(this.source, guest);\n    return this;\n  }\n\n  public give(value: T): this {\n    if (!this.source.filled()) {\n      this.source.give(value);\n    }\n    return this;\n  }\n\n  public pool(): PatronPool<T> {\n    return this.source.pool();\n  }\n}\n","import { GuestType } from \"../Guest/Guest\";\nimport { GuestSync } from \"../Guest/GuestSync\";\nimport { Patron } from \"../Patron/Patron\";\nimport { SourceObjectType, SourceType, value } from \"../Source/Source\";\n\n/**\n * @url https://silentium-lab.github.io/silentium/#/source/source-sync\n */\nexport class SourceSync<T> implements SourceObjectType<T> {\n  private syncGuest = new GuestSync();\n\n  public constructor(private baseSource: SourceType<T>) {\n    value(baseSource, new Patron(this.syncGuest));\n  }\n\n  public value(guest: GuestType<T>) {\n    value(this.baseSource, guest);\n    return this;\n  }\n\n  public syncValue() {\n    try {\n      return this.syncGuest.value();\n    } catch {\n      throw new Error(\"No value in SourceSync\");\n    }\n  }\n}\n","import { PrivateType } from \"./Private\";\n\ninterface Constructable<T> {\n  new (...args: unknown[]): T;\n}\n\ninterface Prototyped<T> {\n  prototype: T;\n}\n\nexport class PrivateClass<T> implements PrivateType<T> {\n  public constructor(\n    private constructorFn: Prototyped<T>,\n    private modules: Record<string, unknown> = {},\n  ) {\n    if (constructorFn === undefined) {\n      throw new Error(\"PrivateClass didnt receive constructorFn argument\");\n    }\n  }\n\n  public get<R extends unknown[], CT = null>(\n    ...args: R\n  ): CT extends null ? T : CT {\n    return new (this.constructorFn as Constructable<T>)(\n      ...args,\n      this.modules,\n    ) as CT extends null ? T : CT;\n  }\n}\n","/**\n * @url https://silentium-lab.github.io/silentium/#/utils/private\n */\nexport interface PrivateType<T> {\n  get<R extends unknown[], CT = null>(...args: R): CT extends null ? T : CT;\n}\n\nexport class Private<T> implements PrivateType<T> {\n  public constructor(private buildingFn: (...args: any[]) => T) {\n    if (buildingFn === undefined) {\n      throw new Error(\"Private didnt receive buildingFn argument\");\n    }\n  }\n\n  public get<R extends unknown[], CT = null>(\n    ...args: R\n  ): CT extends null ? T : CT {\n    return this.buildingFn(...args) as CT extends null ? T : CT;\n  }\n}\n"],"names":["value","source","guest","Error","give","isSource","mbSource","data","isGuest","mbGuest","Guest","constructor","receiver","this","GuestCast","sourceGuest","targetGuest","introduction","disposed","maybeDisposable","poolSets","Map","patronPools","patron","pools","forEach","pool","poolInstance","has","push","removePatronFromPools","delete","isPatronInPools","inPool","PatronPool","initiator","__publicField","patrons","Set","set","doReceive","target","sendValueToGuest","size","add","shouldBePatron","remove","distribute","receiving","possiblePatron","guestDisposed","GuestPool","patronPool","deliverToGuests","guests","clear","GuestSync","theValue","GuestObject","baseGuest","GuestDisposable","disposeCheck","GuestApplied","applier","GuestExecutorApplied","v","Patron","willBePatron","isPatron","PatronOnce","received","PatronApplied","guestApplied","PatronExecutorApplied","SourceChangeable","sourceDocument","isEmpty","unwrappedSourceDocument","thePool","theEmptyPool","filled","SourceAll","initialKnownKeys","theAll","keysKnown","valueArray","guestObject","filledAllPool","Object","values","isAllFilled","all","guestKey","key","keysFilled","lastAll","SourceSequence","baseSource","targetSource","sequenceSource","get","index","nextItemHandle","handle","nextValue","theNextValue","toString","SourceMap","val","SourceRace","sources","connectedWithSource","SourceDynamic","SourceApplied","g","SourceExecutorApplied","SourceFiltered","predicate","SourceOnce","initialValue","SourceSync","syncGuest","syncValue","PrivateClass","constructorFn","modules","args","Private","buildingFn"],"mappings":"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"}