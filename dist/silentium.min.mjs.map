{"version":3,"file":"silentium.min.mjs","sources":["../src/Source/Source.ts","../src/Guest/Guest.ts","../src/Guest/GuestCast.ts","../src/Guest/GuestSync.ts","../src/Guest/GuestDisposable.ts","../src/Guest/GuestApplied.ts","../src/Guest/GuestExecutorApplied.ts","../src/Patron/Patron.ts","../src/Patron/PatronOnce.ts","../src/Patron/PatronPool.ts","../src/Patron/PatronApplied.ts","../src/Patron/PatronExecutorApplied.ts","../src/Source/SourceSync.ts","../src/Source/SourceChangeable.ts","../src/Source/SourceAll.ts","../src/Source/SourceSequence.ts","../src/Source/SourceMap.ts","../src/Source/SourceRace.ts","../src/Source/SourceChain.ts","../src/Source/SourceDynamic.ts","../src/Source/SourceApplied.ts","../src/Source/SourceExecutorApplied.ts","../src/Source/SourceFiltered.ts","../src/Source/SourceOnce.ts","../src/Source/SourceCombined.ts","../src/Source/SourceResettable.ts","../src/Source/SourceAny.ts","../src/Source/SourceLazy.ts","../src/Source/SourceDestroyable.ts","../src/Lazy/LazyClass.ts","../src/Lazy/Lazy.ts"],"sourcesContent":["import { give, GuestType } from \"../Guest/Guest\";\n\nexport type SourceExecutorType<T, R = unknown> = (guest: GuestType<T>) => R;\n\nexport interface SourceObjectType<T> {\n  value: SourceExecutorType<T>;\n}\n\nexport type SourceDataType<T> = Extract<\n  T,\n  string | number | boolean | Date | object | Array<unknown> | symbol\n>;\n\nexport type SourceType<T = any> =\n  | SourceExecutorType<T>\n  | SourceObjectType<T>\n  | SourceDataType<T>;\n\nconst valueExact = <T>(source: SourceType<T>, guest: GuestType<T>) => {\n  if (source === undefined || source === null) {\n    throw new Error(\"value didn't receive source argument\");\n  }\n  if (guest === undefined || source === null) {\n    throw new Error(\"value didn't receive guest argument\");\n  }\n  if (typeof source === \"function\") {\n    source(guest);\n  } else if (\n    typeof source === \"object\" &&\n    \"value\" in source &&\n    typeof source.value === \"function\"\n  ) {\n    source.value(guest);\n  } else {\n    give(source as T, guest);\n  }\n\n  return source;\n};\n\n/**\n * Helps to connect source and guest, if you need to get value in guest from source\n * helpful because we don't know what shape of source do we have, it can be function or object or primitive\n * @url https://silentium-lab.github.io/silentium/#/utils/value\n */\nexport const value = <T>(\n  source: SourceType<T>,\n  guest: GuestType<T> | GuestType<T>[],\n) => {\n  if (source === undefined || source === null) {\n    throw new Error(\"value didn't receive source argument\");\n  }\n  if (guest === undefined || source === null) {\n    throw new Error(\"value didn't receive guest argument\");\n  }\n\n  if (Array.isArray(guest)) {\n    guest.forEach((currentGuest) => {\n      valueExact(source, currentGuest);\n    });\n  } else {\n    valueExact(source, guest);\n  }\n\n  return source;\n};\n\n/**\n * Helps to check what some information is of source shape\n * @url https://silentium-lab.github.io/silentium/#/utils/is-source\n */\nexport const isSource = <T>(\n  mbSource: T | SourceType<T>,\n): mbSource is SourceType<T> => {\n  if (\n    mbSource !== null &&\n    typeof mbSource === \"object\" &&\n    \"value\" in mbSource &&\n    typeof mbSource.value === \"function\"\n  ) {\n    return true;\n  }\n  return mbSource !== null && mbSource !== undefined;\n};\n\n/**\n * Represents source as function\n * @url https://silentium-lab.github.io/silentium/#/source\n */\nexport const source = <T>(source: SourceType<T>): SourceExecutorType<T> => {\n  if (source === undefined) {\n    throw new Error(\"Source constructor didn't receive executor function\");\n  }\n\n  return (guest: GuestType<T>) => {\n    value(source, guest);\n  };\n};\n","import { source, SourceExecutorType, SourceType } from \"../Source/Source\";\n\ntype GuestIntroduction = \"guest\" | \"patron\";\n\nexport type GuestExecutorType<T = any, This = void> = (value: T) => This;\n\nexport interface GuestObjectType<T = any> {\n  give(value: T): this;\n  introduction?(): GuestIntroduction;\n}\n\nexport type GuestType<T = any> = GuestExecutorType<T> | GuestObjectType<T>;\n\n/**\n * Helps to give data to guest, guests can be of different shapes\n * function guest or object guest\n * @url https://silentium-lab.github.io/silentium/#/utils/give\n */\nexport const give = <T>(\n  data: T,\n  guest?: GuestType<T>,\n): GuestType<T> | SourceExecutorType<T> => {\n  if (data === undefined) {\n    throw new Error(\"give didn't receive data argument\");\n  }\n  if (guest === undefined) {\n    return source<T>(data as SourceType<T>) as SourceExecutorType<T>;\n  }\n  if (typeof guest === \"function\") {\n    guest(data);\n  } else {\n    guest.give(data);\n  }\n  return guest;\n};\n\n/**\n * Helps to check if mbGuest can be used to retrieve value\n * @url https://silentium-lab.github.io/silentium/#/utils/is-guest\n */\nexport const isGuest = (mbGuest: any): mbGuest is GuestType => {\n  if (mbGuest === undefined) {\n    throw new Error(\"isGuest didnt receive mbGuest argument\");\n  }\n  return typeof mbGuest === \"function\" || typeof mbGuest?.give === \"function\";\n};\n\n/**\n * Helps to create guest of object type\n * @url https://silentium-lab.github.io/silentium/#/guest\n */\nexport const guest = <T>(receiver: GuestExecutorType<T>) => {\n  if (!receiver) {\n    throw new Error(\"receiver function was not passed to Guest constructor\");\n  }\n  const result = {\n    give(value: T) {\n      receiver(value);\n      return result;\n    },\n  };\n  return result;\n};\n\n/**\n * First visit of source, useful for detached sources\n * This function is important because code of source must executes\n * only after guest visited source, sources are lazy!\n * @url https://silentium-lab.github.io/silentium/#/utils/first-visit\n */\nexport const firstVisit = (afterFirstVisit: () => void) => {\n  let isVisited = false;\n  return () => {\n    if (!isVisited) {\n      afterFirstVisit();\n    }\n    isVisited = true;\n  };\n};\n","import { give, GuestType } from \"./Guest\";\nimport { GuestDisposableType, MaybeDisposableType } from \"./GuestDisposable\";\n\n/**\n * Helps to inherit guest behavior, its introduction and dispose settings\n * @url https://silentium-lab.github.io/silentium/#/guest/guest-cast\n */\nexport const guestCast = <T>(\n  sourceGuest: GuestType<any>,\n  targetGuest: GuestType<T>,\n): GuestDisposableType<T> => {\n  if (sourceGuest === undefined) {\n    throw new Error(\"GuestCast didn't receive sourceGuest argument\");\n  }\n  if (targetGuest === undefined) {\n    throw new Error(\"GuestCast didn't receive targetGuest argument\");\n  }\n\n  const result = {\n    disposed(value: T | null): boolean {\n      const maybeDisposable = sourceGuest as MaybeDisposableType;\n      return maybeDisposable.disposed ? maybeDisposable.disposed(value) : false;\n    },\n    give(value: T) {\n      give(value, targetGuest);\n      return result;\n    },\n    introduction() {\n      if (typeof sourceGuest === \"function\") {\n        return \"guest\";\n      }\n      if (!sourceGuest.introduction) {\n        return \"guest\";\n      }\n      return sourceGuest.introduction();\n    },\n  };\n\n  return result;\n};\n","import { GuestObjectType } from \"./Guest\";\n\nexport interface GuestValueType<T = any> extends GuestObjectType<T> {\n  value(): T;\n}\n\n/**\n * @url https://silentium-lab.github.io/silentium/#/guest/guest-sync\n */\nexport const guestSync = <T>(theValue?: T): GuestValueType<T> => {\n  const result = {\n    give(value: T) {\n      theValue = value;\n      return result;\n    },\n    value() {\n      if (theValue === undefined) {\n        throw new Error(\"no value in GuestSync!\");\n      }\n      return theValue;\n    },\n  };\n\n  return result;\n};\n","import { give, GuestObjectType, GuestType } from \"./Guest\";\n\nexport interface GuestDisposableType<T = any> extends GuestObjectType<T> {\n  disposed(value: T | null): boolean;\n}\n\nexport type MaybeDisposableType<T = any> = Partial<GuestDisposableType<T>>;\n\n/**\n * Connects to guest logic what can tell PatronPool\n * what guest don't need to receive new values\n * @url https://silentium-lab.github.io/silentium/#/guest/guest-disposable\n */\nexport const guestDisposable = <T>(\n  guest: GuestType,\n  disposeCheck: (value: T | null) => boolean,\n): GuestDisposableType<T> => {\n  if (guest === undefined) {\n    throw new Error(\"GuestDisposable didn't receive guest argument\");\n  }\n  if (disposeCheck === undefined) {\n    throw new Error(\"GuestDisposable didn't receive disposeCheck argument\");\n  }\n\n  const result = {\n    disposed(value: T | null): boolean {\n      return disposeCheck(value);\n    },\n    give(value: T) {\n      give(value, guest);\n      return result;\n    },\n  };\n\n  return result;\n};\n","import { give, GuestObjectType, GuestType } from \"../Guest/Guest\";\n\n/**\n * Helps to apply function to value before baseGuest will receive it\n * @url https://silentium-lab.github.io/silentium/#/guest/guest-applied\n */\nexport const guestApplied = <T, R>(\n  baseGuest: GuestType<R>,\n  applier: (value: T) => R,\n): GuestObjectType<T> => {\n  const result = {\n    give(value: T) {\n      give(applier(value), baseGuest);\n      return result;\n    },\n  };\n  return result;\n};\n","import {\n  give,\n  GuestExecutorType,\n  GuestObjectType,\n  GuestType,\n} from \"../Guest/Guest\";\n\n/**\n * Apply function to guest function of receiving value, useful for debouncing or throttling\n * @url https://silentium-lab.github.io/silentium/#/guest/guest-executor-applied\n */\nexport const guestExecutorApplied = <T>(\n  baseGuest: GuestType<T>,\n  applier: (executor: GuestExecutorType<T>) => GuestExecutorType<T>,\n): GuestObjectType<T> => {\n  const result = {\n    give: applier((v) => give(v, baseGuest)),\n  };\n\n  return result as GuestObjectType<T>;\n};\n","import { give, GuestType } from \"../Guest/Guest\";\nimport { GuestDisposableType } from \"../Guest/GuestDisposable\";\n\nexport type PatronType<T> = GuestDisposableType<T> & {\n  introduction(): \"patron\";\n};\n\n/**\n * Helps to check what incoming object is patron\n * @url https://silentium-lab.github.io/silentium/#/utils/is-patron\n */\nexport const isPatron = (guest: GuestType): guest is PatronType<unknown> =>\n  typeof guest === \"object\" &&\n  guest !== null &&\n  guest?.introduction?.() === \"patron\";\n\nexport const introduction = () => \"patron\" as const;\n\n/**\n * Help to turn existed guest intro patron\n * @url https://silentium-lab.github.io/silentium/#/patron\n */\nexport const patron = <T>(\n  willBePatron: GuestType<T>,\n): GuestDisposableType<T> => {\n  if (willBePatron === undefined) {\n    throw new Error(\"Patron didn't receive willBePatron argument\");\n  }\n\n  const result = {\n    give(value: T) {\n      give(value, willBePatron);\n      return result;\n    },\n    disposed(value: T | null): boolean {\n      const maybeDisposable = willBePatron as GuestDisposableType;\n      return maybeDisposable?.disposed?.(value) || false;\n    },\n    introduction,\n  };\n\n  return result;\n};\n","import { introduction } from \"../Patron/Patron\";\nimport { give, GuestType } from \"../Guest/Guest\";\nimport {\n  GuestDisposableType,\n  MaybeDisposableType,\n} from \"../Guest/GuestDisposable\";\n\n/**\n * Helps to call patron only once, this will be helpful when you\n * need value but you know what value can not be existed at a time of requesting\n * @url https://silentium-lab.github.io/silentium/#/patron/patron-once\n */\nexport const patronOnce = <T>(\n  baseGuest: GuestType<T>,\n): GuestDisposableType<T> => {\n  if (baseGuest === undefined) {\n    throw new Error(\"PatronOnce didn't receive baseGuest argument\");\n  }\n\n  let received = false;\n\n  const result = {\n    give(value: T) {\n      if (!received) {\n        received = true;\n        give(value, baseGuest);\n      }\n      return result;\n    },\n    disposed(value: T | null): boolean {\n      if (received) {\n        return true;\n      }\n      const maybeDisposable = baseGuest as MaybeDisposableType;\n      return maybeDisposable.disposed ? maybeDisposable.disposed(value) : false;\n    },\n    introduction,\n  };\n\n  return result;\n};\n","import { source, SourceType } from \"../Source/Source\";\nimport { give, GuestObjectType, GuestType } from \"../Guest/Guest\";\nimport { GuestDisposableType } from \"../Guest/GuestDisposable\";\nimport { DestroyableType } from \"../Source/SourceDestroyable\";\n\nconst poolSets = new Map<PoolType, Set<GuestObjectType>>();\nconst poolsOfInitiators = new Map<SourceType, PoolType>();\nconst subSources = new Map<SourceType, SourceType[]>();\n\nconst poolsChangeFns: (() => void)[] = [];\nconst notifyPoolsChange = () => {\n  poolsChangeFns.forEach((fn) => fn());\n};\nconst lastPatronPoolsStatistic = {\n  poolsCount: 0,\n  patronsCount: 0,\n};\n\n/**\n * Helps debug the application and detect issues with frozen pools\n * @url https://silentium-lab.github.io/silentium/#/utils/patron-pools-statistic\n */\nexport const patronPoolsStatistic = source<{\n  poolsCount: number;\n  patronsCount: number;\n}>((g) => {\n  give(lastPatronPoolsStatistic, g);\n  poolsChangeFns.push(() => {\n    let patronsCount = 0;\n    poolSets.forEach((set) => {\n      patronsCount += set.size;\n    });\n    lastPatronPoolsStatistic.poolsCount = poolSets.size;\n    lastPatronPoolsStatistic.patronsCount = patronsCount;\n    give(lastPatronPoolsStatistic, g);\n  });\n});\n\n/**\n * Helps to connect source and subsource, needed to destroy all sub sources\n * when base source will be destroyed\n * @url https://silentium-lab.github.io/silentium/#/utils/sub-source\n */\nexport const subSource = <T>(\n  subSource: SourceType,\n  source: SourceType<T>,\n): SourceType<T> => {\n  if (!subSources.has(source)) {\n    subSources.set(source, []);\n  }\n\n  subSources.get(source)?.push(subSource);\n\n  return subSource;\n};\n\n/**\n * Helps to define many sources of one sub source\n */\nexport const subSourceMany = <T>(\n  subSourceSrc: SourceType<T>,\n  sourcesSrc: SourceType[],\n): SourceType<T> => {\n  sourcesSrc.forEach((source) => {\n    subSource(subSourceSrc, source);\n  });\n  return subSourceSrc;\n};\n\n/**\n * Helps to check what given source is destroyable\n * @url https://silentium-lab.github.io/silentium/#/utils/is-destroyable\n */\nexport const isDestroyable = (s: unknown): s is DestroyableType => {\n  return (\n    typeof s === \"object\" &&\n    s !== null &&\n    \"destroy\" in s &&\n    typeof s.destroy === \"function\"\n  );\n};\n\n/**\n * Helps to remove all pools of related initiators\n * @url https://silentium-lab.github.io/silentium/#/utils/destroy\n */\nexport const destroy = (...initiators: SourceType[]) => {\n  initiators.forEach((initiator) => {\n    if (isDestroyable(initiator)) {\n      initiator.destroy();\n    }\n    const pool = poolsOfInitiators.get(initiator);\n    pool?.destroy();\n    const foundSubSources = subSources.get(initiator);\n    subSources.delete(initiator);\n    if (foundSubSources) {\n      destroy(...foundSubSources);\n    }\n  });\n};\n\n/**\n * Returns all pools related to one patron\n * @url https://silentium-lab.github.io/silentium/#/utils/patron-pools\n */\nexport const patronPools = (patron: GuestObjectType) => {\n  const pools: PoolType[] = [];\n  poolSets.forEach((pool, poolInstance) => {\n    if (pool.has(patron)) {\n      pools.push(poolInstance);\n    }\n  });\n  return pools;\n};\n\n/**\n * Removes patron from all existed pools\n * @url https://silentium-lab.github.io/silentium/#/utils/remove-patron-from-pools\n */\nexport const removePatronFromPools = (patron: GuestObjectType) => {\n  if (patron === undefined) {\n    throw new Error(\"removePatronFromPools didn't receive patron argument\");\n  }\n  poolSets.forEach((pool) => {\n    pool.delete(patron);\n  });\n  notifyPoolsChange();\n};\n\n/**\n * Checks what patron is connected with any pool\n * @url https://silentium-lab.github.io/silentium/#/utils/is-patron-in-pools\n */\nexport const isPatronInPools = (patron: GuestObjectType) => {\n  if (patron === undefined) {\n    throw new Error(\"isPatronInPools didn't receive patron argument\");\n  }\n  let inPool = false;\n  poolSets.forEach((pool) => {\n    if (!inPool) {\n      inPool = pool.has(patron);\n    }\n  });\n  return inPool;\n};\n\nexport interface PoolType<T = any> extends GuestObjectType<T> {\n  add(guest: GuestObjectType<T>): this;\n  distribute(receiving: T, possiblePatron: GuestObjectType<T>): this;\n  remove(patron: GuestObjectType<T>): this;\n  size(): number;\n  destroy(): void;\n}\n\n/**\n * Pool class helps to implement dispatching for patron about new values\n * what may appear in sources\n * @url https://silentium-lab.github.io/silentium/#/patron/patron-pool\n */\nexport class PatronPool<T> implements PoolType<T> {\n  private patrons: Set<GuestObjectType<T>>;\n\n  public give: (value: T) => this;\n\n  public constructor(private initiator: SourceType) {\n    this.patrons = new Set<GuestObjectType<T>>();\n    poolSets.set(this, this.patrons);\n    poolsOfInitiators.set(this.initiator, this);\n    const doReceive = (value: T) => {\n      this.patrons.forEach((target) => {\n        this.sendValueToGuest(value, target);\n      });\n    };\n    this.give = (value: T) => {\n      doReceive(value);\n      return this;\n    };\n    notifyPoolsChange();\n  }\n\n  public size(): number {\n    return this.patrons.size;\n  }\n\n  public add(shouldBePatron: GuestType<T>) {\n    if (!shouldBePatron) {\n      throw new Error(\"PatronPool add method received nothing!\");\n    }\n    if (\n      typeof shouldBePatron !== \"function\" &&\n      shouldBePatron.introduction &&\n      shouldBePatron.introduction() === \"patron\"\n    ) {\n      this.patrons.add(shouldBePatron);\n    }\n    notifyPoolsChange();\n    return this;\n  }\n\n  public remove(patron: GuestObjectType<T>) {\n    this.patrons.delete(patron);\n    notifyPoolsChange();\n    return this;\n  }\n\n  public distribute(receiving: T, possiblePatron: GuestType<T>): this {\n    this.add(possiblePatron);\n    this.sendValueToGuest(receiving, possiblePatron);\n    return this;\n  }\n\n  public destroy() {\n    this.patrons.forEach((patron) => {\n      this.remove(patron);\n    });\n    poolSets.delete(this);\n    poolsOfInitiators.delete(this.initiator);\n    notifyPoolsChange();\n    return this;\n  }\n\n  private sendValueToGuest(value: T, guest: GuestType<T>) {\n    const isDisposed = this.guestDisposed(value, guest);\n    if (!isDisposed) {\n      give(value, guest);\n    }\n    return this;\n  }\n\n  private guestDisposed(value: T, guest: GuestType<T>) {\n    if ((guest as GuestDisposableType).disposed?.(value)) {\n      this.remove(guest as GuestObjectType);\n      return true;\n    }\n    return false;\n  }\n}\n","import { introduction } from \"../Patron/Patron\";\nimport { GuestObjectType, GuestType } from \"../Guest/Guest\";\nimport { guestApplied } from \"../Guest/GuestApplied\";\n\n/**\n * Helps to apply function to patron\n * @url https://silentium-lab.github.io/silentium/#/patron/patron-applied\n */\nexport const patronApplied = <T, R>(\n  baseGuest: GuestType<R>,\n  applier: (value: T) => R,\n): GuestObjectType<T> => {\n  const applied = guestApplied(baseGuest, applier);\n\n  const result = {\n    give(value: T) {\n      applied.give(value);\n      return result;\n    },\n    introduction,\n  };\n\n  return result;\n};\n","import { introduction } from \"../Patron/Patron\";\nimport { GuestExecutorType, GuestType } from \"../Guest/Guest\";\nimport { guestExecutorApplied } from \"../Guest/GuestExecutorApplied\";\n\n/**\n * Helps to apply function to patrons executor\n * @url https://silentium-lab.github.io/silentium/#/patron/patron-executor-applied\n */\nexport const patronExecutorApplied = <T>(\n  baseGuest: GuestType<T>,\n  applier: (executor: GuestExecutorType) => GuestExecutorType,\n) => {\n  const guestApplied = guestExecutorApplied(baseGuest, applier);\n\n  const result = {\n    give(value: T) {\n      guestApplied.give(value);\n      return result;\n    },\n    introduction,\n  };\n\n  return result;\n};\n","import { subSource } from \"../Patron/PatronPool\";\nimport { GuestType } from \"../Guest/Guest\";\nimport { guestSync } from \"../Guest/GuestSync\";\nimport { patron } from \"../Patron/Patron\";\nimport { SourceObjectType, SourceType, value } from \"../Source/Source\";\n\n/**\n * Helps to represent source value as sync value, what can be returned\n * useful for example in tests\n * This source is not lazy! When we create it patron visit baseSource\n * @url https://silentium-lab.github.io/silentium/#/source/source-sync\n */\nexport const sourceSync = <T>(\n  baseSource: SourceType<T>,\n  defaultValue?: unknown,\n): SourceObjectType<T> & { syncValue(): T } => {\n  const syncGuest = guestSync<T>(defaultValue as T);\n  value(baseSource, patron(syncGuest));\n\n  const result = {\n    value(guest: GuestType<T>) {\n      value(baseSource, guest);\n      return this;\n    },\n    syncValue() {\n      try {\n        return syncGuest.value() as T;\n      } catch {\n        throw new Error(\"No value in SourceSync\");\n      }\n    },\n  };\n  subSource(result, baseSource);\n\n  return result;\n};\n","import { sourceSync } from \"../Source/SourceSync\";\nimport { give, guest, GuestObjectType, GuestType } from \"../Guest/Guest\";\nimport { isPatron } from \"../Patron/Patron\";\nimport { patronOnce } from \"../Patron/PatronOnce\";\nimport { PatronPool } from \"../Patron/PatronPool\";\nimport {\n  isSource,\n  SourceDataType,\n  SourceObjectType,\n  SourceType,\n  value,\n} from \"./Source\";\n\nexport type SourceChangeableType<T = any> = SourceObjectType<T> &\n  GuestObjectType<T>;\n\nconst sourceIsEmpty = (source: unknown) =>\n  source === undefined || source === null;\n\n/**\n * Ability to create source what can be changed later\n * @url https://silentium-lab.github.io/silentium/#/source/source-of\n */\nexport const sourceOf = <T>(source?: SourceType<T>) => {\n  const createdSource = {} as SourceChangeableType<T>;\n  const thePool = new PatronPool(createdSource);\n  let isEmpty = sourceIsEmpty(source);\n\n  if (!isEmpty && isSource(source)) {\n    value(\n      source,\n      patronOnce((unwrappedSourceDocument) => {\n        isEmpty = sourceIsEmpty(unwrappedSourceDocument);\n        source = unwrappedSourceDocument as SourceDataType<T>;\n      }),\n    );\n  }\n\n  createdSource.value = (g: GuestType<T>) => {\n    if (isEmpty) {\n      if (isPatron(g)) {\n        thePool.add(g);\n      }\n      return createdSource;\n    }\n\n    if (typeof g === \"function\") {\n      thePool.distribute(source, guest(g));\n    } else {\n      thePool.distribute(source, g);\n    }\n\n    return createdSource;\n  };\n\n  createdSource.give = (value: T) => {\n    isEmpty = sourceIsEmpty(value);\n    source = value as SourceDataType<T>;\n\n    if (!isEmpty) {\n      thePool.give(source);\n    }\n\n    return createdSource;\n  };\n\n  return createdSource as SourceChangeableType<T>;\n};\n\n/**\n * Changeable source what can be changed only once with specified value\n * @url https://silentium-lab.github.io/silentium/#/source/source-memo-of\n */\nexport const sourceMemoOf = <T>(\n  source?: SourceType<T>,\n): SourceChangeableType<T> => {\n  const result = sourceOf(source);\n  const baseSrcSync = sourceSync(result, null);\n\n  const resultMemo = {\n    value: result.value,\n    give(value: T) {\n      if (baseSrcSync.syncValue() !== value) {\n        give(value, result.give);\n      }\n      return resultMemo;\n    },\n  };\n\n  return resultMemo;\n};\n","import { removePatronFromPools, subSource } from \"../Patron/PatronPool\";\nimport {\n  firstVisit,\n  give,\n  guest,\n  GuestObjectType,\n  GuestType,\n} from \"../Guest/Guest\";\nimport { guestCast } from \"../Guest/GuestCast\";\nimport { patron } from \"../Patron/Patron\";\nimport { SourceObjectType, SourceType, value } from \"./Source\";\nimport { sourceOf } from \"./SourceChangeable\";\nimport { DestroyableType } from \"../Source/SourceDestroyable\";\n\ntype ExtractType<T> = T extends SourceType<infer U> ? U : never;\n\nexport type ExtractTypesFromArray<T extends SourceType<any>[]> = {\n  [K in keyof T]: ExtractType<T[K]>;\n};\n\n/**\n * Represents common value as Array of bunch of sources,\n * when all sources will gets it's values\n * @url https://silentium-lab.github.io/silentium/#/source/source-all\n */\nexport const sourceAll = <const T extends SourceType[]>(\n  sources: T,\n): SourceObjectType<ExtractTypesFromArray<T>> & DestroyableType => {\n  const keysKnown = new Set<string>(Object.keys(sources));\n  const keysFilled = new Set();\n  const isAllFilled = () => {\n    return keysFilled.size > 0 && keysFilled.size === keysKnown.size;\n  };\n  const theAll = sourceOf({});\n  const patrons: GuestObjectType[] = [];\n\n  const visited = firstVisit(() => {\n    Object.entries(sources).forEach(([key, source]) => {\n      subSource(theAll, source);\n      keysKnown.add(key);\n      const keyPatron = patron((v) => {\n        theAll.value(\n          guest((all: Record<string, unknown>) => {\n            keysFilled.add(key);\n            const lastAll = {\n              ...all,\n              [key]: v,\n            };\n            theAll.give(lastAll);\n          }),\n        );\n      });\n      patrons.push(keyPatron);\n      value(source, keyPatron);\n    });\n  });\n\n  return {\n    value(guest: GuestType<ExtractTypesFromArray<T>>) {\n      visited();\n      const mbPatron = guestCast(guest, (value: T) => {\n        if (isAllFilled()) {\n          give(Object.values(value) as ExtractTypesFromArray<T>, guest);\n        }\n      });\n      patrons.push(mbPatron);\n      theAll.value(mbPatron);\n    },\n    destroy() {\n      patrons.forEach((patron) => {\n        removePatronFromPools(patron);\n      });\n    },\n  };\n};\n","import { give, GuestType } from \"../Guest/Guest\";\nimport { guestCast } from \"../Guest/GuestCast\";\nimport { patronOnce } from \"../Patron/PatronOnce\";\nimport { LazyType } from \"../Lazy/Lazy\";\nimport { isSource, SourceType, value } from \"./Source\";\nimport { sourceAll } from \"./SourceAll\";\nimport { sourceOf, SourceChangeableType } from \"./SourceChangeable\";\n\n/**\n * Ability to apply source to source of array values sequentially\n * @url https://silentium-lab.github.io/silentium/#/source/source-sequence\n */\nexport const sourceSequence = <T, TG>(\n  baseSource: SourceType<T[]>,\n  targetSource: LazyType<SourceType<TG>>,\n) => {\n  if (baseSource === undefined) {\n    throw new Error(\"SourceSequence didn't receive baseSource argument\");\n  }\n  if (targetSource === undefined) {\n    throw new Error(\"SourceSequence didn't receive targetSource argument\");\n  }\n\n  return (guest: GuestType<TG[]>) => {\n    const sequenceSource = sourceOf();\n    const source = targetSource.get(sequenceSource);\n\n    value(\n      baseSource,\n      guestCast(guest, (theValue) => {\n        let index = 0;\n\n        const sources: SourceChangeableType[] = [];\n        theValue.forEach(() => {\n          sources.push(sourceOf());\n        });\n\n        const nextItemHandle = () => {\n          if (theValue[index + 1] !== undefined) {\n            index = index + 1;\n            handle();\n          }\n        };\n\n        function handle() {\n          const currentSource = sources[index];\n          const nextValue = theValue[index];\n          if (isSource(nextValue)) {\n            value(\n              nextValue,\n              patronOnce((theNextValue) => {\n                sequenceSource.give(theNextValue);\n                value(source, currentSource);\n                nextItemHandle();\n              }),\n            );\n          } else {\n            sequenceSource.give(nextValue);\n            value(source, currentSource);\n            nextItemHandle();\n          }\n        }\n\n        if (theValue[index] !== undefined) {\n          handle();\n          value(sourceAll(sources), guest);\n        } else {\n          give([], guest);\n        }\n      }),\n    );\n  };\n};\n","import { patron } from \"../Patron/Patron\";\nimport { patronOnce } from \"../Patron/PatronOnce\";\nimport { sourceOf } from \"../Source/SourceChangeable\";\nimport { firstVisit, give, GuestType } from \"../Guest/Guest\";\nimport { LazyType } from \"../Lazy/Lazy\";\nimport { destroy, subSource } from \"../Patron/PatronPool\";\nimport { SourceType, value } from \"./Source\";\nimport { sourceAll } from \"./SourceAll\";\n\n/**\n * Helps to modify many sources with one private source\n * @url https://silentium-lab.github.io/silentium/#/source/source-map\n */\nexport const sourceMap = <T, TG>(\n  baseSource: SourceType<T[]>,\n  targetSource: LazyType<SourceType<TG>>,\n) => {\n  if (baseSource === undefined) {\n    throw new Error(\"SourceMap didn't receive baseSource argument\");\n  }\n  if (targetSource === undefined) {\n    throw new Error(\"SourceMap didn't receive targetSource argument\");\n  }\n\n  const result = sourceOf<TG[]>();\n\n  const visited = firstVisit(() => {\n    value(\n      baseSource,\n      patron((theValue) => {\n        const sources: SourceType[] = [];\n        theValue.forEach((val) => {\n          const source = targetSource.get(val);\n          subSource(source, baseSource);\n          sources.push(source);\n        });\n        value(\n          sourceAll(sources),\n          patronOnce((v) => {\n            destroy(...sources);\n            give(v, result);\n          }),\n        );\n      }),\n    );\n  });\n\n  return (g: GuestType<TG[]>) => {\n    visited();\n    result.value(g);\n  };\n};\n","import { give, GuestType } from \"../Guest/Guest\";\nimport { guestCast } from \"../Guest/GuestCast\";\nimport { SourceType, value } from \"./Source\";\n\n/**\n * Connects guest with source what give response faster than others\n * @url https://silentium-lab.github.io/silentium/#/source/source-race\n */\nexport const sourceRace = <T>(sources: SourceType<T>[]) => {\n  if (sources === undefined) {\n    throw new Error(\"SourceRace didnt receive sources argument\");\n  }\n\n  return (guest: GuestType<T>) => {\n    let connectedWithSource: SourceType | null = null;\n    sources.forEach((source) => {\n      value(\n        source,\n        guestCast(<GuestType>guest, (value) => {\n          if (!connectedWithSource || connectedWithSource === source) {\n            give(value as T, guest);\n            connectedWithSource = source;\n          }\n        }),\n      );\n    });\n  };\n};\n","import { patron } from \"../Patron/Patron\";\nimport { firstVisit, GuestType } from \"../Guest/Guest\";\nimport { SourceType, value } from \"../Source/Source\";\nimport { sourceOf } from \"../Source/SourceChangeable\";\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ntype Last<T extends any[]> = T extends [...infer U, infer L] ? L : never;\n\n/**\n * Returns value of some source when all sources before it gives their response\n * @url https://silentium-lab.github.io/silentium/#/source/source-chain\n */\nexport const sourceChain = <T extends SourceType[]>(\n  ...sources: T\n): SourceType<Last<T>> => {\n  const resultSrc = sourceOf<Last<T>>();\n  const respondedSources = new WeakMap();\n\n  const repeatValue = () => {\n    value(resultSrc, resultSrc);\n  };\n\n  const handleSource = (index: number) => {\n    const source = sources[index];\n    const nextSource = sources[index + 1];\n\n    value(\n      source,\n      patron((v) => {\n        let sourceKey = source;\n\n        if (\n          (typeof source !== \"object\" || source === null) &&\n          typeof source !== \"function\" &&\n          !Array.isArray(source)\n        ) {\n          sourceKey = { source };\n        }\n\n        if (nextSource) {\n          repeatValue();\n        }\n\n        if (!nextSource) {\n          resultSrc.give(v as Last<T>);\n        } else if (!respondedSources.has(sourceKey)) {\n          handleSource(index + 1);\n        }\n\n        respondedSources.set(sourceKey, 1);\n      }),\n    );\n  };\n\n  const visited = firstVisit(() => {\n    handleSource(0);\n  });\n\n  return (g: GuestType<Last<T>>) => {\n    visited();\n    resultSrc.value(g);\n  };\n};\n","import { give, GuestType } from \"../Guest/Guest\";\nimport { SourceType, value } from \"./Source\";\nimport { SourceChangeableType } from \"./SourceChangeable\";\n\n/**\n * Ability to build common changeable source from different guest and source\n * @url https://silentium-lab.github.io/silentium/#/source/source-dynamic\n */\nexport const sourceDynamic = <T>(\n  baseGuest: GuestType<T>,\n  baseSource: SourceType<T>,\n): SourceChangeableType<T> => {\n  if (baseGuest === undefined) {\n    throw new Error(\"SourceDynamic didn't receive baseGuest argument\");\n  }\n  if (baseSource === undefined) {\n    throw new Error(\"SourceDynamic didn't receive baseSource argument\");\n  }\n\n  const sourceObject = {\n    value(guest: GuestType<T>) {\n      value(baseSource, guest);\n      return sourceObject;\n    },\n    give(value: T) {\n      give(value, baseGuest);\n      return this;\n    },\n  };\n\n  return sourceObject;\n};\n","import { give, GuestType } from \"../Guest/Guest\";\nimport { guestCast } from \"../Guest/GuestCast\";\nimport { SourceType, value } from \"../Source/Source\";\n\n/**\n * Gives ability to apply function to source value\n * @url https://silentium-lab.github.io/silentium/#/source/source-applied\n */\nexport const sourceApplied = <T, R>(\n  baseSource: SourceType<T>,\n  applier: (v: T) => R,\n) => {\n  return (guest: GuestType<R>) => {\n    value(\n      baseSource,\n      guestCast(guest, (v) => {\n        give(applier(v), guest);\n      }),\n    );\n  };\n};\n","import { give, GuestType } from \"../Guest/Guest\";\nimport { guestCast } from \"../Guest/GuestCast\";\nimport { SourceType, value } from \"../Source/Source\";\n\n/**\n * Ability to apply function to source executor, helpful when need to apply throttling or debounce\n * @url https://silentium-lab.github.io/silentium/#/source/source-executor-applied\n */\nexport const sourceExecutorApplied = <T>(\n  source: SourceType<T>,\n  applier: (executor: GuestType<T>) => GuestType<T>,\n) => {\n  return (g: GuestType<T>) => {\n    value(\n      source,\n      guestCast(\n        g,\n        applier((v) => {\n          give(v, g);\n        }),\n      ),\n    );\n  };\n};\n","import { give, GuestType } from \"../Guest/Guest\";\nimport { guestCast } from \"../Guest/GuestCast\";\nimport { SourceType, value } from \"../Source/Source\";\n\n/**\n * Helps not to respond with information what checked by predicate function\n * @url https://silentium-lab.github.io/silentium/#/source/source-filtered\n */\nexport const sourceFiltered = <T>(\n  baseSource: SourceType<T>,\n  predicate: (v: T) => boolean,\n  defaultValue?: T,\n) => {\n  return (g: GuestType<T>) => {\n    value(\n      baseSource,\n      guestCast(g, (v) => {\n        if (predicate(v) === true) {\n          give(v, g);\n        } else if (defaultValue !== undefined) {\n          give(defaultValue, g);\n        }\n      }),\n    );\n  };\n};\n","import { GuestType } from \"../Guest/Guest\";\nimport { SourceType, value } from \"./Source\";\nimport { sourceOf } from \"./SourceChangeable\";\n\n/**\n * Ability set the value only once\n * @url https://silentium-lab.github.io/silentium/#/source/source-once\n */\nexport const sourceOnce = <T>(initialValue?: SourceType<T>) => {\n  let isFilled = initialValue !== undefined;\n  const source = sourceOf(initialValue);\n\n  return {\n    value(guest: GuestType<T>) {\n      value(source, guest);\n      return this;\n    },\n    give(value: T) {\n      if (!isFilled) {\n        source.give(value);\n        isFilled = true;\n      }\n      return this;\n    },\n  };\n};\n","import { GuestType } from \"../Guest/Guest\";\nimport { patron } from \"../Patron/Patron\";\nimport { subSourceMany } from \"../Patron/PatronPool\";\nimport { SourceType, value } from \"../Source/Source\";\nimport { ExtractTypesFromArray, sourceAll } from \"../Source/SourceAll\";\nimport { sourceOf } from \"../Source/SourceChangeable\";\n\n/**\n * Simplifies sources combination, when we need to create value depending on many sources\n * @url https://silentium-lab.github.io/silentium/#/source/source-combined\n */\nexport const sourceCombined =\n  <const T extends SourceType[]>(...sources: T) =>\n  <R>(\n    source: (\n      guest: GuestType<R>,\n      ...sourcesValues: ExtractTypesFromArray<T>\n    ) => void,\n  ): SourceType<R> => {\n    const result = sourceOf<R>();\n    subSourceMany(result, sources);\n\n    value(\n      sourceAll(sources),\n      patron((actualValues) => {\n        source(result.give, ...actualValues);\n      }),\n    );\n\n    return result.value;\n  };\n","import { sourceDynamic } from \"../Source/SourceDynamic\";\nimport { firstVisit, give, GuestType } from \"../Guest/Guest\";\nimport { patron } from \"../Patron/Patron\";\nimport { subSource } from \"../Patron/PatronPool\";\nimport { SourceType, value } from \"../Source/Source\";\nimport { sourceOf } from \"../Source/SourceChangeable\";\n\n/**\n * @url https://silentium-lab.github.io/silentium/#/source/source-resettable\n */\nexport const sourceResettable = <T>(\n  baseSrc: SourceType<T>,\n  resettableSrc: SourceType<unknown>,\n) => {\n  const result = sourceOf<T>();\n\n  const visited = firstVisit(() => {\n    value(\n      resettableSrc,\n      patron(() => {\n        give(null, result);\n      }),\n    );\n\n    value(baseSrc, patron(result));\n    subSource(result, baseSrc);\n  });\n\n  return sourceDynamic(result.give, (g: GuestType<T>) => {\n    visited();\n    result.value(g);\n  });\n};\n","import { firstVisit, GuestType } from \"../Guest/Guest\";\nimport { patron } from \"../Patron/Patron\";\nimport { SourceType, value } from \"../Source/Source\";\nimport { sourceOf } from \"../Source/SourceChangeable\";\n\n/**\n * Present source of value what was last appeared in any\n * of given sources, can be used as default value, when some source\n * don't respond\n * @url https://silentium-lab.github.io/silentium/#/source/source-any\n */\nexport const sourceAny = <T>(sources: SourceType<T>[]) => {\n  const lastSrc = sourceOf<T>();\n\n  const visited = firstVisit(() => {\n    sources.forEach((source) => {\n      value(source, patron(lastSrc));\n    });\n  });\n\n  return (g: GuestType<T>) => {\n    visited();\n    lastSrc.value(g);\n  };\n};\n","import { GuestType } from \"src/Guest/Guest\";\nimport { LazyType } from \"../Lazy/Lazy\";\nimport { patron } from \"../Patron/Patron\";\nimport { destroy } from \"../Patron/PatronPool\";\nimport { SourceType, value } from \"../Source/Source\";\nimport { sourceAll } from \"../Source/SourceAll\";\nimport { sourceOf } from \"../Source/SourceChangeable\";\nimport { sourceResettable } from \"../Source/SourceResettable\";\n\n/**\n * Helps to build source only when all sources will give its values\n * and only after some guest visit source\n * @url https://silentium-lab.github.io/silentium/#/source/source-lazy\n */\nexport const sourceLazy = <T>(\n  lazySrc: LazyType<SourceType<T>>,\n  args: SourceType[],\n  destroySrc?: SourceType<unknown>,\n) => {\n  let instance: SourceType<T> | null = null;\n  const result = sourceOf<T>();\n  const resultResettable = sourceResettable(result, destroySrc ?? sourceOf());\n  let wasInstantiated = false;\n\n  const instantiate = () => {\n    if (wasInstantiated) {\n      return;\n    }\n\n    wasInstantiated = true;\n    value(\n      sourceAll(args),\n      patron(() => {\n        if (!instance) {\n          instance = lazySrc.get(...args);\n          value(instance, patron(result));\n        }\n      }),\n    );\n  };\n\n  if (destroySrc) {\n    value(\n      destroySrc,\n      patron(() => {\n        destroy(instance);\n        instance = null;\n      }),\n    );\n  }\n\n  return (g: GuestType<T>) => {\n    instantiate();\n    value(resultResettable, g);\n  };\n};\n","import { SourceExecutorType, SourceObjectType } from \"./Source\";\n\nexport type DestructorType = () => void;\n\nexport interface DestroyableType {\n  destroy: DestructorType;\n}\n\n/**\n * Ability to create sources that support special destruction logic\n * @url https://silentium-lab.github.io/silentium/#/source/source-destroyable\n */\nexport const sourceDestroyable = <T>(\n  source: SourceExecutorType<T, DestructorType>,\n): SourceObjectType<T> & DestroyableType => {\n  let destructor: DestructorType | null = null;\n  return {\n    value(g) {\n      destructor = source(g);\n      return this;\n    },\n    destroy() {\n      if (destructor !== null && typeof destructor === \"function\") {\n        destructor();\n      }\n      return this;\n    },\n  };\n};\n","import { LazyType } from \"./Lazy\";\n\ninterface Constructable<T> {\n  new (...args: unknown[]): T;\n}\n\ninterface Prototyped<T> {\n  prototype: T;\n}\n\nexport const lazyClass = <T>(\n  constructorFn: Prototyped<T>,\n  modules: Record<string, unknown> = {},\n): LazyType<T> => {\n  if (constructorFn === undefined) {\n    throw new Error(\"PrivateClass didn't receive constructorFn argument\");\n  }\n\n  return {\n    get<R extends unknown[], CT = null>(...args: R): CT extends null ? T : CT {\n      return new (constructorFn as Constructable<T>)(\n        ...args,\n        modules,\n      ) as CT extends null ? T : CT;\n    },\n  };\n};\n","export interface LazyType<T> {\n  get<R extends unknown[], CT = null>(...args: R): CT extends null ? T : CT;\n}\n\n/**\n * Helps to get lazy instance of dependency\n * @url https://silentium-lab.github.io/silentium/#/utils/lazy\n */\nexport const lazy = <T>(buildingFn: (...args: any[]) => T): LazyType<T> => {\n  if (buildingFn === undefined) {\n    throw new Error(\"lazy didn't receive buildingFn argument\");\n  }\n\n  return {\n    get<R extends unknown[], CT = null>(...args: R): CT extends null ? T : CT {\n      return buildingFn(...args) as CT extends null ? T : CT;\n    },\n  };\n};\n"],"names":["valueExact","source","guest","Error","value","give","Array","isArray","forEach","currentGuest","isSource","mbSource","data","isGuest","mbGuest","receiver","result","firstVisit","afterFirstVisit","isVisited","guestCast","sourceGuest","targetGuest","disposed","maybeDisposable","introduction","guestSync","theValue","guestDisposable","disposeCheck","guestApplied","baseGuest","applier","guestExecutorApplied","v","isPatron","patron","willBePatron","patronOnce","received","poolSets","Map","poolsOfInitiators","subSources","poolsChangeFns","notifyPoolsChange","fn","lastPatronPoolsStatistic","poolsCount","patronsCount","patronPoolsStatistic","g","push","set","size","subSource","has","get","subSourceMany","subSourceSrc","sourcesSrc","isDestroyable","s","destroy","initiators","initiator","pool","foundSubSources","delete","patronPools","pools","poolInstance","removePatronFromPools","isPatronInPools","inPool","PatronPool","constructor","this","__publicField","patrons","Set","doReceive","target","sendValueToGuest","add","shouldBePatron","remove","distribute","receiving","possiblePatron","guestDisposed","patronApplied","applied","patronExecutorApplied","sourceSync","baseSource","defaultValue","syncGuest","syncValue","sourceIsEmpty","sourceOf","createdSource","thePool","isEmpty","unwrappedSourceDocument","sourceMemoOf","baseSrcSync","resultMemo","sourceAll","sources","keysKnown","Object","keys","keysFilled","theAll","visited","entries","key","keyPatron","all","lastAll","mbPatron","values","sourceSequence","targetSource","sequenceSource","index","nextItemHandle","handle","currentSource","nextValue","theNextValue","sourceMap","val","sourceRace","connectedWithSource","sourceChain","resultSrc","respondedSources","WeakMap","handleSource","nextSource","sourceKey","sourceDynamic","sourceObject","sourceApplied","sourceExecutorApplied","sourceFiltered","predicate","sourceOnce","initialValue","isFilled","sourceCombined","actualValues","sourceResettable","baseSrc","resettableSrc","sourceAny","lastSrc","sourceLazy","lazySrc","args","destroySrc","instance","resultResettable","wasInstantiated","sourceDestroyable","destructor","lazyClass","constructorFn","modules","lazy","buildingFn"],"mappings":"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"}