{"version":3,"file":"silentium.min.mjs","sources":["../src/components/All.ts","../src/components/Any.ts","../src/components/Applied.ts","../src/components/Chain.ts","../src/components/ExecutorApplied.ts","../src/components/Filtered.ts","../src/components/FromEvent.ts","../src/components/FromPromise.ts","../src/helpers/isFilled.ts","../src/helpers/OwnerPool.ts","../src/components/Late.ts","../src/components/Once.ts","../src/components/Shared.ts","../src/components/SharedSource.ts","../src/components/LateShared.ts","../src/components/LazyApplied.ts","../src/components/LazyArgs.ts","../src/components/LazyDestroyable.ts","../src/base/Destructor.ts","../src/base/Local.ts","../src/base/Of.ts","../src/base/On.ts","../src/base/Void.ts","../src/components/Map.ts","../src/components/PrimitiveSource.ts","../src/components/Sequence.ts","../src/components/Stream.ts"],"sourcesContent":["import { DataType } from \"../types\";\n\ntype ExtractTypeS<T> = T extends DataType<infer U> ? U : never;\n\nexport type ExtractTypesFromArrayS<T extends DataType<any>[]> = {\n  [K in keyof T]: ExtractTypeS<T[K]>;\n};\n\nconst isAllFilled = (keysFilled: Set<string>, keysKnown: Set<string>) => {\n  return keysFilled.size > 0 && keysFilled.size === keysKnown.size;\n};\n\n/**\n * Combines multiple information sources into a single unified source\n * represented as an array containing values from all sources\n * https://silentium-lab.github.io/silentium/#/en/information/all\n */\nexport const all = <const T extends DataType[]>(\n  ...theInfos: T\n): DataType<ExtractTypesFromArrayS<T>> => {\n  const keysKnown = new Set<string>(Object.keys(theInfos));\n  const keysFilled = new Set<string>();\n\n  return (u) => {\n    const result: Record<string, unknown> = {};\n\n    Object.entries(theInfos).forEach(([key, info]) => {\n      keysKnown.add(key);\n      info((v) => {\n        keysFilled.add(key);\n        result[key] = v;\n        if (isAllFilled(keysFilled, keysKnown)) {\n          u(Object.values(result) as ExtractTypesFromArrayS<T>);\n        }\n      });\n    });\n  };\n};\n","import { DataType } from \"../types\";\n\n/**\n * From a set of information sources we get\n * a common response from any source for a single owner\n * https://silentium-lab.github.io/silentium/#/en/information/any\n */\nexport const any = <T>(...infos: DataType<T>[]): DataType<T> => {\n  return (u) => {\n    infos.forEach((info) => {\n      info(u);\n    });\n  };\n};\n","import { DataType, ValueType } from \"../types\";\n\n/**\n * Information to which the function was applied to change the value\n * https://silentium-lab.github.io/silentium/#/en/information/applied\n */\nexport const applied = <T, R>(\n  baseSrc: DataType<T>,\n  applier: ValueType<[T], R>,\n): DataType<R> => {\n  return (u) => {\n    baseSrc((v) => {\n      u(applier(v));\n    });\n  };\n};\n","import { DataTypeValue } from \"src/types/DataType\";\nimport { DataType } from \"../types\";\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ntype Last<T extends any[]> = T extends [...infer _, infer L] ? L : never;\n\n/**\n * The set of information sources forms a sequential chain where each source provides\n * an answer. The final answer will be the output result. If any source in the chain\n * provides a new answer, the component's overall response will be repeated.\n * https://silentium-lab.github.io/silentium/#/en/information/applied\n */\nexport const chain = <T extends DataType[]>(...infos: T): Last<T> => {\n  return <Last<T>>((u) => {\n    let lastValue: DataTypeValue<Last<T>> | undefined;\n\n    const handleI = (index: number) => {\n      const info = infos[index] as Last<T>;\n      const nextI = infos[index + 1] as Last<T> | undefined;\n\n      info((v) => {\n        if (!nextI) {\n          lastValue = v as DataTypeValue<Last<T>>;\n        }\n\n        if (lastValue) {\n          u(lastValue);\n        }\n\n        if (nextI && !lastValue) {\n          handleI(index + 1);\n        }\n      });\n    };\n\n    handleI(0);\n  });\n};\n","import { DataType, DataUserType } from \"../types\";\n\n/**\n * Information to which a function is applied in order\n * to control the value passing process\n * https://silentium-lab.github.io/silentium/#/en/information/applied\n */\nexport const executorApplied = <T>(\n  baseSrc: DataType<T>,\n  applier: (executor: DataUserType<T>) => DataUserType<T>,\n): DataType<T> => {\n  return (u) => {\n    baseSrc(\n      applier((v) => {\n        u(v);\n      }),\n    );\n  };\n};\n","import { DataType, ValueType } from \"../types\";\n\n/**\n * Information whose value is being validated\n * via a predicate; if the predicate returns true, the value\n * can be passed to the output\n * https://silentium-lab.github.io/silentium/#/en/information/filtered\n */\nexport const filtered = <T>(\n  baseSrc: DataType<T>,\n  predicate: ValueType<[T], boolean>,\n  defaultValue?: T,\n): DataType<T> => {\n  return (u) => {\n    baseSrc((v) => {\n      if (predicate(v)) {\n        u(v);\n      } else if (defaultValue !== undefined) {\n        u(defaultValue);\n      }\n    });\n  };\n};\n","import { DataTypeDestroyable } from \"src/types/DataType\";\nimport { DataType, DataUserType } from \"../types\";\nimport { all } from \"./All\";\n\n/**\n * A component that receives data from an event and\n * presents it as an information object\n * https://silentium-lab.github.io/silentium/#/en/information/from-event\n */\nexport const fromEvent = <T>(\n  emitterSrc: DataType<any>,\n  eventNameSrc: DataType<string>,\n  subscribeMethodSrc: DataType<string>,\n  unsubscribeMethodSrc?: DataType<string>,\n): DataTypeDestroyable<T> => {\n  let lastU: DataUserType<T> | null = null;\n  const handler = (v: T) => {\n    if (lastU) {\n      lastU(v);\n    }\n  };\n  return (u) => {\n    lastU = u;\n    const a = all(emitterSrc, eventNameSrc, subscribeMethodSrc);\n    a(([emitter, eventName, subscribe]) => {\n      if (!emitter?.[subscribe]) {\n        return;\n      }\n      emitter[subscribe](eventName, handler);\n    });\n\n    return () => {\n      lastU = null;\n      if (!unsubscribeMethodSrc) {\n        return;\n      }\n      const a = all(emitterSrc, eventNameSrc, unsubscribeMethodSrc);\n      a(([emitter, eventName, unsubscribe]) => {\n        emitter?.[unsubscribe]?.(eventName, handler);\n      });\n    };\n  };\n};\n","import { DataType, DataUserType } from \"../types\";\n\n/**\n * Component that gets a value from a promise and\n * presents it as information\n * https://silentium-lab.github.io/silentium/#/en/information/from-promise\n */\nexport const fromPromise = <T>(\n  p: Promise<T>,\n  errorOwner?: DataUserType,\n): DataType<T> => {\n  return (u) => {\n    p.then((v) => {\n      u(v);\n    }).catch((e) => {\n      errorOwner?.(e);\n    });\n  };\n};\n","export const isFilled = <T>(\n  value?: T,\n): value is Exclude<T, null | undefined> => {\n  return value !== undefined && value !== null;\n};\n","import { DataUserType } from \"../types\";\n\n/**\n * Helps maintain an owner list allowing different\n * owners to get information from a common source\n * https://silentium-lab.github.io/silentium/#/en/utils/owner-pool\n */\nexport class OwnerPool<T> {\n  private owners: Set<DataUserType<T>>;\n  private innerOwner: DataUserType<T>;\n\n  public constructor() {\n    this.owners = new Set<DataUserType<T>>();\n    this.innerOwner = (v) => {\n      this.owners.forEach((g) => {\n        g(v);\n      });\n    };\n  }\n\n  public owner() {\n    return this.innerOwner;\n  }\n\n  public size(): number {\n    return this.owners.size;\n  }\n\n  public has(owner: DataUserType<T>): boolean {\n    return this.owners.has(owner);\n  }\n\n  public add(owner: DataUserType<T>) {\n    this.owners.add(owner);\n    return this;\n  }\n\n  public remove(g: DataUserType<T>) {\n    this.owners.delete(g);\n    return this;\n  }\n\n  public destroy() {\n    this.owners.forEach((g) => {\n      this.remove(g);\n    });\n    return this;\n  }\n}\n","import { DataUserType, SourceType } from \"../types\";\nimport { isFilled } from \"../helpers\";\n\n/**\n * A component that allows creating linked objects of information and its owner\n * in such a way that if a new value is assigned to the owner, this value\n * will become the value of the linked information source\n * https://silentium-lab.github.io/silentium/#/en/information/of\n */\nexport const late = <T>(v?: T): SourceType<T> => {\n  let lateUser: DataUserType<T> | null = null;\n  const notify = (v?: T) => {\n    if (isFilled(v) && lateUser) {\n      lateUser(v);\n    }\n  };\n\n  return {\n    value: (u) => {\n      if (lateUser) {\n        throw new Error(\n          \"Late component gets new user, when another was already connected!\",\n        );\n      }\n\n      lateUser = u;\n      notify(v);\n    },\n    give: (v) => {\n      notify(v);\n    },\n  };\n};\n","import { DataType } from \"../types\";\n\n/**\n * Limits the number of values from the information source\n * to a single value - once the first value is emitted, no more\n * values are delivered from the source\n * https://silentium-lab.github.io/silentium/#/en/information/once\n */\nexport const once = <T>(baseSrc: DataType<T>): DataType<T> => {\n  return (u) => {\n    let isFilled = false;\n    baseSrc((v) => {\n      if (!isFilled) {\n        isFilled = true;\n        u(v);\n      }\n    });\n  };\n};\n","import { DataType, DestroyableType, SourceType } from \"../types\";\nimport { isFilled, OwnerPool } from \"../helpers\";\nimport { late } from \"../components/Late\";\nimport { once } from \"../components/Once\";\n\n/**\n * An information object that helps multiple owners access\n * a single another information object\n * https://silentium-lab.github.io/silentium/#/en/information/pool\n */\nexport const shared = <T>(\n  baseSrc: DataType<T>,\n  stateless = false,\n): SourceType<T> & { pool: () => OwnerPool<T> } & DestroyableType => {\n  const ownersPool = new OwnerPool<T>();\n  let lastValue: T | undefined;\n\n  const calls = late();\n  once(calls.value)(() => {\n    baseSrc((v) => {\n      ownersPool.owner()(v);\n      lastValue = v;\n    });\n  });\n\n  return {\n    value: (u) => {\n      calls.give(1);\n      if (!stateless && isFilled(lastValue) && !ownersPool.has(u)) {\n        u(lastValue);\n      }\n      ownersPool.add(u);\n      return () => {\n        ownersPool.remove(u);\n      };\n    },\n    give: (value: T) => {\n      lastValue = value;\n      ownersPool.owner()(value);\n    },\n    pool() {\n      return ownersPool;\n    },\n    destroy() {\n      ownersPool.destroy();\n    },\n  };\n};\n","import { SourceType } from \"../types\";\nimport { shared } from \"../components/Shared\";\n\nexport const sharedSource = <T>(\n  baseSrc: SourceType<T>,\n  stateless = false,\n): SourceType<T> => {\n  const sharedSrc = shared(baseSrc.value, stateless);\n\n  return {\n    value: (u) => {\n      sharedSrc.value(u);\n    },\n    give: (v) => {\n      baseSrc.give(v);\n    },\n  };\n};\n","import { late } from \"../components/Late\";\nimport { sharedSource } from \"../components/SharedSource\";\nimport { SourceType } from \"../types\";\n\nexport const lateShared = <T>(theValue?: T): SourceType<T> => {\n  const src = sharedSource(late(theValue));\n  return {\n    value: src.value,\n    give: src.give,\n  };\n};\n","import { DataType, ValueType } from \"../types\";\n\n/**\n * Lazy with applied function to its results\n */\nexport const lazyApplied = <T>(\n  baseLazy: ValueType<any[], DataType>,\n  applier: (i: DataType) => DataType<T>,\n): ValueType<DataType[], DataType<T>> => {\n  return (...args) => {\n    return applier(baseLazy(...args));\n  };\n};\n","import { DataType, ValueType } from \"../types\";\n\nexport const lazyArgs = (\n  baseLazy: ValueType<any[], DataType>,\n  args: unknown[],\n  startFromArgIndex: number = 0,\n) => {\n  return (...runArgs: any[]) => {\n    return baseLazy(...mergeAtIndex(runArgs, args, startFromArgIndex));\n  };\n};\n\nfunction mergeAtIndex(arr1: unknown[], arr2: unknown[], index: number) {\n  const result = arr1.slice(0, index);\n  while (result.length < index) result.push(undefined);\n  return result.concat(arr2);\n}\n","import { DestroyableType, DestructorType, ValueType } from \"../types\";\n\n/**\n * Lazy what can be destroyed\n */\nexport const lazyDestroyable = (\n  baseLazy: ValueType<any[], DestroyableType>,\n): { get: ValueType<any[], DestroyableType>; destroy: DestructorType } => {\n  const instances: DestroyableType[] = [];\n  return {\n    get: (...args) => {\n      const inst = baseLazy(...args);\n      instances.push(inst);\n      return inst;\n    },\n    destroy: () => {\n      instances.forEach((i) => i.destroy());\n    },\n  };\n};\n","import { DataType, DataUserType, DestructorType } from \"src/types\";\n\nexport const destructor = <T>(\n  src: DataType<T>,\n  destructorUser?: DataUserType<DestructorType>,\n) => {\n  let mbDestructor: DestructorType | void;\n  return {\n    value: ((u) => {\n      mbDestructor = src(u);\n      if (mbDestructor && destructorUser) {\n        destructorUser(mbDestructor);\n      }\n      return () => {\n        mbDestructor?.();\n      };\n    }) as DataType<T>,\n    destroy: () => {\n      mbDestructor?.();\n    },\n  };\n};\n","import { DataType } from \"src/types\";\n\n/**\n * Create local copy of source what can be destroyed\n */\nexport const local = <T>(baseSrc: DataType<T>): DataType<T> => {\n  return function Local(user) {\n    let destroyed = false;\n    const d = baseSrc((v) => {\n      if (!destroyed) {\n        user(v);\n      }\n    });\n    return () => {\n      destroyed = true;\n      d?.();\n    };\n  };\n};\n","import { DataType } from \"../types\";\n\nexport const of =\n  <T>(v: T): DataType<T> =>\n  (u) =>\n    u(v);\n","import { DataType, DataUserType } from \"../types\";\n\n/**\n * Run data with user\n */\nexport const on = <T>(src: DataType<T>, user: DataUserType<T>) => src(user);\n","import { DataUserType } from \"../types\";\n\n/**\n * Silent user\n */\nexport const _void = (): DataUserType => () => {};\n","import { DataType, ValueType } from \"../types\";\nimport { of } from \"../base\";\nimport { all } from \"./All\";\n\n/**\n * Component that applies an info object constructor to each data item,\n * producing an information source with new values\n * https://silentium-lab.github.io/silentium/#/en/information/map\n */\nexport const map = <T, TG>(\n  baseSrc: DataType<T[]>,\n  targetSrc: ValueType<any[], DataType<TG>>,\n): DataType<TG[]> => {\n  return (u) => {\n    baseSrc((v) => {\n      const infos: DataType<TG>[] = [];\n      v.forEach((val) => {\n        let valInfo: DataType<T> | T = val;\n        if (typeof valInfo !== \"function\") {\n          valInfo = of(valInfo);\n        }\n        const info = targetSrc(valInfo);\n        infos.push(info);\n      });\n      const allI = all(...infos);\n      allI(u);\n    });\n  };\n};\n","import { DataType } from \"../types\";\n\nexport const primitive = <T>(\n  baseSrc: DataType<T>,\n  theValue: T | null = null,\n) => {\n  baseSrc((v) => {\n    theValue = v;\n  });\n\n  return {\n    [Symbol.toPrimitive]() {\n      return theValue;\n    },\n    primitive() {\n      return theValue;\n    },\n    primitiveWithException() {\n      if (theValue === null) {\n        throw new Error(\"Primitive value is null\");\n      }\n      return theValue;\n    },\n  };\n};\n","import { DataType } from \"../types\";\n\n/**\n * A component that takes one value at a time and returns\n * an array of all previous values\n * https://silentium-lab.github.io/silentium/#/en/information/sequence\n */\nexport const sequence = <T>(baseSrc: DataType<T>): DataType<T[]> => {\n  return (u) => {\n    const result: T[] = [];\n    baseSrc((v) => {\n      result.push(v);\n      u(result);\n    });\n  };\n};\n","import { DataType } from \"../types\";\n\n/**\n * Component that receives a data array and yields values one by one\n * https://silentium-lab.github.io/silentium/#/en/information/stream\n */\nexport const stream = <T>(baseSrc: DataType<T[]>): DataType<T> => {\n  return (u) => {\n    baseSrc((v) => {\n      v.forEach((cv) => {\n        u(cv);\n      });\n    });\n  };\n};\n"],"names":["all","theInfos","keysKnown","Set","Object","keys","keysFilled","u","result","entries","forEach","key","info","add","v","size","isAllFilled","values","any","infos","applied","baseSrc","applier","chain","lastValue","handleI","index","nextI","executorApplied","filtered","predicate","defaultValue","fromEvent","emitterSrc","eventNameSrc","subscribeMethodSrc","unsubscribeMethodSrc","lastU","handler","a","emitter","eventName","subscribe","unsubscribe","fromPromise","p","errorOwner","then","catch","e","isFilled","value","OwnerPool","constructor","__publicField","this","owners","innerOwner","g","owner","has","remove","delete","destroy","late","lateUser","notify","Error","give","once","shared","stateless","ownersPool","calls","pool","sharedSource","sharedSrc","lateShared","theValue","src","lazyApplied","baseLazy","args","lazyArgs","startFromArgIndex","runArgs","arr1","arr2","slice","length","push","concat","mergeAtIndex","lazyDestroyable","instances","get","inst","i","destructor","destructorUser","mbDestructor","local","user","destroyed","d","of","on","_void","map","targetSrc","val","valInfo","allI","primitive","Symbol","toPrimitive","primitiveWithException","sequence","stream","cv"],"mappings":"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"}