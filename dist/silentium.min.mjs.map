{"version":3,"file":"silentium.min.mjs","sources":["../src/base/Destroyable.ts","../src/base/DestroyFunc.ts","../src/base/TheOwner.ts","../src/base/From.ts","../src/base/TheInformation.ts","../src/base/Of.ts","../src/base/Lazy.ts","../src/base/OfFunc.ts","../src/components/All.ts","../src/components/Any.ts","../src/components/Applied.ts","../src/components/Chain.ts","../src/components/ExecutorApplied.ts","../src/components/Filtered.ts","../src/components/FromCallback.ts","../src/components/FromEvent.ts","../src/components/FromPromise.ts","../src/helpers/isFilled.ts","../src/helpers/OwnerPool.ts","../src/components/Late.ts","../src/components/LazyApplied.ts","../src/components/LazyClass.ts","../src/components/Map.ts","../src/components/Once.ts","../src/components/Sequence.ts","../src/components/Shared.ts","../src/components/Stream.ts"],"sourcesContent":["/**\n * Representation of Destroyable object\n */\nexport class Destroyable {\n  public constructor(private deps?: unknown[]) {}\n\n  public destroy() {\n    this.deps?.forEach((dep) => {\n      if (dep instanceof Destroyable) {\n        dep.destroy();\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Add dependency what can be destroyed\n   */\n  public addDep(dep: unknown) {\n    this.deps?.push(dep);\n    return this;\n  }\n}\n","import { Destroyable } from \"./Destroyable\";\n\n/**\n * Representation of destructor function as object\n */\nexport class DestroyFunc extends Destroyable {\n  public constructor(private destructor: () => void) {\n    super();\n  }\n\n  public destroy(): this {\n    this.destructor();\n    return this;\n  }\n}\n","/**\n * Representation of Information Owner\n */\nexport abstract class TheOwner<T = unknown> {\n  public abstract give(value: T): this;\n}\n","import { TheOwner } from \"./TheOwner\";\n\n/**\n * Owner from function\n */\nexport class From<T = unknown> extends TheOwner<T> {\n  public constructor(private fn: (value: T) => void) {\n    super();\n  }\n\n  public give(value: T): this {\n    this.fn(value);\n    return this;\n  }\n}\n","import { Destroyable } from \"./Destroyable\";\nimport { TheOwner } from \"./TheOwner\";\n\n/**\n * Representation of Information\n */\nexport abstract class TheInformation<T = unknown> extends Destroyable {\n  public abstract value(o: TheOwner<T>): this;\n}\n","import { TheOwner } from \"./TheOwner\";\nimport { TheInformation } from \"./TheInformation\";\nimport { isFilled } from \"src/helpers\";\n\n/**\n * Information from primitive value\n */\nexport class Of<T> extends TheInformation<T> {\n  public constructor(private theValue: T) {\n    super([theValue]);\n  }\n\n  public value(o: TheOwner<T>): this {\n    if (isFilled(this.theValue)) {\n      o.give(this.theValue);\n    }\n    return this;\n  }\n}\n","import { Destroyable } from \"./Destroyable\";\nimport { Of } from \"./Of\";\nimport { TheInformation } from \"./TheInformation\";\n\n/**\n * Ability to create information after some event\n */\nexport class Lazy<T = unknown> extends Destroyable {\n  public constructor(\n    protected buildFn?: (...args: TheInformation[]) => TheInformation<T>,\n  ) {\n    super();\n  }\n\n  public get(...args: TheInformation[]) {\n    args.forEach((dep) => {\n      this.addDep(dep);\n    });\n    return this.buildFn?.(...args) ?? (new Of(null) as TheInformation<T>);\n  }\n}\n","import { TheOwner } from \"./TheOwner\";\nimport { TheInformation } from \"./TheInformation\";\n\ntype DestructorFnType = () => void;\n\n/**\n * Information of function\n */\nexport class OfFunc<T> extends TheInformation<T> {\n  private mbDestructor?: DestructorFnType | void;\n\n  public constructor(\n    private valueFn: (o: TheOwner<T>) => DestructorFnType | undefined | void,\n  ) {\n    super([valueFn]);\n  }\n\n  public value(o: TheOwner<T>): this {\n    this.mbDestructor = this.valueFn(o);\n    return this;\n  }\n\n  public destroy(): this {\n    super.destroy();\n    this.mbDestructor?.();\n    return this;\n  }\n}\n","import { From, TheInformation, TheOwner } from \"../base\";\n\ntype ExtractTypeS<T> = T extends TheInformation<infer U> ? U : never;\n\nexport type ExtractTypesFromArrayS<T extends TheInformation<any>[]> = {\n  [K in keyof T]: ExtractTypeS<T[K]>;\n};\n\n/**\n * Combines multiple information sources into a single unified source\n * represented as an array containing values from all sources\n * https://silentium-lab.github.io/silentium/#/en/information/all\n */\nexport class All<const T extends TheInformation[]> extends TheInformation<\n  ExtractTypesFromArrayS<T>\n> {\n  private keysKnown: Set<string>;\n  private keysFilled = new Set();\n  private infos: T;\n\n  public constructor(...theInfos: T) {\n    super(theInfos);\n    this.infos = theInfos;\n    this.keysKnown = new Set<string>(Object.keys(theInfos));\n  }\n\n  public value(o: TheOwner<ExtractTypesFromArrayS<T>>): this {\n    const result: Record<string, unknown> = {};\n\n    Object.entries(this.infos).forEach(([key, info]) => {\n      this.keysKnown.add(key);\n      info.value(\n        new From((v) => {\n          this.keysFilled.add(key);\n          result[key] = v;\n          if (this.isAllFilled()) {\n            o.give(Object.values(result) as ExtractTypesFromArrayS<T>);\n          }\n        }),\n      );\n    });\n    return this;\n  }\n\n  private isAllFilled() {\n    return (\n      this.keysFilled.size > 0 && this.keysFilled.size === this.keysKnown.size\n    );\n  }\n}\n","import { TheInformation, TheOwner } from \"../base\";\n\n/**\n * From a set of information sources we get\n * a common response from any source for a single owner\n * https://silentium-lab.github.io/silentium/#/en/information/any\n */\nexport class Any<T> extends TheInformation<T> {\n  private infos: TheInformation<T>[];\n\n  public constructor(...theInfos: TheInformation<T>[]) {\n    super(theInfos);\n    this.infos = theInfos;\n  }\n\n  public value(o: TheOwner<T>): this {\n    this.infos.forEach((info) => {\n      info.value(o);\n    });\n    return this;\n  }\n}\n","import { From, TheInformation, TheOwner } from \"../base\";\n\n/**\n * Information to which the function was applied to change the value\n * https://silentium-lab.github.io/silentium/#/en/information/applied\n */\nexport class Applied<T, R> extends TheInformation<R> {\n  public constructor(\n    private baseSrc: TheInformation<T>,\n    private applier: (v: T) => R,\n  ) {\n    super([baseSrc]);\n  }\n\n  public value(o: TheOwner<R>): this {\n    this.baseSrc.value(\n      new From((v) => {\n        o.give(this.applier(v));\n      }),\n    );\n    return this;\n  }\n}\n","import { From, TheInformation, TheOwner } from \"../base\";\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ntype Last<T extends any[]> = T extends [...infer U, infer L] ? L : never;\n\n/**\n * The set of information sources forms a sequential chain where each source provides\n * an answer. The final answer will be the output result. If any source in the chain\n * provides a new answer, the component's overall response will be repeated.\n * https://silentium-lab.github.io/silentium/#/en/information/applied\n */\nexport class Chain<T extends TheInformation[]> extends TheInformation<Last<T>> {\n  private theInfos: T;\n\n  public constructor(...infos: T) {\n    super(infos);\n    this.theInfos = infos;\n  }\n\n  public value(o: TheOwner<Last<T>>) {\n    let lastValue: Last<T> | undefined;\n\n    const handleI = (index: number) => {\n      const info = this.theInfos[index] as TheInformation<Last<T>>;\n      const nextI = this.theInfos[index + 1] as\n        | TheInformation<Last<T>>\n        | undefined;\n\n      info.value(\n        new From((v) => {\n          if (!nextI) {\n            lastValue = v;\n          }\n\n          if (lastValue) {\n            o.give(lastValue);\n          }\n\n          if (nextI && !lastValue) {\n            handleI(index + 1);\n          }\n        }),\n      );\n    };\n\n    handleI(0);\n\n    return this;\n  }\n}\n","import { From, TheInformation, TheOwner } from \"../base\";\n\n/**\n * Information to which a function is applied in order\n * to control the value passing process\n * https://silentium-lab.github.io/silentium/#/en/information/applied\n */\nexport class ExecutorApplied<T> extends TheInformation<T> {\n  public constructor(\n    private baseSrc: TheInformation<T>,\n    private applier: (executor: (v: T) => void) => (v: T) => void,\n  ) {\n    super([baseSrc]);\n  }\n\n  public value(o: TheOwner<T>): this {\n    this.baseSrc.value(\n      new From(\n        this.applier((v) => {\n          o.give(v);\n        }),\n      ),\n    );\n    return this;\n  }\n}\n","import { From, TheInformation, TheOwner } from \"../base\";\n\n/**\n * Information whose value is being validated\n * via a predicate; if the predicate returns true, the value\n * can be passed to the output\n * https://silentium-lab.github.io/silentium/#/en/information/filtered\n */\nexport class Filtered<T> extends TheInformation<T> {\n  public constructor(\n    private baseSrc: TheInformation<T>,\n    private predicate: (v: T) => boolean,\n    private defaultValue?: T,\n  ) {\n    super([baseSrc]);\n  }\n\n  public value(o: TheOwner<T>): this {\n    this.baseSrc.value(\n      new From((v) => {\n        if (this.predicate(v)) {\n          o.give(v);\n        } else if (this.defaultValue !== undefined) {\n          o.give(this.defaultValue);\n        }\n      }),\n    );\n    return this;\n  }\n}\n","import { TheInformation, TheOwner } from \"../base\";\n\n/**\n * When receiving a reference to a function expecting a callback, the component\n * creates its own callback, and the data received in this callback\n * will become the value of the information object\n * https://silentium-lab.github.io/silentium/#/en/information/from-callback\n */\nexport class FromCallback<T> extends TheInformation<T> {\n  private theArgs: unknown[];\n\n  public constructor(\n    private waitForCb: (cb: (v: T) => any, ...args: unknown[]) => unknown,\n    ...args: unknown[]\n  ) {\n    super([waitForCb]);\n    this.theArgs = args;\n  }\n\n  public value(o: TheOwner<T>): this {\n    this.waitForCb(\n      (v) => {\n        o.give(v);\n      },\n      ...this.theArgs,\n    );\n    return this;\n  }\n}\n","import { DestroyFunc } from \"src/base/DestroyFunc\";\nimport { From, Of, TheInformation, TheOwner } from \"../base\";\nimport { All } from \"./All\";\n\n/**\n * A component that receives data from an event and\n * presents it as an information object\n * https://silentium-lab.github.io/silentium/#/en/information/from-event\n */\nexport class FromEvent<T = unknown> extends TheInformation<T> {\n  public constructor(\n    private emitterSrc: TheInformation<any>,\n    private eventNameSrc: TheInformation<string>,\n    private subscribeMethodSrc: TheInformation<string>,\n    private unsubscribeMethodSrc: TheInformation<string> = new Of(\"\"),\n  ) {\n    super([emitterSrc, eventNameSrc, subscribeMethodSrc, unsubscribeMethodSrc]);\n  }\n\n  public value(o: TheOwner<T>): this {\n    const a = new All(\n      this.emitterSrc,\n      this.eventNameSrc,\n      this.subscribeMethodSrc,\n      this.unsubscribeMethodSrc,\n    );\n    const handler = (v: T) => {\n      o.give(v);\n    };\n    a.value(\n      new From(([emitter, eventName, subscribe, unsubscribe]) => {\n        emitter[subscribe](eventName, handler);\n        this.addDep(\n          new DestroyFunc(() => {\n            emitter[unsubscribe](eventName, handler);\n          }),\n        );\n      }),\n    );\n    return this;\n  }\n}\n","import { TheInformation, TheOwner } from \"../base\";\n\n/**\n * Component that gets a value from a promise and\n * presents it as information\n * https://silentium-lab.github.io/silentium/#/en/information/from-promise\n */\nexport class FromPromise<T> extends TheInformation<T> {\n  public constructor(\n    private p: Promise<T>,\n    private errorOwner?: TheOwner,\n  ) {\n    super([p]);\n  }\n\n  public value(o: TheOwner<T>): this {\n    this.p\n      .then((v) => {\n        o.give(v);\n      })\n      .catch((e) => {\n        this.errorOwner?.give(e);\n      });\n    return this;\n  }\n}\n","export const isFilled = <T>(value?: T): value is T => {\n  return value !== undefined && value !== null;\n};\n","import { From, TheOwner } from \"../base\";\n\n/**\n * Helps maintain an owner list allowing different\n * owners to get information from a common source\n * https://silentium-lab.github.io/silentium/#/en/utils/owner-pool\n */\nexport class OwnerPool<T> {\n  private owners: Set<TheOwner<T>>;\n  private innerOwner: TheOwner<T>;\n\n  public constructor() {\n    this.owners = new Set<TheOwner<T>>();\n    this.innerOwner = new From((v) => {\n      this.owners.forEach((g) => {\n        g.give(v);\n      });\n    });\n  }\n\n  public owner() {\n    return this.innerOwner;\n  }\n\n  public size(): number {\n    return this.owners.size;\n  }\n\n  public has(owner: TheOwner<T>): boolean {\n    return this.owners.has(owner);\n  }\n\n  public add(owner: TheOwner<T>) {\n    this.owners.add(owner);\n    return this;\n  }\n\n  public remove(g: TheOwner<T>) {\n    this.owners.delete(g);\n    return this;\n  }\n\n  public destroy() {\n    this.owners.forEach((g) => {\n      this.remove(g);\n    });\n    return this;\n  }\n}\n","import { From, TheInformation, TheOwner } from \"../base\";\nimport { isFilled } from \"../helpers\";\n\n/**\n * A component that allows creating linked objects of information and its owner\n * in such a way that if a new value is assigned to the owner, this value\n * will become the value of the linked information source\n * https://silentium-lab.github.io/silentium/#/en/information/of\n */\nexport class Late<T> extends TheInformation<T> {\n  private theOwner?: TheOwner<T>;\n  private lateOwner = new From((v: T) => {\n    this.theValue = v;\n    this.notify();\n  });\n\n  public constructor(private theValue?: T) {\n    super([theValue]);\n  }\n\n  public value(o: TheOwner<T>): this {\n    if (this.theOwner) {\n      throw new Error(\n        \"Late component gets new owner, when another was already connected!\",\n      );\n    }\n    this.theOwner = o;\n    this.notify();\n    return this;\n  }\n\n  public owner() {\n    return this.lateOwner;\n  }\n\n  private notify() {\n    if (isFilled(this.theValue) && this.theOwner) {\n      this.theOwner.give(this.theValue);\n    }\n    return this;\n  }\n}\n","import { Lazy, TheInformation } from \"src/base\";\n\n/**\n * Lazy with applied function to its results\n */\nexport class LazyApplied<T> extends Lazy<T> {\n  public constructor(\n    private baseLazy: Lazy,\n    private applier: (i: TheInformation) => TheInformation<T>,\n  ) {\n    super();\n  }\n\n  public get(...args: TheInformation[]): TheInformation<T> {\n    return this.applier(this.baseLazy.get(...args));\n  }\n}\n","import { Lazy } from \"../base\";\n\n/**\n * Lazy instance from class constructor\n */\nexport class LazyClass<T> extends Lazy<T> {\n  public constructor(constrFn: any) {\n    const buildFn = (...args: unknown[]) => new constrFn(...args);\n    super(buildFn);\n  }\n}\n","import { From, Lazy, Of, TheInformation, TheOwner } from \"../base\";\nimport { All } from \"./All\";\n\n/**\n * Component that applies an info object constructor to each data item,\n * producing an information source with new values\n * https://silentium-lab.github.io/silentium/#/en/information/map\n */\nexport class Map<T, TG> extends TheInformation<TG[]> {\n  public constructor(\n    private baseSrc: TheInformation<T[]>,\n    private targetSrc: Lazy<TG>,\n  ) {\n    super([baseSrc, targetSrc]);\n  }\n\n  public value(o: TheOwner<TG[]>) {\n    this.baseSrc.value(\n      new From((v) => {\n        const infos: TheInformation<TG>[] = [];\n        v.forEach((val) => {\n          let valInfo: TheInformation<T> | T = val;\n          if (!(valInfo instanceof TheInformation)) {\n            valInfo = new Of(valInfo);\n          }\n          const info = this.targetSrc.get(valInfo);\n          infos.push(info);\n        });\n        const allI = new All(...infos);\n        allI.value(o);\n      }),\n    );\n    return this;\n  }\n}\n","import { From, TheInformation, TheOwner } from \"../base\";\n\n/**\n * Limits the number of values from the information source\n * to a single value - once the first value is emitted, no more\n * values are delivered from the source\n * https://silentium-lab.github.io/silentium/#/en/information/once\n */\nexport class Once<T> extends TheInformation<T> {\n  public constructor(private baseSrc: TheInformation<T>) {\n    super();\n  }\n\n  public value(o: TheOwner<T>): this {\n    let isFilled = false;\n    this.baseSrc.value(\n      new From((v) => {\n        if (!isFilled) {\n          isFilled = true;\n          o.give(v);\n        }\n      }),\n    );\n    return this;\n  }\n}\n","import { From, TheInformation, TheOwner } from \"../base\";\n\n/**\n * A component that takes one value at a time and returns\n * an array of all previous values\n * https://silentium-lab.github.io/silentium/#/en/information/sequence\n */\nexport class Sequence<T> extends TheInformation<T[]> {\n  public constructor(private baseSrc: TheInformation<T>) {\n    super([baseSrc]);\n  }\n\n  public value(o: TheOwner<T[]>): this {\n    const result: T[] = [];\n    this.baseSrc.value(\n      new From((v) => {\n        result.push(v);\n        o.give(result);\n      }),\n    );\n    return this;\n  }\n}\n","import { isFilled, OwnerPool } from \"../helpers\";\nimport { From, OfFunc, TheInformation, TheOwner } from \"../base\";\n\n/**\n * An information object that helps multiple owners access\n * a single another information object\n * https://silentium-lab.github.io/silentium/#/en/information/pool\n */\nexport class Shared<T> extends TheInformation<T> {\n  private lastValue: T | undefined;\n  private ownersPool = new OwnerPool<T>();\n\n  public constructor(\n    private baseSrc: TheInformation<T>,\n    private stateless = false,\n  ) {\n    super([baseSrc]);\n    this.addDep(this.ownersPool);\n    this.baseSrc.value(\n      new From((v) => {\n        this.ownersPool.owner().give(v);\n        this.lastValue = v;\n      }),\n    );\n  }\n\n  public value(o: TheOwner<T>): this {\n    const i = new OfFunc((g: TheOwner<T>) => {\n      if (\n        !this.stateless &&\n        isFilled(this.lastValue) &&\n        !this.ownersPool.has(g)\n      ) {\n        g.give(this.lastValue);\n      }\n      this.ownersPool.add(g);\n      return () => {\n        this.ownersPool.remove(g);\n      };\n    });\n    i.value(o);\n    this.addDep(i);\n\n    return this;\n  }\n\n  public pool() {\n    return this.ownersPool;\n  }\n}\n","import { From, TheInformation, TheOwner } from \"../base\";\n\n/**\n * Component that receives a data array and yields values one by one\n * https://silentium-lab.github.io/silentium/#/en/information/stream\n */\nexport class Stream<T> extends TheInformation<T> {\n  public constructor(private baseSrc: TheInformation<T[]>) {\n    super([baseSrc]);\n  }\n\n  public value(o: TheOwner<T>): this {\n    this.baseSrc.value(\n      new From((v) => {\n        v.forEach((cv) => {\n          o.give(cv);\n        });\n      }),\n    );\n    return this;\n  }\n}\n"],"names":["Destroyable","constructor","deps","this","destroy","forEach","dep","addDep","push","DestroyFunc","destructor","super","TheOwner","From","fn","give","value","TheInformation","Of","theValue","o","isFilled","Lazy","buildFn","get","args","OfFunc","valueFn","__publicField","mbDestructor","All","theInfos","Set","infos","keysKnown","Object","keys","result","entries","key","info","add","v","keysFilled","isAllFilled","values","size","Any","Applied","baseSrc","applier","Chain","lastValue","handleI","index","nextI","ExecutorApplied","Filtered","predicate","defaultValue","FromCallback","waitForCb","theArgs","FromEvent","emitterSrc","eventNameSrc","subscribeMethodSrc","unsubscribeMethodSrc","a","handler","emitter","eventName","subscribe","unsubscribe","FromPromise","p","errorOwner","then","catch","e","OwnerPool","owners","innerOwner","g","owner","has","remove","delete","Late","notify","theOwner","Error","lateOwner","LazyApplied","baseLazy","LazyClass","constrFn","Map","targetSrc","val","valInfo","Once","Sequence","Shared","stateless","ownersPool","i","pool","Stream","cv"],"mappings":"0HAGO,MAAMA,EACJ,WAAAC,CAAoBC,GAAAC,KAAAD,KAAAA,CAAA,CAEpB,OAAAE,GAME,OALFD,KAAAD,MAAMG,SAASC,IACdA,aAAeN,GACjBM,EAAIF,SAAQ,IAGTD,IAAA,CAMF,MAAAI,CAAOD,GAEL,OADFH,KAAAD,MAAMM,KAAKF,GACTH,IAAA,ECfJ,MAAMM,UAAoBT,EACxB,WAAAC,CAAoBS,GACnBC,QADmBR,KAAAO,WAAAA,CAAA,CAIpB,OAAAN,GAEE,OADPD,KAAKO,aACEP,IAAA,ECTJ,MAAeS,GCEf,MAAMC,UAA0BD,EAC9B,WAAAX,CAAoBa,GACnBH,QADmBR,KAAAW,GAAAA,CAAA,CAIpB,IAAAC,CAAKC,GAEH,OADPb,KAAKW,GAAGE,GACDb,IAAA,ECNJ,MAAec,UAAoCjB,GCCnD,MAAMkB,UAAcD,EAClB,WAAAhB,CAAoBkB,GACnBR,MAAA,CAACQ,IADkBhB,KAAAgB,SAAAA,CAAA,CAIpB,KAAAH,CAAMI,GAIJ,OAHHC,EAASlB,KAAKgB,WACdC,EAAAL,KAAKZ,KAAKgB,UAEPhB,IAAA,ECTJ,MAAMmB,UAA0BtB,EAC9B,WAAAC,CACKsB,GAEJZ,QAFIR,KAAAoB,QAAAA,CAAA,CAKL,GAAAC,IAAOC,GAIZ,OAHKA,EAAApB,SAASC,IACZH,KAAKI,OAAOD,EAAG,IAEVH,KAAKoB,aAAaE,IAAU,IAAIP,EAAG,KAAI,uICV3C,MAAMQ,UAAkBT,EAGtB,WAAAhB,CACG0B,GAEFhB,MAAA,CAACgB,IAFCxB,KAAAwB,QAAAA,EAHFC,EAAAzB,KAAA,eAAA,CAQD,KAAAa,CAAMI,GAEJ,OADFjB,KAAA0B,aAAe1B,KAAKwB,QAAQP,GAC1BjB,IAAA,CAGF,OAAAC,GAGE,OAFPO,MAAMP,UACND,KAAK0B,iBACE1B,IAAA,4JCZJ,MAAM2B,UAA8Cb,EAOlD,WAAAhB,IAAe8B,GACpBpB,MAAMoB,GALAH,EAAAzB,KAAA,aACAyB,EAAAzB,KAAA,iBAAiB6B,KACjBJ,EAAAzB,KAAA,SAINA,KAAK8B,MAAQF,EACb5B,KAAK+B,UAAY,IAAIF,IAAYG,OAAOC,KAAKL,GAAS,CAGjD,KAAAf,CAAMI,GACX,MAAMiB,EAAkC,CAAC,EAclC,OAZAF,OAAAG,QAAQnC,KAAK8B,OAAO5B,SAAQ,EAAEkC,EAAKC,MACnCrC,KAAA+B,UAAUO,IAAIF,GACdC,EAAAxB,MACH,IAAIH,GAAM6B,IACHvC,KAAAwC,WAAWF,IAAIF,GACpBF,EAAOE,GAAOG,EACVvC,KAAKyC,eACPxB,EAAEL,KAAKoB,OAAOU,OAAOR,GAAoC,IAG/D,IAEKlC,IAAA,CAGD,WAAAyC,GAEJ,OAAAzC,KAAKwC,WAAWG,KAAO,GAAK3C,KAAKwC,WAAWG,OAAS3C,KAAK+B,UAAUY,IAAA,uICvCnE,MAAMC,UAAe9B,EAGnB,WAAAhB,IAAe8B,GACpBpB,MAAMoB,GAHAH,EAAAzB,KAAA,SAINA,KAAK8B,MAAQF,CAAA,CAGR,KAAAf,CAAMI,GAIJ,OAHFjB,KAAA8B,MAAM5B,SAASmC,IAClBA,EAAKxB,MAAMI,EAAC,IAEPjB,IAAA,ECbJ,MAAM6C,UAAsB/B,EAC1B,WAAAhB,CACGgD,EACAC,GAEFvC,MAAA,CAACsC,IAHC9C,KAAA8C,QAAAA,EACA9C,KAAA+C,QAAAA,CAAA,CAKH,KAAAlC,CAAMI,GAMJ,OALPjB,KAAK8C,QAAQjC,MACX,IAAIH,GAAM6B,IACRtB,EAAEL,KAAKZ,KAAK+C,QAAQR,GAAE,KAGnBvC,IAAA,uICTJ,MAAMgD,UAA0ClC,EAG9C,WAAAhB,IAAegC,GACpBtB,MAAMsB,GAHAL,EAAAzB,KAAA,YAINA,KAAK4B,SAAWE,CAAA,CAGX,KAAAjB,CAAMI,GACP,IAAAgC,EAEE,MAAAC,EAAWC,IACT,MAAAd,EAAOrC,KAAK4B,SAASuB,GACrBC,EAAQpD,KAAK4B,SAASuB,EAAQ,GAI/Bd,EAAAxB,MACH,IAAIH,GAAM6B,IACHa,IACSH,EAAAV,GAGVU,GACFhC,EAAEL,KAAKqC,GAGLG,IAAUH,GACZC,EAAQC,EAAQ,EAAC,IAGvB,EAKK,OAFPD,EAAQ,GAEDlD,IAAA,ECxCJ,MAAMqD,UAA2BvC,EAC/B,WAAAhB,CACGgD,EACAC,GAEFvC,MAAA,CAACsC,IAHC9C,KAAA8C,QAAAA,EACA9C,KAAA+C,QAAAA,CAAA,CAKH,KAAAlC,CAAMI,GAQJ,OAPPjB,KAAK8C,QAAQjC,MACX,IAAIH,EACFV,KAAK+C,SAASR,IACZtB,EAAEL,KAAK2B,EAAC,MAIPvC,IAAA,ECfJ,MAAMsD,UAAoBxC,EACxB,WAAAhB,CACGgD,EACAS,EACAC,GAEFhD,MAAA,CAACsC,IAJC9C,KAAA8C,QAAAA,EACA9C,KAAAuD,UAAAA,EACAvD,KAAAwD,aAAAA,CAAA,CAKH,KAAA3C,CAAMI,GAUJ,OATPjB,KAAK8C,QAAQjC,MACX,IAAIH,GAAM6B,IACJvC,KAAKuD,UAAUhB,GACjBtB,EAAEL,KAAK2B,QACwB,IAAtBvC,KAAKwD,cACZvC,EAAAL,KAAKZ,KAAKwD,aAAY,KAIvBxD,IAAA,uICnBJ,MAAMyD,UAAwB3C,EAG5B,WAAAhB,CACG4D,KACLpC,GAEGd,MAAA,CAACkD,IAHC1D,KAAA0D,UAAAA,EAHFjC,EAAAzB,KAAA,WAONA,KAAK2D,QAAUrC,CAAA,CAGV,KAAAT,CAAMI,GAOJ,OANFjB,KAAA0D,WACFnB,IACCtB,EAAEL,KAAK2B,EAAC,MAEPvC,KAAK2D,SAEH3D,IAAA,ECjBJ,MAAM4D,UAA+B9C,EACnC,WAAAhB,CACG+D,EACAC,EACAC,EACAC,EAA+C,IAAIjD,EAAG,KAE9DP,MAAM,CAACqD,EAAYC,EAAcC,EAAoBC,IAL7ChE,KAAA6D,WAAAA,EACA7D,KAAA8D,aAAAA,EACA9D,KAAA+D,mBAAAA,EACA/D,KAAAgE,qBAAAA,CAAA,CAKH,KAAAnD,CAAMI,GACX,MAAMgD,EAAI,IAAItC,EACZ3B,KAAK6D,WACL7D,KAAK8D,aACL9D,KAAK+D,mBACL/D,KAAKgE,sBAEDE,EAAW3B,IACftB,EAAEL,KAAK2B,EAAC,EAYH,OAVL0B,EAAApD,MACA,IAAIH,GAAK,EAAEyD,EAASC,EAAWC,EAAWC,MAChCH,EAAAE,GAAWD,EAAWF,GACzBlE,KAAAI,OACH,IAAIE,GAAY,KACN6D,EAAAG,GAAaF,EAAWF,EAAO,IAE3C,KAGGlE,IAAA,EChCJ,MAAMuE,UAAuBzD,EAC3B,WAAAhB,CACG0E,EACAC,GAEFjE,MAAA,CAACgE,IAHCxE,KAAAwE,EAAAA,EACAxE,KAAAyE,WAAAA,CAAA,CAKH,KAAA5D,CAAMI,GAQJ,OAPFjB,KAAAwE,EACFE,MAAMnC,IACLtB,EAAEL,KAAK2B,EAAC,IAEToC,OAAOC,IACD5E,KAAAyE,YAAY7D,KAAKgE,EAAC,IAEpB5E,IAAA,ECvBE,MAAAkB,EAAeL,GACnBA,kKCMF,MAAMgE,EAIJ,WAAA/E,GAHC2B,EAAAzB,KAAA,UACAyB,EAAAzB,KAAA,cAGDA,KAAA8E,WAAajD,IAClB7B,KAAK+E,WAAa,IAAIrE,GAAM6B,IACrBvC,KAAA8E,OAAO5E,SAAS8E,IACnBA,EAAEpE,KAAK2B,EAAC,GACT,GACF,CAGI,KAAA0C,GACL,OAAOjF,KAAK+E,UAAA,CAGP,IAAApC,GACL,OAAO3C,KAAK8E,OAAOnC,IAAA,CAGd,GAAAuC,CAAID,GACF,OAAAjF,KAAK8E,OAAOI,IAAID,EAAK,CAGvB,GAAA3C,CAAI2C,GAEF,OADFjF,KAAA8E,OAAOxC,IAAI2C,GACTjF,IAAA,CAGF,MAAAmF,CAAOH,GAEL,OADFhF,KAAA8E,OAAOM,OAAOJ,GACZhF,IAAA,CAGF,OAAAC,GAIE,OAHFD,KAAA8E,OAAO5E,SAAS8E,IACnBhF,KAAKmF,OAAOH,EAAC,IAERhF,IAAA,4JCrCJ,MAAMqF,UAAgBvE,EAOpB,WAAAhB,CAAoBkB,GACnBR,MAAA,CAACQ,IADkBhB,KAAAgB,SAAAA,EANnBS,EAAAzB,KAAA,YACRyB,EAAAzB,KAAQ,YAAY,IAAIU,GAAM6B,IAC5BvC,KAAKgB,SAAWuB,EAChBvC,KAAKsF,QAAO,IACb,CAMM,KAAAzE,CAAMI,GACX,GAAIjB,KAAKuF,SACP,MAAM,IAAIC,MACR,sEAKG,OAFPxF,KAAKuF,SAAWtE,EAChBjB,KAAKsF,SACEtF,IAAA,CAGF,KAAAiF,GACL,OAAOjF,KAAKyF,SAAA,CAGN,MAAAH,GAIC,OAHHpE,EAASlB,KAAKgB,WAAahB,KAAKuF,UAC7BvF,KAAAuF,SAAS3E,KAAKZ,KAAKgB,UAEnBhB,IAAA,EClCJ,MAAM0F,UAAuBvE,EAC3B,WAAArB,CACG6F,EACA5C,GAEFvC,QAHER,KAAA2F,SAAAA,EACA3F,KAAA+C,QAAAA,CAAA,CAKH,GAAA1B,IAAOC,GACZ,OAAOtB,KAAK+C,QAAQ/C,KAAK2F,SAAStE,OAAOC,GAAK,ECT3C,MAAMsE,UAAqBzE,EACzB,WAAArB,CAAY+F,GAEjBrF,OADgB,IAAIc,IAAoB,IAAIuE,KAAYvE,IAC3C,ECAV,MAAMwE,UAAmBhF,EACvB,WAAAhB,CACGgD,EACAiD,GAEFvF,MAAA,CAACsC,EAASiD,IAHR/F,KAAA8C,QAAAA,EACA9C,KAAA+F,UAAAA,CAAA,CAKH,KAAAlF,CAAMI,GAgBJ,OAfPjB,KAAK8C,QAAQjC,MACX,IAAIH,GAAM6B,IACR,MAAMT,EAA8B,GAClCS,EAAArC,SAAS8F,IACT,IAAIC,EAAiCD,EAC/BC,aAAmBnF,IACbmF,EAAA,IAAIlF,EAAGkF,IAEnB,MAAM5D,EAAOrC,KAAK+F,UAAU1E,IAAI4E,GAChCnE,EAAMzB,KAAKgC,EAAI,IAEJ,IAAIV,KAAOG,GACnBjB,MAAMI,EAAC,KAGTjB,IAAA,ECxBJ,MAAMkG,UAAgBpF,EACpB,WAAAhB,CAAoBgD,GACnBtC,QADmBR,KAAA8C,QAAAA,CAAA,CAIpB,KAAAjC,CAAMI,GACX,IAAIC,GAAW,EASR,OARPlB,KAAK8C,QAAQjC,MACX,IAAIH,GAAM6B,IACHrB,IACQA,GAAA,EACXD,EAAEL,KAAK2B,GAAC,KAIPvC,IAAA,EChBJ,MAAMmG,UAAoBrF,EACxB,WAAAhB,CAAoBgD,GACnBtC,MAAA,CAACsC,IADkB9C,KAAA8C,QAAAA,CAAA,CAIpB,KAAAjC,CAAMI,GACX,MAAMiB,EAAc,GAOb,OANPlC,KAAK8C,QAAQjC,MACX,IAAIH,GAAM6B,IACRL,EAAO7B,KAAKkC,GACZtB,EAAEL,KAAKsB,EAAM,KAGVlC,IAAA,4JCZJ,MAAMoG,UAAkBtF,EAItB,WAAAhB,CACGgD,EACAuD,GAAY,GAEd7F,MAAA,CAACsC,IAHC9C,KAAA8C,QAAAA,EACA9C,KAAAqG,UAAAA,EALF5E,EAAAzB,KAAA,aACAyB,EAAAzB,KAAA,aAAa,IAAI6E,GAOlB7E,KAAAI,OAAOJ,KAAKsG,YACjBtG,KAAK8C,QAAQjC,MACX,IAAIH,GAAM6B,IACRvC,KAAKsG,WAAWrB,QAAQrE,KAAK2B,GAC7BvC,KAAKiD,UAAYV,CAAA,IAErB,CAGK,KAAA1B,CAAMI,GACX,MAAMsF,EAAI,IAAIhF,GAAQyD,IAEjBhF,KAAKqG,YACNnF,EAASlB,KAAKiD,YACbjD,KAAKsG,WAAWpB,IAAIF,IAEnBA,EAAApE,KAAKZ,KAAKiD,WAETjD,KAAAsG,WAAWhE,IAAI0C,GACb,KACAhF,KAAAsG,WAAWnB,OAAOH,EAAC,KAMrB,OAHPuB,EAAE1F,MAAMI,GACRjB,KAAKI,OAAOmG,GAELvG,IAAA,CAGF,IAAAwG,GACL,OAAOxG,KAAKsG,UAAA,ECzCT,MAAMG,UAAkB3F,EACtB,WAAAhB,CAAoBgD,GACnBtC,MAAA,CAACsC,IADkB9C,KAAA8C,QAAAA,CAAA,CAIpB,KAAAjC,CAAMI,GAQJ,OAPPjB,KAAK8C,QAAQjC,MACX,IAAIH,GAAM6B,IACNA,EAAArC,SAASwG,IACTzF,EAAEL,KAAK8F,EAAE,GACV,KAGE1G,IAAA"}