{"version":3,"file":"silentium.min.mjs","sources":["../src/base/Destroyable.ts","../src/base/DestroyFunc.ts","../src/base/TheOwner.ts","../src/base/From.ts","../src/base/TheInformation.ts","../src/helpers/isFilled.ts","../src/helpers/OwnerPool.ts","../src/base/Of.ts","../src/base/Lazy.ts","../src/base/OfFunc.ts","../src/base/Void.ts","../src/base/On.ts","../src/components/All.ts","../src/components/Any.ts","../src/components/Applied.ts","../src/components/Chain.ts","../src/components/ExecutorApplied.ts","../src/components/Filtered.ts","../src/components/FromCallback.ts","../src/components/FromEvent.ts","../src/components/FromPromise.ts","../src/components/Late.ts","../src/components/Shared.ts","../src/components/SharedSource.ts","../src/components/LateShared.ts","../src/components/LazyApplied.ts","../src/components/LazyClass.ts","../src/components/Map.ts","../src/components/Once.ts","../src/components/PrimitiveSource.ts","../src/components/Sequence.ts","../src/components/Stream.ts"],"sourcesContent":["const isDestroyable = (dep: unknown): dep is Destroyable => {\n  return typeof dep === \"object\" && dep !== null && \"destroy\" in dep;\n};\n\n/**\n * Representation of Destroyable object\n */\nexport class Destroyable {\n  public static instanceCount = 0;\n  public static instancesHashMap: Record<string, number> = {};\n  private theDeps: any[];\n  private name: string;\n  public constructor(...deps: any[]) {\n    this.theDeps = deps ?? [];\n    Destroyable.instanceCount += 1;\n    this.name = this.constructor.name + \"_\" + Destroyable.instanceCount;\n    Destroyable.instancesHashMap[this.name] = 1;\n  }\n\n  public destroy() {\n    delete Destroyable.instancesHashMap[this.name];\n    this.theDeps?.forEach((dep) => {\n      if (isDestroyable(dep)) {\n        dep.destroy();\n      } else {\n        delete Destroyable.instancesHashMap[this.name];\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Add dependency what can be destroyed\n   */\n  public addDep(dep: any) {\n    this.theDeps?.push(dep);\n    return this;\n  }\n\n  public dep(dep: any) {\n    this.addDep(dep);\n    return dep;\n  }\n\n  public static getInstancesCount() {\n    return Object.keys(Destroyable.instancesHashMap).length;\n  }\n}\n","import { Destroyable } from \"./Destroyable\";\n\n/**\n * Representation of destructor function as object\n */\nexport class DestroyFunc extends Destroyable {\n  public constructor(private destructor: () => void) {\n    super();\n  }\n\n  public destroy(): this {\n    this.destructor();\n    return this;\n  }\n}\n","export interface OwnerType<T = unknown> {\n  give(value: T): this;\n}\n\n/**\n * Representation of Information Owner\n */\nexport abstract class TheOwner<T = unknown> implements OwnerType<T> {\n  public abstract give(value: T): this;\n}\n","import { TheOwner } from \"./TheOwner\";\n\n/**\n * Owner from function\n */\nexport class From<T = unknown> extends TheOwner<T> {\n  public constructor(private fn: (value: T) => void) {\n    super();\n  }\n\n  public give(value: T): this {\n    this.fn(value);\n    return this;\n  }\n}\n","import { Destroyable } from \"./Destroyable\";\nimport { Of } from \"./Of\";\nimport { OwnerType } from \"./TheOwner\";\n\nexport interface InformationType<T = unknown> {\n  value(o: OwnerType<T>): this;\n}\n\nexport type MaybeInformationType<T = unknown> = InformationType<T> | T;\n\n/**\n * Representation of Information\n */\nexport abstract class TheInformation<T = unknown>\n  extends Destroyable\n  implements InformationType<T>\n{\n  public abstract value(o: OwnerType<T>): this;\n}\n\nexport class MbInfo<T> extends TheInformation<T> {\n  private info: InformationType<T>;\n\n  public constructor(theInfo: MaybeInformationType<T>) {\n    const info =\n      typeof theInfo === \"object\" &&\n      theInfo !== null &&\n      \"value\" in theInfo &&\n      typeof theInfo.value === \"function\"\n        ? theInfo\n        : new Of(theInfo);\n    super(info);\n    this.info = info;\n  }\n\n  public value(o: OwnerType<T>): this {\n    this.info.value(o);\n    return this;\n  }\n}\n","export const isFilled = <T>(value?: T): value is T => {\n  return value !== undefined && value !== null;\n};\n","import { From, OwnerType } from \"../base\";\n\n/**\n * Helps maintain an owner list allowing different\n * owners to get information from a common source\n * https://silentium-lab.github.io/silentium/#/en/utils/owner-pool\n */\nexport class OwnerPool<T> {\n  private owners: Set<OwnerType<T>>;\n  private innerOwner: OwnerType<T>;\n\n  public constructor() {\n    this.owners = new Set<OwnerType<T>>();\n    this.innerOwner = new From((v) => {\n      this.owners.forEach((g) => {\n        g.give(v);\n      });\n    });\n  }\n\n  public owner() {\n    return this.innerOwner;\n  }\n\n  public size(): number {\n    return this.owners.size;\n  }\n\n  public has(owner: OwnerType<T>): boolean {\n    return this.owners.has(owner);\n  }\n\n  public add(owner: OwnerType<T>) {\n    this.owners.add(owner);\n    return this;\n  }\n\n  public remove(g: OwnerType<T>) {\n    this.owners.delete(g);\n    return this;\n  }\n\n  public destroy() {\n    this.owners.forEach((g) => {\n      this.remove(g);\n    });\n    return this;\n  }\n}\n","import { OwnerType } from \"./TheOwner\";\nimport { TheInformation } from \"./TheInformation\";\nimport { isFilled } from \"../helpers\";\n\n/**\n * Information from primitive value\n */\nexport class Of<T> extends TheInformation<T> {\n  public constructor(private theValue: T) {\n    super(theValue);\n  }\n\n  public value(o: OwnerType<T>): this {\n    if (isFilled(this.theValue)) {\n      o.give(this.theValue);\n    }\n    return this;\n  }\n}\n","import { Destroyable } from \"./Destroyable\";\nimport { Of } from \"./Of\";\nimport { InformationType } from \"./TheInformation\";\n\n/**\n * Ability to create information after some event\n */\nexport class Lazy<T = unknown> extends Destroyable {\n  public constructor(\n    protected buildFn?: (...args: InformationType[]) => InformationType<T>,\n  ) {\n    super();\n  }\n\n  public get(...args: InformationType[]) {\n    args.forEach((dep) => {\n      this.addDep(dep);\n    });\n    return this.buildFn?.(...args) ?? (new Of(null) as InformationType<T>);\n  }\n}\n\n/**\n * Lazy things\n */\nexport interface LazyType<R, P extends any[]> {\n  get(...args: P): R;\n}\n","import { OwnerType } from \"./TheOwner\";\nimport { TheInformation } from \"./TheInformation\";\n\ntype DestructorFnType = () => void;\n\n/**\n * Information of function\n */\nexport class OfFunc<T> extends TheInformation<T> {\n  private mbDestructor?: DestructorFnType | void;\n\n  public constructor(\n    private valueFn: (o: OwnerType<T>) => DestructorFnType | undefined | void,\n  ) {\n    super(valueFn);\n  }\n\n  public value(o: OwnerType<T>): this {\n    this.mbDestructor = this.valueFn(o);\n    return this;\n  }\n\n  public destroy(): this {\n    super.destroy();\n    this.mbDestructor?.();\n    return this;\n  }\n}\n","import { TheOwner } from \"./TheOwner\";\n\n/**\n * Silent owner\n */\nexport class Void extends TheOwner {\n  public give(): this {\n    return this;\n  }\n}\n","import { Destroyable } from \"../base/Destroyable\";\nimport { From } from \"../base/From\";\nimport { InformationType } from \"../base/TheInformation\";\nimport { Void } from \"../base/Void\";\n\n/**\n * Run information with functional owner if needed\n */\nexport class On<T = unknown> extends Destroyable {\n  public constructor(src: InformationType<T>, fn?: (value: T) => void) {\n    super(src, fn);\n    src.value(fn ? new From(fn) : new Void());\n  }\n}\n","import { From, InformationType, OwnerType, TheInformation } from \"../base\";\n\ntype ExtractTypeS<T> = T extends InformationType<infer U> ? U : never;\n\nexport type ExtractTypesFromArrayS<T extends InformationType<any>[]> = {\n  [K in keyof T]: ExtractTypeS<T[K]>;\n};\n\n/**\n * Combines multiple information sources into a single unified source\n * represented as an array containing values from all sources\n * https://silentium-lab.github.io/silentium/#/en/information/all\n */\nexport class All<const T extends InformationType[]> extends TheInformation<\n  ExtractTypesFromArrayS<T>\n> {\n  private keysKnown: Set<string>;\n  private keysFilled = new Set();\n  private infos: T;\n\n  public constructor(...theInfos: T) {\n    super(...theInfos);\n    this.infos = theInfos;\n    this.keysKnown = new Set<string>(Object.keys(theInfos));\n  }\n\n  public value(o: OwnerType<ExtractTypesFromArrayS<T>>): this {\n    const result: Record<string, unknown> = {};\n\n    Object.entries(this.infos).forEach(([key, info]) => {\n      this.keysKnown.add(key);\n      info.value(\n        new From((v) => {\n          this.keysFilled.add(key);\n          result[key] = v;\n          if (this.isAllFilled()) {\n            o.give(Object.values(result) as ExtractTypesFromArrayS<T>);\n          }\n        }),\n      );\n    });\n    return this;\n  }\n\n  private isAllFilled() {\n    return (\n      this.keysFilled.size > 0 && this.keysFilled.size === this.keysKnown.size\n    );\n  }\n}\n","import { InformationType, OwnerType, TheInformation } from \"../base\";\n\n/**\n * From a set of information sources we get\n * a common response from any source for a single owner\n * https://silentium-lab.github.io/silentium/#/en/information/any\n */\nexport class Any<T> extends TheInformation<T> {\n  private infos: InformationType<T>[];\n\n  public constructor(...theInfos: InformationType<T>[]) {\n    super(...theInfos);\n    this.infos = theInfos;\n  }\n\n  public value(o: OwnerType<T>): this {\n    this.infos.forEach((info) => {\n      info.value(o);\n    });\n    return this;\n  }\n}\n","import { From, InformationType, OwnerType, TheInformation } from \"../base\";\n\n/**\n * Information to which the function was applied to change the value\n * https://silentium-lab.github.io/silentium/#/en/information/applied\n */\nexport class Applied<T, R> extends TheInformation<R> {\n  public constructor(\n    private baseSrc: InformationType<T>,\n    private applier: (v: T) => R,\n  ) {\n    super(baseSrc);\n  }\n\n  public value(o: OwnerType<R>): this {\n    this.baseSrc.value(\n      new From((v) => {\n        o.give(this.applier(v));\n      }),\n    );\n    return this;\n  }\n}\n","import { From, InformationType, OwnerType, TheInformation } from \"../base\";\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ntype Last<T extends any[]> = T extends [...infer U, infer L] ? L : never;\n\n/**\n * The set of information sources forms a sequential chain where each source provides\n * an answer. The final answer will be the output result. If any source in the chain\n * provides a new answer, the component's overall response will be repeated.\n * https://silentium-lab.github.io/silentium/#/en/information/applied\n */\nexport class Chain<T extends InformationType[]> extends TheInformation<\n  Last<T>\n> {\n  private theInfos: T;\n\n  public constructor(...infos: T) {\n    super(...infos);\n    this.theInfos = infos;\n  }\n\n  public value(o: OwnerType<Last<T>>) {\n    let lastValue: Last<T> | undefined;\n\n    const handleI = (index: number) => {\n      const info = this.theInfos[index] as TheInformation<Last<T>>;\n      const nextI = this.theInfos[index + 1] as\n        | TheInformation<Last<T>>\n        | undefined;\n\n      info.value(\n        new From((v) => {\n          if (!nextI) {\n            lastValue = v;\n          }\n\n          if (lastValue) {\n            o.give(lastValue);\n          }\n\n          if (nextI && !lastValue) {\n            handleI(index + 1);\n          }\n        }),\n      );\n    };\n\n    handleI(0);\n\n    return this;\n  }\n}\n","import { From, InformationType, OwnerType, TheInformation } from \"../base\";\n\n/**\n * Information to which a function is applied in order\n * to control the value passing process\n * https://silentium-lab.github.io/silentium/#/en/information/applied\n */\nexport class ExecutorApplied<T> extends TheInformation<T> {\n  public constructor(\n    private baseSrc: InformationType<T>,\n    private applier: (executor: (v: T) => void) => (v: T) => void,\n  ) {\n    super(baseSrc);\n  }\n\n  public value(o: OwnerType<T>): this {\n    this.baseSrc.value(\n      new From(\n        this.applier((v) => {\n          o.give(v);\n        }),\n      ),\n    );\n    return this;\n  }\n}\n","import { From, InformationType, OwnerType, TheInformation } from \"../base\";\n\n/**\n * Information whose value is being validated\n * via a predicate; if the predicate returns true, the value\n * can be passed to the output\n * https://silentium-lab.github.io/silentium/#/en/information/filtered\n */\nexport class Filtered<T> extends TheInformation<T> {\n  public constructor(\n    private baseSrc: InformationType<T>,\n    private predicate: (v: T) => boolean,\n    private defaultValue?: T,\n  ) {\n    super(baseSrc);\n  }\n\n  public value(o: OwnerType<T>): this {\n    this.baseSrc.value(\n      new From((v) => {\n        if (this.predicate(v)) {\n          o.give(v);\n        } else if (this.defaultValue !== undefined) {\n          o.give(this.defaultValue);\n        }\n      }),\n    );\n    return this;\n  }\n}\n","import { OwnerType, TheInformation } from \"../base\";\n\n/**\n * When receiving a reference to a function expecting a callback, the component\n * creates its own callback, and the data received in this callback\n * will become the value of the information object\n * https://silentium-lab.github.io/silentium/#/en/information/from-callback\n */\nexport class FromCallback<T> extends TheInformation<T> {\n  private theArgs: unknown[];\n\n  public constructor(\n    private waitForCb: (cb: (v: T) => any, ...args: unknown[]) => unknown,\n    ...args: unknown[]\n  ) {\n    super(waitForCb);\n    this.theArgs = args;\n  }\n\n  public value(o: OwnerType<T>): this {\n    this.waitForCb(\n      (v) => {\n        o.give(v);\n      },\n      ...this.theArgs,\n    );\n    return this;\n  }\n}\n","import { DestroyFunc } from \"../base/DestroyFunc\";\nimport { From, InformationType, Of, OwnerType, TheInformation } from \"../base\";\nimport { All } from \"./All\";\n\n/**\n * A component that receives data from an event and\n * presents it as an information object\n * https://silentium-lab.github.io/silentium/#/en/information/from-event\n */\nexport class FromEvent<T = unknown> extends TheInformation<T> {\n  public constructor(\n    private emitterSrc: InformationType<any>,\n    private eventNameSrc: InformationType<string>,\n    private subscribeMethodSrc: InformationType<string>,\n    private unsubscribeMethodSrc: InformationType<string> = new Of(\"\"),\n  ) {\n    super(emitterSrc, eventNameSrc, subscribeMethodSrc, unsubscribeMethodSrc);\n  }\n\n  public value(o: OwnerType<T>): this {\n    const a = new All(\n      this.emitterSrc,\n      this.eventNameSrc,\n      this.subscribeMethodSrc,\n      this.unsubscribeMethodSrc,\n    );\n    const handler = (v: T) => {\n      o.give(v);\n    };\n    a.value(\n      new From(([emitter, eventName, subscribe, unsubscribe]) => {\n        if (!emitter?.[subscribe]) {\n          return;\n        }\n        emitter[subscribe](eventName, handler);\n        this.addDep(\n          new DestroyFunc(() => {\n            emitter[unsubscribe](eventName, handler);\n          }),\n        );\n      }),\n    );\n    return this;\n  }\n}\n","import { OwnerType, TheInformation } from \"../base\";\n\n/**\n * Component that gets a value from a promise and\n * presents it as information\n * https://silentium-lab.github.io/silentium/#/en/information/from-promise\n */\nexport class FromPromise<T> extends TheInformation<T> {\n  public constructor(\n    private p: Promise<T>,\n    private errorOwner?: OwnerType,\n  ) {\n    super(p);\n  }\n\n  public value(o: OwnerType<T>): this {\n    this.p\n      .then((v) => {\n        o.give(v);\n      })\n      .catch((e) => {\n        this.errorOwner?.give(e);\n      });\n    return this;\n  }\n}\n","import { From, OwnerType, TheInformation } from \"../base\";\nimport { isFilled } from \"../helpers\";\n\n/**\n * A component that allows creating linked objects of information and its owner\n * in such a way that if a new value is assigned to the owner, this value\n * will become the value of the linked information source\n * https://silentium-lab.github.io/silentium/#/en/information/of\n */\nexport class Late<T> extends TheInformation<T> implements OwnerType<T> {\n  private theOwner?: OwnerType<T>;\n  private lateOwner = new From((v: T) => {\n    this.theValue = v;\n    this.notify();\n  });\n\n  public constructor(private theValue?: T) {\n    super(theValue);\n  }\n\n  public value(o: OwnerType<T>): this {\n    if (this.theOwner) {\n      throw new Error(\n        \"Late component gets new owner, when another was already connected!\",\n      );\n    }\n    this.theOwner = o;\n    this.notify();\n    return this;\n  }\n\n  public give(v: T) {\n    this.theValue = v;\n    this.lateOwner.give(v);\n    return this;\n  }\n\n  private notify() {\n    if (isFilled(this.theValue) && this.theOwner) {\n      this.theOwner.give(this.theValue);\n    }\n    return this;\n  }\n}\n","import { isFilled, OwnerPool } from \"../helpers\";\nimport {\n  From,\n  InformationType,\n  OfFunc,\n  OwnerType,\n  TheInformation,\n} from \"../base\";\n\n/**\n * An information object that helps multiple owners access\n * a single another information object\n * https://silentium-lab.github.io/silentium/#/en/information/pool\n */\nexport class Shared<T> extends TheInformation<T> implements OwnerType<T> {\n  private lastValue: T | undefined;\n  private ownersPool = new OwnerPool<T>();\n\n  public constructor(\n    private baseSrc: InformationType<T>,\n    private stateless = false,\n  ) {\n    super(baseSrc);\n    this.addDep(this.ownersPool);\n    this.baseSrc.value(\n      new From((v) => {\n        this.ownersPool.owner().give(v);\n        this.lastValue = v;\n      }),\n    );\n  }\n\n  public value(o: OwnerType<T>): this {\n    const i = new OfFunc((g: OwnerType<T>) => {\n      if (\n        !this.stateless &&\n        isFilled(this.lastValue) &&\n        !this.ownersPool.has(g)\n      ) {\n        g.give(this.lastValue);\n      }\n      this.ownersPool.add(g);\n      return () => {\n        this.ownersPool.remove(g);\n      };\n    });\n    i.value(o);\n    this.addDep(i);\n\n    return this;\n  }\n\n  public pool() {\n    return this.ownersPool;\n  }\n\n  public give(value: T) {\n    this.lastValue = value;\n    this.ownersPool.owner().give(value);\n    return this;\n  }\n}\n","import { Shared } from \"../components/Shared\";\nimport { OwnerType, SourceType, TheInformation } from \"../base\";\n\nexport class SharedSource<T> extends TheInformation<T> implements OwnerType<T> {\n  private sharedSrc: Shared<T>;\n\n  public constructor(\n    private baseSrc: SourceType<T>,\n    stateless = false,\n  ) {\n    const sharedSrc = new Shared(baseSrc, stateless);\n    super(sharedSrc);\n    this.sharedSrc = sharedSrc;\n  }\n\n  public value(o: OwnerType<T>): this {\n    this.sharedSrc.value(o);\n    return this;\n  }\n\n  public give(value: T): this {\n    this.baseSrc.give(value);\n    return this;\n  }\n}\n","import { OwnerType, SourceType, TheInformation } from \"../base\";\nimport { Late } from \"../components/Late\";\nimport { SharedSource } from \"../components/SharedSource\";\n\nexport class LateShared<T> extends TheInformation<T> implements SourceType<T> {\n  private src: SharedSource<T>;\n\n  public constructor(private theValue?: T) {\n    super(theValue);\n    this.src = new SharedSource(new Late(theValue));\n  }\n\n  public value(o: OwnerType<T>): this {\n    this.src.value(o);\n    return this;\n  }\n\n  public give(value: T): this {\n    this.src.give(value);\n    return this;\n  }\n}\n","import { InformationType, Lazy } from \"../base\";\n\n/**\n * Lazy with applied function to its results\n */\nexport class LazyApplied<T> extends Lazy<T> {\n  public constructor(\n    private baseLazy: Lazy,\n    private applier: (i: InformationType) => InformationType<T>,\n  ) {\n    super();\n  }\n\n  public get(...args: InformationType[]): InformationType<T> {\n    return this.applier(this.baseLazy.get(...args));\n  }\n}\n","import { Lazy } from \"../base\";\n\n/**\n * Lazy instance from class constructor\n */\nexport class LazyClass<T> extends Lazy<T> {\n  public constructor(constrFn: any) {\n    const buildFn = (...args: unknown[]) => new constrFn(...args);\n    super(buildFn);\n  }\n}\n","import {\n  Destroyable,\n  From,\n  InformationType,\n  Lazy,\n  Of,\n  OwnerType,\n  TheInformation,\n} from \"../base\";\nimport { All } from \"./All\";\n\n/**\n * Component that applies an info object constructor to each data item,\n * producing an information source with new values\n * https://silentium-lab.github.io/silentium/#/en/information/map\n */\nexport class Map<T, TG> extends TheInformation<TG[]> {\n  public constructor(\n    private baseSrc: InformationType<T[]>,\n    private targetSrc: Lazy<TG>,\n  ) {\n    super(baseSrc, targetSrc);\n  }\n\n  public value(o: OwnerType<TG[]>) {\n    const infos: InformationType<TG>[] = [];\n    this.baseSrc.value(\n      new From((v) => {\n        infos.forEach((i) => {\n          (i as unknown as Destroyable)?.destroy();\n        });\n        infos.length = 0;\n        v.forEach((val) => {\n          let valInfo: InformationType<T> | T = val;\n          if (!(valInfo instanceof TheInformation)) {\n            valInfo = new Of(valInfo);\n          }\n          const info = this.targetSrc.get(valInfo);\n          infos.push(info);\n        });\n        const allI = new All(...infos);\n        allI.value(o);\n      }),\n    );\n    return this;\n  }\n}\n","import { From, InformationType, OwnerType, TheInformation } from \"../base\";\n\n/**\n * Limits the number of values from the information source\n * to a single value - once the first value is emitted, no more\n * values are delivered from the source\n * https://silentium-lab.github.io/silentium/#/en/information/once\n */\nexport class Once<T> extends TheInformation<T> {\n  public constructor(private baseSrc: InformationType<T>) {\n    super();\n  }\n\n  public value(o: OwnerType<T>): this {\n    let isFilled = false;\n    this.baseSrc.value(\n      new From((v) => {\n        if (!isFilled) {\n          isFilled = true;\n          o.give(v);\n        }\n      }),\n    );\n    return this;\n  }\n}\n","import { From, InformationType } from \"../base\";\n\nexport class PrimitiveSource<T> {\n  public constructor(\n    baseSrc: InformationType<T>,\n    private theValue: T | null = null,\n  ) {\n    baseSrc.value(\n      new From((v) => {\n        this.theValue = v;\n      }),\n    );\n  }\n\n  public [Symbol.toPrimitive]() {\n    return this.theValue;\n  }\n}\n","import { From, InformationType, OwnerType, TheInformation } from \"../base\";\n\n/**\n * A component that takes one value at a time and returns\n * an array of all previous values\n * https://silentium-lab.github.io/silentium/#/en/information/sequence\n */\nexport class Sequence<T> extends TheInformation<T[]> {\n  public constructor(private baseSrc: InformationType<T>) {\n    super(baseSrc);\n  }\n\n  public value(o: OwnerType<T[]>): this {\n    const result: T[] = [];\n    this.baseSrc.value(\n      new From((v) => {\n        result.push(v);\n        o.give(result);\n      }),\n    );\n    return this;\n  }\n}\n","import { From, InformationType, OwnerType, TheInformation } from \"../base\";\n\n/**\n * Component that receives a data array and yields values one by one\n * https://silentium-lab.github.io/silentium/#/en/information/stream\n */\nexport class Stream<T> extends TheInformation<T> {\n  public constructor(private baseSrc: InformationType<T[]>) {\n    super(baseSrc);\n  }\n\n  public value(o: OwnerType<T>): this {\n    this.baseSrc.value(\n      new From((v) => {\n        v.forEach((cv) => {\n          o.give(cv);\n        });\n      }),\n    );\n    return this;\n  }\n}\n"],"names":["_Destroyable","constructor","deps","__publicField","this","theDeps","instanceCount","name","instancesHashMap","destroy","forEach","dep","isDestroyable","addDep","push","getInstancesCount","Object","keys","length","Destroyable","DestroyFunc","destructor","super","TheOwner","From","fn","give","value","TheInformation","MbInfo","theInfo","info","Of","o","isFilled","OwnerPool","owners","Set","innerOwner","v","g","owner","size","has","add","remove","delete","theValue","Lazy","buildFn","get","args","OfFunc","valueFn","mbDestructor","Void","On","src","All","theInfos","infos","keysKnown","result","entries","key","keysFilled","isAllFilled","values","Any","Applied","baseSrc","applier","Chain","lastValue","handleI","index","nextI","ExecutorApplied","Filtered","predicate","defaultValue","FromCallback","waitForCb","theArgs","FromEvent","emitterSrc","eventNameSrc","subscribeMethodSrc","unsubscribeMethodSrc","a","handler","emitter","eventName","subscribe","unsubscribe","FromPromise","p","errorOwner","then","catch","e","Late","notify","theOwner","Error","lateOwner","Shared","stateless","ownersPool","i","pool","SharedSource","sharedSrc","LateShared","LazyApplied","baseLazy","LazyClass","constrFn","Map","targetSrc","val","valInfo","Once","PrimitiveSource","Symbol","toPrimitive","Sequence","Stream","cv"],"mappings":"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"}