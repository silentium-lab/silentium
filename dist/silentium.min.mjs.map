{"version":3,"file":"silentium.min.mjs","sources":["../src/helpers/guards.ts","../src/helpers/ensures.ts","../src/base/Component.ts","../src/base/ComponentClass.ts","../src/base/DestroyContainer.ts","../src/base/Event.ts","../src/base/Local.ts","../src/base/Of.ts","../src/base/Void.ts","../src/helpers/OwnerPool.ts","../src/base/Transport.ts","../src/components/All.ts","../src/components/Any.ts","../src/components/Applied.ts","../src/components/Catch.ts","../src/components/Chain.ts","../src/components/ExecutorApplied.ts","../src/components/Filtered.ts","../src/components/FromEvent.ts","../src/components/FromPromise.ts","../src/components/Late.ts","../src/components/Once.ts","../src/components/Shared.ts","../src/components/SharedSource.ts","../src/components/LateShared.ts","../src/components/Map.ts","../src/components/Primitive.ts","../src/components/Sequence.ts","../src/components/Stream.ts","../src/components/TransportApplied.ts","../src/components/TransportArgs.ts","../src/components/TransportDestroyable.ts"],"sourcesContent":["import { DestroyableType, EventType, TransportType } from \"../types\";\n\nexport const isFilled = <T>(\n  value?: T,\n): value is Exclude<T, null | undefined> => {\n  return value !== undefined && value !== null;\n};\n\nexport function isEvent<T>(o: T): o is T & EventType {\n  return (\n    o !== null &&\n    typeof o === \"object\" &&\n    \"event\" in o &&\n    typeof (o as any).event === \"function\"\n  );\n}\n\nexport function isDestroyable<T>(o: T): o is T & DestroyableType {\n  return (\n    o !== null &&\n    typeof o === \"object\" &&\n    \"destroy\" in o &&\n    typeof (o as any).destroy === \"function\"\n  );\n}\n\nexport function isTransport<T>(o: T): o is T & TransportType {\n  return (\n    o !== null &&\n    typeof o === \"object\" &&\n    \"use\" in o &&\n    typeof (o as any).use === \"function\"\n  );\n}\n","import { isEvent, isTransport } from \"../helpers/guards\";\n\nexport function ensureFunction(v: unknown, label: string) {\n  if (typeof v !== \"function\") {\n    throw new Error(`${label}: is not function`);\n  }\n}\n\nexport function ensureEvent(v: unknown, label: string) {\n  if (!isEvent(v)) {\n    throw new Error(`${label}: is not event`);\n  }\n}\n\nexport function ensureTransport(v: unknown, label: string) {\n  if (!isTransport(v)) {\n    throw new Error(`${label}: is not transport`);\n  }\n}\n","import {\n  DestroyableType,\n  EventType,\n  EventTypeValue,\n  TransportType,\n} from \"../types\";\n\n/**\n * Create a function component that\n * will emit an event with specified arguments\n * and specified type\n */\nexport function Component<T, P extends Array<any>>(\n  executor: (\n    this: TransportType<P[0] extends EventType ? EventTypeValue<P[0]> : T>,\n    ...args: P\n  ) => void | (() => void),\n): (\n  ...args: P\n) => (P[0] extends EventType ? EventType<EventTypeValue<P[0]>> : EventType<T>) &\n  DestroyableType {\n  return (...args) => {\n    let destructor: void | (() => void);\n    return {\n      event(\n        transport: TransportType<\n          P[0] extends EventType ? EventTypeValue<P[0]> : T\n        >,\n      ) {\n        destructor = executor.call(transport, ...args);\n        return this;\n      },\n      destroy() {\n        if (destructor !== undefined) {\n          destructor();\n        }\n        return this;\n      },\n    } as any;\n  };\n}\n","import {\n  DestroyableType,\n  EventType,\n  EventTypeValue,\n  SourceType,\n} from \"../types\";\n\ntype ConstructableType = { new (...args: any[]): any };\n\nexport function ComponentClass<T extends ConstructableType>(\n  classConstructor: T,\n): <R = null>(\n  ...args: ConstructorParameters<T>\n) => R extends null\n  ? ConstructorParameters<T>[0] extends EventType\n    ? InstanceType<T> extends SourceType\n      ? InstanceType<T> extends DestroyableType\n        ? SourceType<EventTypeValue<ConstructorParameters<T>[0]>> &\n            DestroyableType\n        : SourceType<EventTypeValue<ConstructorParameters<T>[0]>>\n      : InstanceType<T> extends DestroyableType\n        ? EventType<EventTypeValue<ConstructorParameters<T>[0]>> &\n            DestroyableType\n        : EventType<EventTypeValue<ConstructorParameters<T>[0]>>\n    : InstanceType<T>\n  : R extends EventType\n    ? R\n    : EventType<R> {\n  return (...args) => new classConstructor(...args);\n}\n","import { DestroyableType } from \"../types\";\n\n/**\n * An object that allows collecting all disposable objects and\n * disposing them later all together\n */\nexport function DestroyContainer() {\n  return new TheDestroyContainer();\n}\n\nclass TheDestroyContainer implements DestroyableType {\n  private destructors: DestroyableType[] = [];\n\n  public add(e: DestroyableType) {\n    this.destructors.push(e);\n    return this;\n  }\n\n  public destroy() {\n    this.destructors.forEach((d) => d.destroy());\n    return this;\n  }\n}\n","import { ensureFunction } from \"../helpers\";\nimport { DestroyableType, EventType, TransportType } from \"../types\";\n\ntype EventExecutor<T> = (transport: TransportType<T>) => void | (() => void);\n\n/**\n * An event created from an executor function.\n * The executor function can return an event destruction function.\n */\nexport function Event<T>(eventExecutor: EventExecutor<T>) {\n  return new TheEvent<T>(eventExecutor);\n}\n\nclass TheEvent<T> implements EventType<T>, DestroyableType {\n  private mbDestructor: unknown;\n\n  public constructor(private eventExecutor: EventExecutor<T>) {\n    ensureFunction(eventExecutor, \"Event: eventExecutor\");\n  }\n\n  public event(transport: TransportType<T>) {\n    this.mbDestructor = this.eventExecutor(transport);\n    return this;\n  }\n\n  public destroy() {\n    if (typeof this.mbDestructor === \"function\") {\n      this.mbDestructor?.();\n    }\n    return this;\n  }\n}\n","import { ensureEvent } from \"../helpers\";\nimport { DestroyableType, EventType, TransportType } from \"../types\";\nimport { TransportParent } from \"./Transport\";\n\n/**\n * Create local copy of source what can be destroyed\n */\nexport function Local<T>($base: EventType<T>) {\n  return new TheLocal<T>($base);\n}\n\nclass TheLocal<T> implements EventType<T>, DestroyableType {\n  private destroyed = false;\n\n  public constructor(private $base: EventType<T>) {\n    ensureEvent($base, \"Local: $base\");\n  }\n\n  public event(transport: TransportType<T>): this {\n    this.$base.event(this.transport.child(transport));\n    return this;\n  }\n\n  private transport = TransportParent(function (v: T, child: TheLocal<T>) {\n    if (!child.destroyed) {\n      this.use(v);\n    }\n  }, this);\n\n  public destroy(): this {\n    return this;\n  }\n}\n","import { EventType, TransportType } from \"../types\";\n\n/**\n * Helps convert a value into an event\n */\nexport function Of<T>(value: T) {\n  return new TheOf<T>(value);\n}\n\nclass TheOf<T> implements EventType<T> {\n  public constructor(private value: T) {}\n\n  public event(transport: TransportType<T>): this {\n    transport.use(this.value);\n    return this;\n  }\n}\n","import { TransportType } from \"../types\";\n\n/**\n * Transport that does nothing with the passed value,\n * needed for silent event triggering\n */\nexport function Void() {\n  return new TheVoid();\n}\n\nclass TheVoid implements TransportType {\n  public use(): this {\n    return this;\n  }\n}\n","import { Transport } from \"../base\";\nimport { TransportType } from \"../types\";\n\n/**\n * Helps maintain an owner list allowing different\n * owners to get information from a common source\n * https://silentium-lab.github.io/silentium/#/en/utils/owner-pool\n */\nexport class OwnerPool<T> {\n  private owners: Set<TransportType<T>>;\n  private innerOwner: TransportType<T>;\n\n  public constructor() {\n    this.owners = new Set<TransportType<T>>();\n    this.innerOwner = Transport((v) => {\n      this.owners.forEach((g) => {\n        g.use(v);\n      });\n    });\n  }\n\n  public owner() {\n    return this.innerOwner;\n  }\n\n  public size(): number {\n    return this.owners.size;\n  }\n\n  public has(owner: TransportType<T>): boolean {\n    return this.owners.has(owner);\n  }\n\n  public add(owner: TransportType<T>) {\n    this.owners.add(owner);\n    return this;\n  }\n\n  public remove(g: TransportType<T>) {\n    this.owners.delete(g);\n    return this;\n  }\n\n  public destroy() {\n    this.owners.forEach((g) => {\n      this.remove(g);\n    });\n    return this;\n  }\n}\n","import { ensureFunction } from \"../helpers\";\nimport { EventType, TransportType } from \"../types\";\n\n/**\n * Type of value transfer logic executor\n */\nexport type TransportExecutor<T> = (v: T) => void;\n\n/**\n * Base transport that accepts the passed value,\n * acts as a conductor to deliver the value from an event to somewhere\n */\nexport function Transport<T>(transportExecutor: TransportExecutor<T>) {\n  return new TheTransport<T>(transportExecutor);\n}\n\nclass TheTransport<T> implements TransportType<T> {\n  public constructor(private transportExecutor: TransportExecutor<T>) {\n    ensureFunction(transportExecutor, \"Transport: transport executor\");\n  }\n\n  public use(value: T) {\n    this.transportExecutor(value);\n    return this;\n  }\n}\n\n/**\n * Type of executor for value passing logic and event returning\n */\nexport type TransportEventExecutor<T, ET = T> = (v: T) => EventType<ET>;\n\n/**\n * A transport that delivers a value from one event\n * and returns another event based on the value\n */\nexport function TransportEvent<T, ET = any>(\n  transportExecutor: TransportEventExecutor<T, ET>,\n) {\n  return new TheTransportEvent<T, ET>(transportExecutor);\n}\n\nclass TheTransportEvent<T, ET = T> implements TransportType<T, EventType<ET>> {\n  public constructor(private executor: TransportEventExecutor<T, ET>) {\n    ensureFunction(executor, \"TheTransportEvent: transport executor\");\n  }\n\n  public use(value: T) {\n    return this.executor(value);\n  }\n}\n\n/**\n * A transport that accepts a child transport\n * to perform some transformation on the value\n * during its transmission\n */\nexport function TransportParent<T>(\n  executor: (this: TransportType, v: T, ...context: any[]) => void,\n  ...args: any[]\n) {\n  return new TheTransportParent<T>(executor, args);\n}\n\nclass TheTransportParent<T> implements TransportType<T> {\n  public constructor(\n    private executor: (this: TransportType, v: T, ...context: any[]) => void,\n    private args: any[] = [],\n    private _child?: TransportType<T>,\n  ) {\n    ensureFunction(executor, \"ParentTransport: executor\");\n  }\n\n  public use(value: T): this {\n    if (this._child === undefined) {\n      throw new Error(\"no base transport\");\n    }\n    this.executor.call(this._child, value, ...this.args);\n    return this;\n  }\n\n  public child(transport: TransportType, ...args: any[]) {\n    return new TheTransportParent(\n      this.executor,\n      [...this.args, ...args],\n      transport,\n    );\n  }\n}\n","import { TransportParent } from \"../base/Transport\";\nimport { ensureEvent } from \"../helpers\";\nimport { EventType, TransportType } from \"../types\";\n\ntype ExtractTypeS<T> = T extends EventType<infer U> ? U : never;\n\ntype ExtractTypesFromArrayS<T extends EventType<any>[]> = {\n  [K in keyof T]: ExtractTypeS<T[K]>;\n};\n\nconst isAllFilled = (keysFilled: Set<string>, keysKnown: Set<string>) => {\n  return keysFilled.size > 0 && keysFilled.size === keysKnown.size;\n};\n\n/**\n * An event that represents values from\n * all provided events as an array.\n * When all events emit their values,\n * the combined value will be returned.\n * If at least one event later emits a new\n * value, the updated array with the new value\n * will be emitted by All.\n */\nexport function All<const T extends EventType[]>(...events: T) {\n  return new TheAll<T>(...events);\n}\n\nclass TheAll<const T extends EventType[]>\n  implements EventType<ExtractTypesFromArrayS<T>>\n{\n  private known: Set<string>;\n  private filled = new Set<string>();\n  private $events: T;\n  private result: Record<string, unknown> = {};\n\n  public constructor(...events: T) {\n    this.known = new Set<string>(Object.keys(events));\n    this.$events = events;\n  }\n\n  public event(transport: TransportType<ExtractTypesFromArrayS<T>>): this {\n    Object.entries(this.$events).forEach(([key, event]) => {\n      ensureEvent(event, \"All: item\");\n      this.known.add(key);\n      event.event(this.transport.child(transport, key));\n    });\n    return this;\n  }\n\n  private transport = TransportParent(function (\n    v: T,\n    child: TheAll<T>,\n    key: string,\n  ) {\n    child.filled.add(key);\n    child.result[key] = v;\n    if (isAllFilled(child.filled, child.known)) {\n      this.use(Object.values(child.result) as ExtractTypesFromArrayS<T>);\n    }\n  }, this);\n}\n","import { ensureEvent } from \"../helpers\";\nimport { EventType, TransportType } from \"../types\";\n\n/**\n * An event that emits values received from\n * any of its bound events\n */\nexport function Any<T>(...events: EventType<T>[]) {\n  return new TheAny(...events);\n}\n\nclass TheAny<T> implements EventType<T> {\n  private $events: EventType[];\n\n  public constructor(...events: EventType<T>[]) {\n    this.$events = events;\n  }\n\n  public event(transport: TransportType<T>): this {\n    this.$events.forEach((event) => {\n      ensureEvent(event, \"Any: item\");\n      event.event(transport);\n    });\n    return this;\n  }\n}\n","import { TransportParent } from \"../base/Transport\";\nimport { ensureEvent } from \"../helpers\";\nimport { ConstructorType, EventType, TransportType } from \"../types\";\n\n/**\n * An event that applies a function\n * to the value of the base event\n */\nexport function Applied<T, R>(\n  $base: EventType<T>,\n  applier: ConstructorType<[T], R>,\n) {\n  return new TheApplied<T, R>($base, applier);\n}\n\nclass TheApplied<T, R> implements EventType<R> {\n  public constructor(\n    private $base: EventType<T>,\n    private applier: ConstructorType<[T], R>,\n  ) {\n    ensureEvent($base, \"Applied: base\");\n  }\n\n  public event(transport: TransportType<R>) {\n    this.$base.event(this.transport.child(transport));\n    return this;\n  }\n\n  private transport = TransportParent(function (v: T, child: TheApplied<T, R>) {\n    this.use(child.applier(v));\n  }, this);\n}\n","import { ensureEvent, ensureTransport } from \"../helpers\";\nimport { EventType, TransportType } from \"../types\";\n\n/**\n * An event representing a base event where\n * its operation is wrapped in try-catch\n * and expects exceptions. If an exception\n * bubbles up, it's passed to the transports\n * as errorMessage and errorOriginal\n */\nexport function Catch<T>(\n  $base: EventType<T>,\n  errorMessage: TransportType,\n  errorOriginal?: TransportType,\n) {\n  return new TheCatch<T>($base, errorMessage, errorOriginal);\n}\n\nclass TheCatch<T> implements EventType<T> {\n  public constructor(\n    private $base: EventType<T>,\n    private errorMessage: TransportType,\n    private errorOriginal?: TransportType,\n  ) {\n    ensureEvent($base, \"Catch: base\");\n    ensureTransport(errorMessage, \"Catch: errorMessage\");\n    if (errorOriginal !== undefined) {\n      ensureTransport(errorOriginal, \"Catch: errorOriginal\");\n    }\n  }\n\n  public event(transport: TransportType<T>) {\n    try {\n      this.$base.event(transport);\n    } catch (e: any) {\n      if (e instanceof Error) {\n        this.errorMessage.use(e.message);\n      } else {\n        this.errorMessage.use(e);\n      }\n      if (this.errorOriginal) {\n        this.errorOriginal.use(e);\n      }\n    }\n    return this;\n  }\n}\n","import { TransportParent } from \"../base/Transport\";\nimport { EventType, TransportType } from \"../types\";\nimport { EventTypeValue } from \"../types/EventType\";\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ntype Last<T extends any[]> = T extends [...infer _, infer L] ? L : never;\n\n/**\n * Chains events together and triggers\n * the last event only when all previous events\n * have emitted their values. The value of Chain will be the value\n * of the last event. If any events\n * emit a value again after the overall Chain response was already returned,\n * then Chain emits again with the value of the last event.\n */\nexport function Chain<T extends EventType[]>(...events: T) {\n  return new TheChain<T>(...events);\n}\n\nexport class TheChain<T extends EventType[]>\n  implements EventType<EventTypeValue<Last<T>>>\n{\n  private $events: T;\n  private $latest: EventTypeValue<Last<T>> | undefined;\n\n  public constructor(...events: T) {\n    this.$events = events;\n  }\n\n  public event(transport: TransportType<EventTypeValue<Last<T>>>) {\n    this.handleEvent(0, transport);\n    return this;\n  }\n\n  private handleEvent = (index: number, transport: TransportType) => {\n    const event = this.$events[index] as Last<T>;\n    const next = this.$events[index + 1] as Last<T> | undefined;\n    event.event(this.oneEventTransport.child(transport, next, index));\n  };\n\n  private oneEventTransport = TransportParent(function (\n    v: EventTypeValue<Last<T>>,\n    child: TheChain<T>,\n    next: Last<T> | undefined,\n    index: number,\n  ) {\n    if (!next) {\n      child.$latest = v as EventTypeValue<Last<T>>;\n    }\n    if (child.$latest) {\n      this.use(child.$latest);\n    }\n    if (next && !child.$latest) {\n      child.handleEvent(index + 1, this);\n    }\n  }, this);\n}\n","import { Transport, TransportExecutor } from \"../base\";\nimport { ensureEvent } from \"../helpers\";\nimport { EventType, TransportType } from \"../types\";\n\ntype ExecutorApplier<T> = (\n  executor: TransportExecutor<T>,\n) => TransportExecutor<T>;\n\n/**\n * Applies a value transfer function to the transport\n * and returns the same value transfer function for the transport\n * Useful for applying functions like debounced or throttle\n */\nexport function ExecutorApplied<T>(\n  $base: EventType<T>,\n  applier: ExecutorApplier<T>,\n) {\n  return new TheExecutorApplied($base, applier);\n}\n\nclass TheExecutorApplied<T> implements EventType<T> {\n  public constructor(\n    private $base: EventType<T>,\n    private applier: ExecutorApplier<T>,\n  ) {\n    ensureEvent($base, \"ExecutorApplied: base\");\n  }\n\n  public event(transport: TransportType<T>) {\n    const ExecutorAppliedBaseTransport = this.applier(\n      transport.use.bind(transport),\n    );\n    this.$base.event(Transport(ExecutorAppliedBaseTransport));\n    return this;\n  }\n}\n","import { TransportParent } from \"../base/Transport\";\nimport { ConstructorType, EventType, TransportType } from \"../types\";\n\nexport function Filtered<T>(\n  $base: EventType<T>,\n  predicate: ConstructorType<[T], boolean>,\n  defaultValue?: T,\n) {\n  return new TheFiltered<T>($base, predicate, defaultValue);\n}\n\nclass TheFiltered<T> implements EventType<T> {\n  public constructor(\n    private $base: EventType<T>,\n    private predicate: ConstructorType<[T], boolean>,\n    private defaultValue?: T,\n  ) {}\n\n  public event(transport: TransportType<T>) {\n    this.$base.event(this.parent.child(transport));\n    return this;\n  }\n\n  private parent = TransportParent<T>(function (v, child: TheFiltered<T>) {\n    if (child.predicate(v)) {\n      this.use(v);\n    } else if (child.defaultValue !== undefined) {\n      this.use(child.defaultValue);\n    }\n  }, this);\n}\n","import { Transport, TransportParent } from \"../base/Transport\";\nimport { EventType, TransportType } from \"../types\";\nimport { DestroyableType } from \"../types/EventType\";\nimport { All } from \"./All\";\n\n/**\n * An event derived from another event with a different\n * method call interface, based on callbacks.\n * Allows attaching a custom handler to an existing event source\n * and presenting it as a silentium event\n */\nexport function FromEvent<T>(\n  $emitter: EventType<any>,\n  $eventName: EventType<string>,\n  $subscribeMethod: EventType<string>,\n  $unsubscribeMethod?: EventType<string>,\n) {\n  return new TheFromEvent<T>(\n    $emitter,\n    $eventName,\n    $subscribeMethod,\n    $unsubscribeMethod,\n  );\n}\n\nclass TheFromEvent<T> implements EventType<T>, DestroyableType {\n  private lastTransport: TransportType<T> | null = null;\n  private handler = (v: T) => {\n    if (this.lastTransport) {\n      this.lastTransport.use(v);\n    }\n  };\n\n  public constructor(\n    private $emitter: EventType<any>,\n    private $eventName: EventType<string>,\n    private $subscribeMethod: EventType<string>,\n    private $unsubscribeMethod?: EventType<string>,\n  ) {}\n\n  public event(transport: TransportType<T>): this {\n    const a = All(this.$emitter, this.$eventName, this.$subscribeMethod);\n    a.event(this.parent.child(transport));\n    return this;\n  }\n\n  private parent = TransportParent<[any, string, string]>(function (\n    [emitter, eventName, subscribe],\n    child,\n  ) {\n    child.lastTransport = this;\n    if (!emitter?.[subscribe]) {\n      return;\n    }\n    emitter[subscribe](eventName, child.handler);\n  }, this);\n\n  public destroy(): this {\n    this.lastTransport = null;\n    if (!this.$unsubscribeMethod) {\n      return this;\n    }\n    const a = All(this.$emitter, this.$eventName, this.$unsubscribeMethod);\n    a.event(\n      Transport(([emitter, eventName, unsubscribe]) => {\n        emitter?.[unsubscribe]?.(eventName, this.handler);\n      }),\n    );\n    return this;\n  }\n}\n","import { EventType, TransportType } from \"../types\";\n\n/**\n * Promise event\n */\nexport function FromPromise<T>(p: Promise<T>, errorOwner?: TransportType) {\n  return new TheFromPromise<T>(p, errorOwner);\n}\n\nexport class TheFromPromise<T> implements EventType<T> {\n  public constructor(\n    private p: Promise<T>,\n    private errorOwner?: TransportType,\n  ) {}\n\n  public event(transport: TransportType<T>): this {\n    this.p\n      .then(function FromPromiseThen(v) {\n        transport.use(v);\n      })\n      .catch((e) => {\n        this.errorOwner?.use(e);\n      });\n    return this;\n  }\n}\n","import { isFilled } from \"../helpers\";\nimport { TransportType, SourceType } from \"../types\";\n\n/**\n * A component that allows creating linked objects of information and its owner\n * in such a way that if a new value is assigned to the owner, this value\n * will become the value of the linked information source\n * https://silentium-lab.github.io/silentium/#/en/information/of\n */\nexport function Late<T>(v?: T) {\n  return new TheLate<T>(v);\n}\n\nclass TheLate<T> implements SourceType<T> {\n  private lateTransport: TransportType<T> | null = null;\n  private notify = (v?: T) => {\n    if (isFilled(v) && this.lateTransport) {\n      this.lateTransport.use(v);\n    }\n  };\n\n  public constructor(private v?: T) {}\n\n  public event(transport: TransportType<T>): this {\n    if (this.lateTransport) {\n      throw new Error(\n        \"Late component gets new transport, when another was already connected!\",\n      );\n    }\n    this.lateTransport = transport;\n    this.notify(this.v);\n    return this;\n  }\n\n  public use(value: T): this {\n    this.notify(value);\n    return this;\n  }\n}\n","import { TransportParent } from \"../base\";\nimport { EventType, TransportType } from \"../types\";\n\n/**\n * Limits the number of values from the information source\n * to a single value - once the first value is emitted, no more\n * values are delivered from the source\n */\nexport function Once<T>($base: EventType<T>) {\n  return new TheOnce<T>($base);\n}\n\nclass TheOnce<T> implements EventType<T> {\n  private isFilled = false;\n\n  public constructor(private $base: EventType<T>) {}\n\n  public event(transport: TransportType<T>): this {\n    this.$base.event(this.parent.child(transport));\n    return this;\n  }\n\n  private parent = TransportParent<T>(function (v, child) {\n    if (!child.isFilled) {\n      child.isFilled = true;\n      this.use(v);\n    }\n  }, this);\n}\n","import { Transport } from \"../base\";\nimport { Late } from \"../components/Late\";\nimport { Once } from \"../components/Once\";\nimport { isFilled, OwnerPool } from \"../helpers\";\nimport { EventType, TransportType, SourceType } from \"../types\";\n\n/**\n * An information object that helps multiple owners access\n * a single another information object\n */\nexport function Shared<T>($base: EventType<T>, stateless = false) {\n  return new TheShared<T>($base, stateless);\n}\n\nclass TheShared<T> implements SourceType<T> {\n  private ownersPool = new OwnerPool<T>();\n  private lastValue: T | undefined;\n  private calls = Late();\n\n  public constructor(\n    private $base: EventType<T>,\n    private stateless = false,\n  ) {\n    Once(this.calls).event(\n      Transport(() => {\n        this.$base.event(this.firstCallTransport);\n      }),\n    );\n  }\n\n  public event(transport: TransportType<T>) {\n    this.calls.use(1);\n    if (\n      !this.stateless &&\n      isFilled(this.lastValue) &&\n      !this.ownersPool.has(transport)\n    ) {\n      transport.use(this.lastValue);\n    }\n    this.ownersPool.add(transport);\n    return this;\n  }\n\n  public use(value: T) {\n    this.calls.use(1);\n    this.lastValue = value;\n    this.ownersPool.owner().use(value);\n    return this;\n  }\n\n  private firstCallTransport = Transport<T>((v: T) => {\n    this.lastValue = v;\n    this.ownersPool.owner().use(v);\n  });\n\n  public touched() {\n    this.calls.use(1);\n  }\n\n  public pool() {\n    return this.ownersPool;\n  }\n\n  public destroy() {\n    return this.ownersPool.destroy();\n  }\n}\n","import { Shared } from \"../components/Shared\";\nimport { TransportType, SourceType } from \"../types\";\n\nexport function SharedSource<T>($base: SourceType<T>, stateless = false) {\n  return new TheSharedSource<T>($base, stateless);\n}\n\nclass TheSharedSource<T> implements SourceType<T> {\n  private $sharedBase: SourceType<T> & { touched: () => void };\n\n  public constructor(\n    private $base: SourceType<T>,\n    stateless = false,\n  ) {\n    this.$sharedBase = Shared(this.$base, stateless);\n  }\n\n  public event(transport: TransportType<T>) {\n    this.$sharedBase.event(transport);\n    return this;\n  }\n\n  public use(value: T) {\n    this.$sharedBase.touched();\n    this.$base.use(value);\n    return this;\n  }\n}\n","import { Late } from \"../components/Late\";\nimport { SharedSource } from \"../components/SharedSource\";\nimport { TransportType, SourceType } from \"../types\";\n\n/**\n * An event with a value that will be set later,\n * capable of responding to different transports\n */\nexport function LateShared<T>(value?: T) {\n  return new TheLateShared<T>(value);\n}\n\nclass TheLateShared<T> implements SourceType<T> {\n  private $event: SourceType<T>;\n\n  public constructor(value?: T) {\n    this.$event = SharedSource(Late(value));\n  }\n\n  public event(transport: TransportType<T>) {\n    this.$event.event(transport);\n    return this;\n  }\n\n  public use(value: T) {\n    this.$event.use(value);\n    return this;\n  }\n}\n","import { Of, TransportParent } from \"../base\";\nimport { isEvent } from \"../helpers\";\nimport { EventType, TransportType } from \"../types\";\nimport { All } from \"./All\";\n\n/**\n * Component that applies an info object constructor to each data item,\n * producing an information source with new values\n */\nexport function Map<T, TG>(\n  $base: EventType<T[]>,\n  $target: TransportType<any, EventType<TG>>,\n) {\n  return new TheMap<T, TG>($base, $target);\n}\n\nclass TheMap<T, TG> implements EventType<TG[]> {\n  public constructor(\n    private $base: EventType<T[]>,\n    private $target: TransportType<any, EventType<TG>>,\n  ) {}\n\n  public event(transport: TransportType<TG[]>): this {\n    this.$base.event(this.parent.child(transport));\n    return this;\n  }\n\n  private parent = TransportParent<T[]>(function (v, child) {\n    const infos: EventType<TG>[] = [];\n    v.forEach((val) => {\n      let $val: EventType<T> | T = val;\n      if (!isEvent($val as object)) {\n        $val = Of($val);\n      }\n      const info = child.$target.use($val);\n      infos.push(info);\n    });\n    All(...infos).event(this);\n  }, this);\n}\n","import { Transport } from \"../base\";\nimport { EventType } from \"../types\";\n\n/**\n * Helps represent an event as a primitive type, which can be useful\n * for cases when you need to always have a reference to the current value\n * without updating the shared value when the current one changes.\n * For example, this could be used when passing an authorization token.\n * It can also be useful for testing or logging purposes.\n */\nexport function Primitive<T>($base: EventType<T>, theValue: T | null = null) {\n  return new ThePrimitive<T>($base, theValue);\n}\n\nclass ThePrimitive<T> {\n  private touched = false;\n\n  public constructor(\n    private $base: EventType<T>,\n    private theValue: T | null = null,\n  ) {}\n\n  private ensureTouched() {\n    if (!this.touched) {\n      this.$base.event(\n        Transport((v) => {\n          this.theValue = v;\n        }),\n      );\n    }\n    this.touched = true;\n  }\n\n  public [Symbol.toPrimitive]() {\n    this.ensureTouched();\n    return this.theValue;\n  }\n\n  public primitive() {\n    this.ensureTouched();\n    return this.theValue;\n  }\n\n  public primitiveWithException() {\n    this.ensureTouched();\n    if (this.theValue === null) {\n      throw new Error(\"Primitive value is null\");\n    }\n    return this.theValue;\n  }\n}\n","import { TransportParent } from \"../base\";\nimport { EventType, TransportType } from \"../types\";\n\nexport function Sequence<T>($base: EventType<T>) {\n  return new TheSequence<T>($base);\n}\n\n/**\n * A component that takes one value at a time and returns\n * an array of all previous values\n */\nclass TheSequence<T> implements EventType<T[]> {\n  private result: T[] = [];\n\n  public constructor(private $base: EventType<T>) {}\n\n  public event(transport: TransportType<T[]>): this {\n    this.$base.event(this.parent.child(transport));\n    return this;\n  }\n\n  private parent = TransportParent<T>(function (v, child) {\n    child.result.push(v);\n    this.use(child.result);\n  }, this);\n}\n","import { TransportParent } from \"../base\";\nimport { EventType, TransportType } from \"../types\";\n\n/**\n * Component that receives a data array and yields values one by one\n */\nexport function Stream<T>($base: EventType<T[]>) {\n  return new TheStream<T>($base);\n}\n\nclass TheStream<T> implements EventType<T> {\n  public constructor(private $base: EventType<T[]>) {}\n\n  public event(transport: TransportType<T>): this {\n    this.$base.event(this.parent.child(transport));\n    return this;\n  }\n\n  private parent = TransportParent<T[]>(function (v) {\n    v.forEach((cv) => {\n      this.use(cv);\n    });\n  });\n}\n","import { EventType, ConstructorType, TransportType } from \"../types\";\n\nexport function TransportApplied<T>(\n  baseTransport: TransportType<any, EventType<T>>,\n  applier: ConstructorType<[EventType], EventType<T>>,\n) {\n  return new TheTransportApplied(baseTransport, applier);\n}\n\nexport class TheTransportApplied<T>\n  implements TransportType<unknown, EventType<T>>\n{\n  public constructor(\n    private baseTransport: TransportType<any, EventType<T>>,\n    private applier: ConstructorType<[EventType], EventType<T>>,\n  ) {}\n\n  public use(args: unknown) {\n    return this.applier(this.baseTransport.use(args));\n  }\n}\n","import { EventType, TransportType } from \"../types\";\n\nexport function TransportArgs(\n  baseTransport: TransportType<any[], EventType>,\n  args: unknown[],\n  startFromArgIndex: number = 0,\n) {\n  return new TheTransportArgs(baseTransport, args, startFromArgIndex);\n}\n\nexport class TheTransportArgs\n  implements TransportType<unknown[], EventType<unknown>>\n{\n  public constructor(\n    private baseTransport: TransportType<any[], EventType>,\n    private args: unknown[],\n    private startFromArgIndex: number = 0,\n  ) {}\n\n  public use(runArgs: unknown[]): EventType<unknown> {\n    return this.baseTransport.use(\n      mergeAtIndex(runArgs, this.args, this.startFromArgIndex),\n    );\n  }\n}\n\nfunction mergeAtIndex(arr1: unknown[], arr2: unknown[], index: number) {\n  const result = arr1.slice(0, index);\n  while (result.length < index) result.push(undefined);\n  return result.concat(arr2);\n}\n","import { isDestroyable } from \"../helpers\";\nimport { DestroyableType, EventType, TransportType } from \"../types\";\n\nexport function TransportDestroyable<T>(\n  baseTransport: TransportType<any[], EventType<T>>,\n) {\n  return new TheTransportDestroyable<T>(baseTransport);\n}\n\n/**\n * Constructor what can be destroyed\n */\nclass TheTransportDestroyable<T>\n  implements TransportType<unknown, EventType>, DestroyableType\n{\n  private destructors: DestroyableType[] = [];\n\n  public constructor(private baseTransport: TransportType<any, EventType<T>>) {}\n\n  public use(args: unknown) {\n    const inst = this.baseTransport.use(args);\n    if (isDestroyable(inst)) {\n      this.destructors.push(inst);\n    }\n    return inst;\n  }\n\n  public destroy(): this {\n    this.destructors.forEach((i) => i.destroy());\n    return this;\n  }\n}\n"],"names":["isFilled","value","isEvent","o","event","isDestroyable","destroy","isTransport","use","ensureFunction","v","label","Error","ensureEvent","ensureTransport","Component","executor","args","destructor","transport","call","this","ComponentClass","classConstructor","DestroyContainer","TheDestroyContainer","constructor","__publicField","add","e","destructors","push","forEach","d","Event","eventExecutor","TheEvent","mbDestructor","Local","$base","TheLocal","TransportParent","child","destroyed","Of","TheOf","Void","TheVoid","OwnerPool","owners","Set","innerOwner","Transport","g","owner","size","has","remove","delete","transportExecutor","TheTransport","TransportEvent","TheTransportEvent","TheTransportParent","_child","All","events","TheAll","key","keysFilled","keysKnown","filled","result","known","Object","values","keys","$events","entries","Any","TheAny","Applied","applier","TheApplied","Catch","errorMessage","errorOriginal","TheCatch","message","Chain","TheChain","index","next","oneEventTransport","$latest","handleEvent","ExecutorApplied","TheExecutorApplied","ExecutorAppliedBaseTransport","bind","Filtered","predicate","defaultValue","TheFiltered","parent","FromEvent","$emitter","$eventName","$subscribeMethod","$unsubscribeMethod","TheFromEvent","lastTransport","emitter","eventName","subscribe","handler","unsubscribe","FromPromise","p","errorOwner","TheFromPromise","then","catch","Late","TheLate","lateTransport","notify","Once","TheOnce","Shared","stateless","TheShared","lastValue","ownersPool","calls","firstCallTransport","touched","pool","SharedSource","TheSharedSource","$sharedBase","LateShared","TheLateShared","$event","Map","$target","TheMap","infos","val","$val","info","Primitive","theValue","ThePrimitive","ensureTouched","Symbol","toPrimitive","primitive","primitiveWithException","Sequence","TheSequence","Stream","TheStream","cv","TransportApplied","baseTransport","TheTransportApplied","TransportArgs","startFromArgIndex","TheTransportArgs","runArgs","arr1","arr2","slice","length","concat","mergeAtIndex","TransportDestroyable","TheTransportDestroyable","inst","i"],"mappings":"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"}