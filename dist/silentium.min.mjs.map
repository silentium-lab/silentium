{"version":3,"file":"silentium.min.mjs","sources":["../src/components/All.ts","../src/components/Any.ts","../src/components/Applied.ts","../src/components/Catch.ts","../src/components/Chain.ts","../src/components/ConstructorApplied.ts","../src/components/ConstructorArgs.ts","../src/components/ConstructorDestroyable.ts","../src/components/ExecutorApplied.ts","../src/components/Filtered.ts","../src/components/FromEvent.ts","../src/components/FromPromise.ts","../src/helpers/isFilled.ts","../src/helpers/OwnerPool.ts","../src/components/Late.ts","../src/components/Once.ts","../src/components/Shared.ts","../src/components/SharedSource.ts","../src/components/LateShared.ts","../src/base/Destructor.ts","../src/base/Local.ts","../src/base/Of.ts","../src/base/On.ts","../src/base/Void.ts","../src/base/DestroyContainer.ts","../src/components/Map.ts","../src/components/Primitive.ts","../src/components/Sequence.ts","../src/components/Stream.ts"],"sourcesContent":["import { EventType } from \"../types\";\n\ntype ExtractTypeS<T> = T extends EventType<infer U> ? U : never;\n\nexport type ExtractTypesFromArrayS<T extends EventType<any>[]> = {\n  [K in keyof T]: ExtractTypeS<T[K]>;\n};\n\nconst isAllFilled = (keysFilled: Set<string>, keysKnown: Set<string>) => {\n  return keysFilled.size > 0 && keysFilled.size === keysKnown.size;\n};\n\n/**\n * Combines multiple information sources into a single unified source\n * represented as an array containing values from all sources\n * https://silentium-lab.github.io/silentium/#/en/information/all\n */\nexport function All<const T extends EventType[]>(\n  ...theInfos: T\n): EventType<ExtractTypesFromArrayS<T>> {\n  const keysKnown = new Set<string>(Object.keys(theInfos));\n  const keysFilled = new Set<string>();\n\n  return function AllEvent(user) {\n    const result: Record<string, unknown> = {};\n\n    Object.entries(theInfos).forEach(([key, info]) => {\n      keysKnown.add(key);\n      info(function AllItemUser(v) {\n        keysFilled.add(key);\n        result[key] = v;\n        if (isAllFilled(keysFilled, keysKnown)) {\n          user(Object.values(result) as ExtractTypesFromArrayS<T>);\n        }\n      });\n    });\n  };\n}\n","import { EventType } from \"../types\";\n\n/**\n * From a set of information sources we get\n * a common response from any source for a single owner\n * https://silentium-lab.github.io/silentium/#/en/information/any\n */\nexport function Any<T>(...infos: EventType<T>[]): EventType<T> {\n  return function AnyEvent(user) {\n    infos.forEach((info) => {\n      info(user);\n    });\n  };\n}\n","import { EventType, ConstructorType } from \"../types\";\n\n/**\n * Information to which the function was applied to change the value\n * https://silentium-lab.github.io/silentium/#/en/information/applied\n */\nexport function Applied<T, R>(\n  baseEv: EventType<T>,\n  applier: ConstructorType<[T], R>,\n): EventType<R> {\n  return function AppliedEvent(user) {\n    baseEv(function AppliedBaseUser(v) {\n      user(applier(v));\n    });\n  };\n}\n","import { EventType, EventUserType } from \"src/types\";\n\n/**\n * Catches exception and passes\n * exception content to error user\n */\nexport function Catch<T>(\n  $base: EventType<T>,\n  error: EventUserType,\n  errorOriginal?: EventUserType,\n): EventType<T> {\n  return (user) => {\n    try {\n      $base(user);\n    } catch (e: any) {\n      if (e instanceof Error) {\n        error(e.message);\n      } else {\n        error(e);\n      }\n      if (errorOriginal) {\n        errorOriginal(e);\n      }\n    }\n  };\n}\n","import { EventTypeValue } from \"../types/EventType\";\nimport { EventType } from \"../types\";\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ntype Last<T extends any[]> = T extends [...infer _, infer L] ? L : never;\n\n/**\n * The set of information sources forms a sequential chain where each source provides\n * an answer. The final answer will be the output result. If any source in the chain\n * provides a new answer, the component's overall response will be repeated.\n * https://silentium-lab.github.io/silentium/#/en/information/applied\n */\nexport function Chain<T extends EventType[]>(...infos: T): Last<T> {\n  return <Last<T>>function ChainEvent(user) {\n    let lastValue: EventTypeValue<Last<T>> | undefined;\n\n    const handleI = (index: number) => {\n      const info = infos[index] as Last<T>;\n      const nextI = infos[index + 1] as Last<T> | undefined;\n\n      info(function ChainItemUser(v) {\n        if (!nextI) {\n          lastValue = v as EventTypeValue<Last<T>>;\n        }\n\n        if (lastValue) {\n          user(lastValue);\n        }\n\n        if (nextI && !lastValue) {\n          handleI(index + 1);\n        }\n      });\n    };\n\n    handleI(0);\n  };\n}\n","import { EventType, ConstructorType } from \"../types\";\n\n/**\n * Constructor with applied function to its results\n */\nexport function ConstructorApplied<T>(\n  baseConstructor: ConstructorType<any[], EventType>,\n  applier: (i: EventType) => EventType<T>,\n): ConstructorType<EventType[], EventType<T>> {\n  return function LazyAppliedData(...args) {\n    return applier(baseConstructor(...args));\n  };\n}\n","import { EventType, ConstructorType } from \"../types\";\n\nexport function ConstructorArgs(\n  baseConstructor: ConstructorType<any[], EventType>,\n  args: unknown[],\n  startFromArgIndex: number = 0,\n) {\n  return function ConstructorArgsEvent(...runArgs: any[]) {\n    return baseConstructor(...mergeAtIndex(runArgs, args, startFromArgIndex));\n  };\n}\n\nfunction mergeAtIndex(arr1: unknown[], arr2: unknown[], index: number) {\n  const result = arr1.slice(0, index);\n  while (result.length < index) result.push(undefined);\n  return result.concat(arr2);\n}\n","import {\n  ConstructorType,\n  DestroyableType,\n  DestructorType,\n  EventObjectType,\n  EventType,\n} from \"../types\";\n\n/**\n * Constructor what can be destroyed\n */\nexport function ConstructorDestroyable(\n  baseConstructor: ConstructorType<\n    any[],\n    (DestroyableType & EventObjectType) | EventType\n  >,\n): {\n  get: ConstructorType<any[], EventType>;\n  destroy: DestructorType;\n} {\n  const destructors: DestructorType[] = [];\n  return {\n    get: function ConstructorDestroyableGet(...args) {\n      const inst = baseConstructor(...args);\n      return (user) => {\n        if (\"destroy\" in inst) {\n          destructors.push(inst.destroy);\n          inst.event(user);\n        } else {\n          const d = inst(user);\n          if (d) {\n            destructors.push(d);\n          }\n        }\n\n        return () => {\n          destructors.forEach((i) => i());\n        };\n      };\n    },\n    destroy: function ConstructorDestructor() {\n      destructors.forEach((i) => i());\n    },\n  };\n}\n","import { EventType, EventUserType } from \"../types\";\n\n/**\n * Information to which a function is applied in order\n * to control the value passing process\n * https://silentium-lab.github.io/silentium/#/en/information/applied\n */\nexport function ExecutorApplied<T>(\n  baseEv: EventType<T>,\n  applier: (executor: EventUserType<T>) => EventUserType<T>,\n): EventType<T> {\n  return function ExecutorAppliedEvent(user) {\n    const ExecutorAppliedBaseUser = applier(user);\n    baseEv(ExecutorAppliedBaseUser);\n  };\n}\n","import { EventType, ConstructorType } from \"../types\";\n\n/**\n * Information whose value is being validated\n * via a predicate; if the predicate returns true, the value\n * can be passed to the output\n * https://silentium-lab.github.io/silentium/#/en/information/filtered\n */\nexport function Filtered<T>(\n  baseEv: EventType<T>,\n  predicate: ConstructorType<[T], boolean>,\n  defaultValue?: T,\n): EventType<T> {\n  return function FilteredEvent(user) {\n    baseEv(function FilteredBaseUser(v) {\n      if (predicate(v)) {\n        user(v);\n      } else if (defaultValue !== undefined) {\n        user(defaultValue);\n      }\n    });\n  };\n}\n","import { EventTypeDestroyable } from \"../types/EventType\";\nimport { EventType, EventUserType } from \"../types\";\nimport { All } from \"./All\";\n\n/**\n * A component that receives data from an event and\n * presents it as an information object\n * https://silentium-lab.github.io/silentium/#/en/information/from-event\n */\nexport function FromEvent<T>(\n  emitterEv: EventType<any>,\n  eventNameEv: EventType<string>,\n  subscribeMethodEv: EventType<string>,\n  unsubscribeMethodEv?: EventType<string>,\n): EventTypeDestroyable<T> {\n  let lastU: EventUserType<T> | null = null;\n  const handler = function FromEventHandler(v: T) {\n    if (lastU) {\n      lastU(v);\n    }\n  };\n  return function FromEventEvent(user) {\n    lastU = user;\n    const a = All(emitterEv, eventNameEv, subscribeMethodEv);\n    a(function FromEventAllUser([emitter, eventName, subscribe]) {\n      if (!emitter?.[subscribe]) {\n        return;\n      }\n      emitter[subscribe](eventName, handler);\n    });\n\n    return function FromEventDestructor() {\n      lastU = null;\n      if (!unsubscribeMethodEv) {\n        return;\n      }\n      const a = All(emitterEv, eventNameEv, unsubscribeMethodEv);\n      a(([emitter, eventName, unsubscribe]) => {\n        emitter?.[unsubscribe]?.(eventName, handler);\n      });\n    };\n  };\n}\n","import { EventType, EventUserType } from \"../types\";\n\n/**\n * Component that gets a value from a promise and\n * presents it as information\n * https://silentium-lab.github.io/silentium/#/en/information/from-promise\n */\nexport function FromPromise<T>(\n  p: Promise<T>,\n  errorOwner?: EventUserType,\n): EventType<T> {\n  return function FromPromiseEvent(user) {\n    p.then(function FromPromiseThen(v) {\n      user(v);\n    }).catch(function FromPromiseCatch(e) {\n      errorOwner?.(e);\n    });\n  };\n}\n","export const isFilled = <T>(\n  value?: T,\n): value is Exclude<T, null | undefined> => {\n  return value !== undefined && value !== null;\n};\n","import { EventUserType } from \"../types\";\n\n/**\n * Helps maintain an owner list allowing different\n * owners to get information from a common source\n * https://silentium-lab.github.io/silentium/#/en/utils/owner-pool\n */\nexport class OwnerPool<T> {\n  private owners: Set<EventUserType<T>>;\n  private innerOwner: EventUserType<T>;\n\n  public constructor() {\n    this.owners = new Set<EventUserType<T>>();\n    this.innerOwner = (v) => {\n      this.owners.forEach((g) => {\n        g(v);\n      });\n    };\n  }\n\n  public owner() {\n    return this.innerOwner;\n  }\n\n  public size(): number {\n    return this.owners.size;\n  }\n\n  public has(owner: EventUserType<T>): boolean {\n    return this.owners.has(owner);\n  }\n\n  public add(owner: EventUserType<T>) {\n    this.owners.add(owner);\n    return this;\n  }\n\n  public remove(g: EventUserType<T>) {\n    this.owners.delete(g);\n    return this;\n  }\n\n  public destroy() {\n    this.owners.forEach((g) => {\n      this.remove(g);\n    });\n    return this;\n  }\n}\n","import { EventUserType, SourceType } from \"../types\";\nimport { isFilled } from \"../helpers\";\n\n/**\n * A component that allows creating linked objects of information and its owner\n * in such a way that if a new value is assigned to the owner, this value\n * will become the value of the linked information source\n * https://silentium-lab.github.io/silentium/#/en/information/of\n */\nexport function Late<T>(v?: T): SourceType<T> {\n  let lateUser: EventUserType<T> | null = null;\n  const notify = (v?: T) => {\n    if (isFilled(v) && lateUser) {\n      lateUser(v);\n    }\n  };\n\n  return {\n    event: function LateEvent(user) {\n      if (lateUser) {\n        throw new Error(\n          \"Late component gets new user, when another was already connected!\",\n        );\n      }\n\n      lateUser = user;\n      notify(v);\n    },\n    use: function LateUser(v) {\n      notify(v);\n    },\n  };\n}\n","import { EventType } from \"../types\";\n\n/**\n * Limits the number of values from the information source\n * to a single value - once the first value is emitted, no more\n * values are delivered from the source\n * https://silentium-lab.github.io/silentium/#/en/information/once\n */\nexport function Once<T>(baseEv: EventType<T>): EventType<T> {\n  return function OnceEvent(user) {\n    let isFilled = false;\n    baseEv(function OnceBaseUser(v) {\n      if (!isFilled) {\n        isFilled = true;\n        user(v);\n      }\n    });\n  };\n}\n","import { EventType, DestroyableType, SourceType } from \"../types\";\nimport { isFilled, OwnerPool } from \"../helpers\";\nimport { Late } from \"../components/Late\";\nimport { Once } from \"../components/Once\";\n\n/**\n * An information object that helps multiple owners access\n * a single another information object\n * https://silentium-lab.github.io/silentium/#/en/information/pool\n */\nexport function Shared<T>(\n  baseEv: EventType<T>,\n  stateless = false,\n): SourceType<T> & {\n  pool: () => OwnerPool<T>;\n  touched: () => void;\n} & DestroyableType {\n  const ownersPool = new OwnerPool<T>();\n  let lastValue: T | undefined;\n\n  const calls = Late();\n  Once(calls.event)(function SharedCallsUser() {\n    baseEv(function SharedBaseUser(v) {\n      lastValue = v;\n      ownersPool.owner()(v);\n    });\n  });\n\n  return {\n    event: function SharedEvent(user) {\n      calls.use(1);\n      if (!stateless && isFilled(lastValue) && !ownersPool.has(user)) {\n        user(lastValue);\n      }\n      ownersPool.add(user);\n      return () => {\n        ownersPool.remove(user);\n      };\n    },\n    use: function SharedUser(value: T) {\n      calls.use(1);\n      lastValue = value;\n      ownersPool.owner()(value);\n    },\n    touched() {\n      calls.use(1);\n    },\n    pool() {\n      return ownersPool;\n    },\n    destroy() {\n      ownersPool.destroy();\n    },\n  };\n}\n","import { SourceType } from \"../types\";\nimport { Shared } from \"../components/Shared\";\n\nexport function SharedSource<T>(\n  baseEv: SourceType<T>,\n  stateless = false,\n): SourceType<T> {\n  const sharedEv = Shared(baseEv.event, stateless);\n\n  return {\n    event: function SharedSourceEvent(user) {\n      sharedEv.event(user);\n    },\n    use: function SharedSourceUser(v) {\n      sharedEv.touched();\n      baseEv.use(v);\n    },\n  };\n}\n","import { Late } from \"../components/Late\";\nimport { SharedSource } from \"../components/SharedSource\";\nimport { SourceType } from \"../types\";\n\nexport function LateShared<T>(value?: T): SourceType<T> {\n  return SharedSource(Late(value));\n}\n","import { DestructorType, EventType, EventUserType } from \"../types\";\n\nexport function Destructor<T>(\n  baseEv: EventType<T>,\n  destructorUser?: EventUserType<DestructorType>,\n) {\n  let mbDestructor: DestructorType | void;\n  let theUser: WeakRef<EventUserType<T>> | null = null;\n  const destroy = () => {\n    theUser = null;\n    mbDestructor?.();\n  };\n  return {\n    event: function DestructorEvent(user) {\n      theUser = new WeakRef(user);\n      mbDestructor = baseEv((v) => {\n        if (theUser) {\n          theUser.deref()?.(v);\n        }\n      });\n      if (mbDestructor && destructorUser) {\n        destructorUser(destroy);\n      }\n      return destroy;\n    } as EventType<T>,\n    destroy,\n  };\n}\n","import { EventType } from \"../types\";\n\n/**\n * Create local copy of source what can be destroyed\n */\nexport function Local<T>(baseEv: EventType<T>): EventType<T> {\n  return function LocalEvent(user) {\n    let destroyed = false;\n    const d = baseEv(function LocalBaseUser(v) {\n      if (!destroyed) {\n        user(v);\n      }\n    });\n    return () => {\n      destroyed = true;\n      d?.();\n    };\n  };\n}\n","import { EventType } from \"../types\";\n\nexport function Of<T>(value: T): EventType<T> {\n  return function OfEvent(user) {\n    return user(value);\n  };\n}\n","import { EventType, EventUserType } from \"../types\";\n\n/**\n * Run data with user\n */\nexport function On<T>(event: EventType<T>, user: EventUserType<T>) {\n  return event(user);\n}\n","import { EventUserType } from \"../types\";\n\n/**\n * Silent user\n */\nexport function Void(): EventUserType {\n  return function VoidEvent() {};\n}\n","import { Destructor } from \"../base/Destructor\";\nimport { DestructorType, EventType } from \"../types\";\n\nexport function DestroyContainer() {\n  const destructors: DestructorType[] = [];\n  return {\n    add(e: EventType) {\n      const d = Destructor(e);\n      destructors.push(d.destroy);\n      return d.event;\n    },\n    destroy() {\n      destructors.forEach((d) => d());\n    },\n  };\n}\n","import { EventType, ConstructorType } from \"../types\";\nimport { Of } from \"../base\";\nimport { All } from \"./All\";\n\n/**\n * Component that applies an info object constructor to each data item,\n * producing an information source with new values\n * https://silentium-lab.github.io/silentium/#/en/information/map\n */\nexport function Map<T, TG>(\n  baseEv: EventType<T[]>,\n  targetEv: ConstructorType<any[], EventType<TG>>,\n): EventType<TG[]> {\n  return function MapData(user) {\n    baseEv(function MapBaseUser(v) {\n      const infos: EventType<TG>[] = [];\n      v.forEach((val) => {\n        let valInfo: EventType<T> | T = val;\n        if (typeof valInfo !== \"function\") {\n          valInfo = Of(valInfo);\n        }\n        const info = targetEv(valInfo);\n        infos.push(info);\n      });\n      const allI = All(...infos);\n      allI(user);\n    });\n  };\n}\n","import { EventType } from \"../types\";\n\nexport function Primitive<T>(baseEv: EventType<T>, theValue: T | null = null) {\n  baseEv(function PrimitiveBaseUser(v) {\n    theValue = v;\n  });\n\n  return {\n    [Symbol.toPrimitive]() {\n      return theValue;\n    },\n    primitive() {\n      return theValue;\n    },\n    primitiveWithException() {\n      if (theValue === null) {\n        throw new Error(\"Primitive value is null\");\n      }\n      return theValue;\n    },\n  };\n}\n","import { EventType } from \"../types\";\n\n/**\n * A component that takes one value at a time and returns\n * an array of all previous values\n * https://silentium-lab.github.io/silentium/#/en/information/sequence\n */\nexport function Sequence<T>(baseEv: EventType<T>): EventType<T[]> {\n  return function SequenceEvent(user) {\n    const result: T[] = [];\n    baseEv(function SequenceBaseUser(v) {\n      result.push(v);\n      user(result);\n    });\n  };\n}\n","import { EventType } from \"../types\";\n\n/**\n * Component that receives a data array and yields values one by one\n * https://silentium-lab.github.io/silentium/#/en/information/stream\n */\nexport function Stream<T>(baseEv: EventType<T[]>): EventType<T> {\n  return function StreamEvent(user) {\n    baseEv(function StreamBaseUser(v) {\n      v.forEach((cv) => {\n        user(cv);\n      });\n    });\n  };\n}\n"],"names":["All","theInfos","keysKnown","Set","Object","keys","keysFilled","user","result","entries","forEach","key","info","add","v","size","isAllFilled","values","Any","infos","Applied","baseEv","applier","Catch","$base","error","errorOriginal","e","Error","message","Chain","lastValue","handleI","index","nextI","ConstructorApplied","baseConstructor","args","ConstructorArgs","startFromArgIndex","runArgs","arr1","arr2","slice","length","push","concat","mergeAtIndex","ConstructorDestroyable","destructors","get","inst","destroy","event","d","i","ExecutorApplied","ExecutorAppliedBaseUser","Filtered","predicate","defaultValue","FromEvent","emitterEv","eventNameEv","subscribeMethodEv","unsubscribeMethodEv","lastU","handler","a","emitter","eventName","subscribe","unsubscribe","FromPromise","p","errorOwner","then","catch","isFilled","value","OwnerPool","constructor","__publicField","this","owners","innerOwner","g","owner","has","remove","delete","Late","lateUser","notify","use","Once","Shared","stateless","ownersPool","calls","touched","pool","SharedSource","sharedEv","LateShared","Destructor","destructorUser","mbDestructor","theUser","WeakRef","deref","Local","destroyed","Of","On","Void","DestroyContainer","Map","targetEv","val","valInfo","allI","Primitive","theValue","Symbol","toPrimitive","primitive","primitiveWithException","Sequence","Stream","cv"],"mappings":"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"}