{"version":3,"file":"silentium.min.mjs","sources":["../src/base/Destroyable.ts","../src/base/DestroyFunc.ts","../src/base/TheOwner.ts","../src/base/From.ts","../src/base/TheInformation.ts","../src/helpers/isFilled.ts","../src/helpers/OwnerPool.ts","../src/base/Of.ts","../src/base/Lazy.ts","../src/base/OfFunc.ts","../src/components/All.ts","../src/components/Any.ts","../src/components/Applied.ts","../src/components/Chain.ts","../src/components/ExecutorApplied.ts","../src/components/Filtered.ts","../src/components/FromCallback.ts","../src/components/FromEvent.ts","../src/components/FromPromise.ts","../src/components/Late.ts","../src/components/LazyApplied.ts","../src/components/LazyClass.ts","../src/components/Map.ts","../src/components/Once.ts","../src/components/Sequence.ts","../src/components/Shared.ts","../src/components/Stream.ts"],"sourcesContent":["/**\n * Representation of Destroyable object\n */\nexport class Destroyable {\n  public constructor(private deps?: unknown[]) {}\n\n  public destroy() {\n    this.deps?.forEach((dep) => {\n      if (dep instanceof Destroyable) {\n        dep.destroy();\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Add dependency what can be destroyed\n   */\n  public addDep(dep: unknown) {\n    this.deps?.push(dep);\n    return this;\n  }\n}\n","import { Destroyable } from \"./Destroyable\";\n\n/**\n * Representation of destructor function as object\n */\nexport class DestroyFunc extends Destroyable {\n  public constructor(private destructor: () => void) {\n    super();\n  }\n\n  public destroy(): this {\n    this.destructor();\n    return this;\n  }\n}\n","/**\n * Representation of Information Owner\n */\nexport abstract class TheOwner<T = unknown> {\n  public abstract give(value: T): this;\n}\n","import { TheOwner } from \"./TheOwner\";\n\n/**\n * Owner from function\n */\nexport class From<T = unknown> extends TheOwner<T> {\n  public constructor(private fn: (value: T) => void) {\n    super();\n  }\n\n  public give(value: T): this {\n    this.fn(value);\n    return this;\n  }\n}\n","import { Destroyable } from \"./Destroyable\";\nimport { TheOwner } from \"./TheOwner\";\n\n/**\n * Representation of Information\n */\nexport abstract class TheInformation<T = unknown> extends Destroyable {\n  public abstract value(o: TheOwner<T>): this;\n}\n","export const isFilled = <T>(value?: T): value is T => {\n  return value !== undefined && value !== null;\n};\n","import { From, TheOwner } from \"../base\";\n\n/**\n * Helps maintain an owner list allowing different\n * owners to get information from a common source\n * https://silentium-lab.github.io/silentium/#/en/utils/owner-pool\n */\nexport class OwnerPool<T> {\n  private owners: Set<TheOwner<T>>;\n  private innerOwner: TheOwner<T>;\n\n  public constructor() {\n    this.owners = new Set<TheOwner<T>>();\n    this.innerOwner = new From((v) => {\n      this.owners.forEach((g) => {\n        g.give(v);\n      });\n    });\n  }\n\n  public owner() {\n    return this.innerOwner;\n  }\n\n  public size(): number {\n    return this.owners.size;\n  }\n\n  public has(owner: TheOwner<T>): boolean {\n    return this.owners.has(owner);\n  }\n\n  public add(owner: TheOwner<T>) {\n    this.owners.add(owner);\n    return this;\n  }\n\n  public remove(g: TheOwner<T>) {\n    this.owners.delete(g);\n    return this;\n  }\n\n  public destroy() {\n    this.owners.forEach((g) => {\n      this.remove(g);\n    });\n    return this;\n  }\n}\n","import { TheOwner } from \"./TheOwner\";\nimport { TheInformation } from \"./TheInformation\";\nimport { isFilled } from \"../helpers\";\n\n/**\n * Information from primitive value\n */\nexport class Of<T> extends TheInformation<T> {\n  public constructor(private theValue: T) {\n    super([theValue]);\n  }\n\n  public value(o: TheOwner<T>): this {\n    if (isFilled(this.theValue)) {\n      o.give(this.theValue);\n    }\n    return this;\n  }\n}\n","import { Destroyable } from \"./Destroyable\";\nimport { Of } from \"./Of\";\nimport { TheInformation } from \"./TheInformation\";\n\n/**\n * Ability to create information after some event\n */\nexport class Lazy<T = unknown> extends Destroyable {\n  public constructor(\n    protected buildFn?: (...args: TheInformation[]) => TheInformation<T>,\n  ) {\n    super();\n  }\n\n  public get(...args: TheInformation[]) {\n    args.forEach((dep) => {\n      this.addDep(dep);\n    });\n    return this.buildFn?.(...args) ?? (new Of(null) as TheInformation<T>);\n  }\n}\n","import { TheOwner } from \"./TheOwner\";\nimport { TheInformation } from \"./TheInformation\";\n\ntype DestructorFnType = () => void;\n\n/**\n * Information of function\n */\nexport class OfFunc<T> extends TheInformation<T> {\n  private mbDestructor?: DestructorFnType | void;\n\n  public constructor(\n    private valueFn: (o: TheOwner<T>) => DestructorFnType | undefined | void,\n  ) {\n    super([valueFn]);\n  }\n\n  public value(o: TheOwner<T>): this {\n    this.mbDestructor = this.valueFn(o);\n    return this;\n  }\n\n  public destroy(): this {\n    super.destroy();\n    this.mbDestructor?.();\n    return this;\n  }\n}\n","import { From, TheInformation, TheOwner } from \"../base\";\n\ntype ExtractTypeS<T> = T extends TheInformation<infer U> ? U : never;\n\nexport type ExtractTypesFromArrayS<T extends TheInformation<any>[]> = {\n  [K in keyof T]: ExtractTypeS<T[K]>;\n};\n\n/**\n * Combines multiple information sources into a single unified source\n * represented as an array containing values from all sources\n * https://silentium-lab.github.io/silentium/#/en/information/all\n */\nexport class All<const T extends TheInformation[]> extends TheInformation<\n  ExtractTypesFromArrayS<T>\n> {\n  private keysKnown: Set<string>;\n  private keysFilled = new Set();\n  private infos: T;\n\n  public constructor(...theInfos: T) {\n    super(theInfos);\n    this.infos = theInfos;\n    this.keysKnown = new Set<string>(Object.keys(theInfos));\n  }\n\n  public value(o: TheOwner<ExtractTypesFromArrayS<T>>): this {\n    const result: Record<string, unknown> = {};\n\n    Object.entries(this.infos).forEach(([key, info]) => {\n      this.keysKnown.add(key);\n      info.value(\n        new From((v) => {\n          this.keysFilled.add(key);\n          result[key] = v;\n          if (this.isAllFilled()) {\n            o.give(Object.values(result) as ExtractTypesFromArrayS<T>);\n          }\n        }),\n      );\n    });\n    return this;\n  }\n\n  private isAllFilled() {\n    return (\n      this.keysFilled.size > 0 && this.keysFilled.size === this.keysKnown.size\n    );\n  }\n}\n","import { TheInformation, TheOwner } from \"../base\";\n\n/**\n * From a set of information sources we get\n * a common response from any source for a single owner\n * https://silentium-lab.github.io/silentium/#/en/information/any\n */\nexport class Any<T> extends TheInformation<T> {\n  private infos: TheInformation<T>[];\n\n  public constructor(...theInfos: TheInformation<T>[]) {\n    super(theInfos);\n    this.infos = theInfos;\n  }\n\n  public value(o: TheOwner<T>): this {\n    this.infos.forEach((info) => {\n      info.value(o);\n    });\n    return this;\n  }\n}\n","import { From, TheInformation, TheOwner } from \"../base\";\n\n/**\n * Information to which the function was applied to change the value\n * https://silentium-lab.github.io/silentium/#/en/information/applied\n */\nexport class Applied<T, R> extends TheInformation<R> {\n  public constructor(\n    private baseSrc: TheInformation<T>,\n    private applier: (v: T) => R,\n  ) {\n    super([baseSrc]);\n  }\n\n  public value(o: TheOwner<R>): this {\n    this.baseSrc.value(\n      new From((v) => {\n        o.give(this.applier(v));\n      }),\n    );\n    return this;\n  }\n}\n","import { From, TheInformation, TheOwner } from \"../base\";\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ntype Last<T extends any[]> = T extends [...infer U, infer L] ? L : never;\n\n/**\n * The set of information sources forms a sequential chain where each source provides\n * an answer. The final answer will be the output result. If any source in the chain\n * provides a new answer, the component's overall response will be repeated.\n * https://silentium-lab.github.io/silentium/#/en/information/applied\n */\nexport class Chain<T extends TheInformation[]> extends TheInformation<Last<T>> {\n  private theInfos: T;\n\n  public constructor(...infos: T) {\n    super(infos);\n    this.theInfos = infos;\n  }\n\n  public value(o: TheOwner<Last<T>>) {\n    let lastValue: Last<T> | undefined;\n\n    const handleI = (index: number) => {\n      const info = this.theInfos[index] as TheInformation<Last<T>>;\n      const nextI = this.theInfos[index + 1] as\n        | TheInformation<Last<T>>\n        | undefined;\n\n      info.value(\n        new From((v) => {\n          if (!nextI) {\n            lastValue = v;\n          }\n\n          if (lastValue) {\n            o.give(lastValue);\n          }\n\n          if (nextI && !lastValue) {\n            handleI(index + 1);\n          }\n        }),\n      );\n    };\n\n    handleI(0);\n\n    return this;\n  }\n}\n","import { From, TheInformation, TheOwner } from \"../base\";\n\n/**\n * Information to which a function is applied in order\n * to control the value passing process\n * https://silentium-lab.github.io/silentium/#/en/information/applied\n */\nexport class ExecutorApplied<T> extends TheInformation<T> {\n  public constructor(\n    private baseSrc: TheInformation<T>,\n    private applier: (executor: (v: T) => void) => (v: T) => void,\n  ) {\n    super([baseSrc]);\n  }\n\n  public value(o: TheOwner<T>): this {\n    this.baseSrc.value(\n      new From(\n        this.applier((v) => {\n          o.give(v);\n        }),\n      ),\n    );\n    return this;\n  }\n}\n","import { From, TheInformation, TheOwner } from \"../base\";\n\n/**\n * Information whose value is being validated\n * via a predicate; if the predicate returns true, the value\n * can be passed to the output\n * https://silentium-lab.github.io/silentium/#/en/information/filtered\n */\nexport class Filtered<T> extends TheInformation<T> {\n  public constructor(\n    private baseSrc: TheInformation<T>,\n    private predicate: (v: T) => boolean,\n    private defaultValue?: T,\n  ) {\n    super([baseSrc]);\n  }\n\n  public value(o: TheOwner<T>): this {\n    this.baseSrc.value(\n      new From((v) => {\n        if (this.predicate(v)) {\n          o.give(v);\n        } else if (this.defaultValue !== undefined) {\n          o.give(this.defaultValue);\n        }\n      }),\n    );\n    return this;\n  }\n}\n","import { TheInformation, TheOwner } from \"../base\";\n\n/**\n * When receiving a reference to a function expecting a callback, the component\n * creates its own callback, and the data received in this callback\n * will become the value of the information object\n * https://silentium-lab.github.io/silentium/#/en/information/from-callback\n */\nexport class FromCallback<T> extends TheInformation<T> {\n  private theArgs: unknown[];\n\n  public constructor(\n    private waitForCb: (cb: (v: T) => any, ...args: unknown[]) => unknown,\n    ...args: unknown[]\n  ) {\n    super([waitForCb]);\n    this.theArgs = args;\n  }\n\n  public value(o: TheOwner<T>): this {\n    this.waitForCb(\n      (v) => {\n        o.give(v);\n      },\n      ...this.theArgs,\n    );\n    return this;\n  }\n}\n","import { DestroyFunc } from \"../base/DestroyFunc\";\nimport { From, Of, TheInformation, TheOwner } from \"../base\";\nimport { All } from \"./All\";\n\n/**\n * A component that receives data from an event and\n * presents it as an information object\n * https://silentium-lab.github.io/silentium/#/en/information/from-event\n */\nexport class FromEvent<T = unknown> extends TheInformation<T> {\n  public constructor(\n    private emitterSrc: TheInformation<any>,\n    private eventNameSrc: TheInformation<string>,\n    private subscribeMethodSrc: TheInformation<string>,\n    private unsubscribeMethodSrc: TheInformation<string> = new Of(\"\"),\n  ) {\n    super([emitterSrc, eventNameSrc, subscribeMethodSrc, unsubscribeMethodSrc]);\n  }\n\n  public value(o: TheOwner<T>): this {\n    const a = new All(\n      this.emitterSrc,\n      this.eventNameSrc,\n      this.subscribeMethodSrc,\n      this.unsubscribeMethodSrc,\n    );\n    const handler = (v: T) => {\n      o.give(v);\n    };\n    a.value(\n      new From(([emitter, eventName, subscribe, unsubscribe]) => {\n        emitter[subscribe](eventName, handler);\n        this.addDep(\n          new DestroyFunc(() => {\n            emitter[unsubscribe](eventName, handler);\n          }),\n        );\n      }),\n    );\n    return this;\n  }\n}\n","import { TheInformation, TheOwner } from \"../base\";\n\n/**\n * Component that gets a value from a promise and\n * presents it as information\n * https://silentium-lab.github.io/silentium/#/en/information/from-promise\n */\nexport class FromPromise<T> extends TheInformation<T> {\n  public constructor(\n    private p: Promise<T>,\n    private errorOwner?: TheOwner,\n  ) {\n    super([p]);\n  }\n\n  public value(o: TheOwner<T>): this {\n    this.p\n      .then((v) => {\n        o.give(v);\n      })\n      .catch((e) => {\n        this.errorOwner?.give(e);\n      });\n    return this;\n  }\n}\n","import { From, TheInformation, TheOwner } from \"../base\";\nimport { isFilled } from \"../helpers\";\n\n/**\n * A component that allows creating linked objects of information and its owner\n * in such a way that if a new value is assigned to the owner, this value\n * will become the value of the linked information source\n * https://silentium-lab.github.io/silentium/#/en/information/of\n */\nexport class Late<T> extends TheInformation<T> {\n  private theOwner?: TheOwner<T>;\n  private lateOwner = new From((v: T) => {\n    this.theValue = v;\n    this.notify();\n  });\n\n  public constructor(private theValue?: T) {\n    super([theValue]);\n  }\n\n  public value(o: TheOwner<T>): this {\n    if (this.theOwner) {\n      throw new Error(\n        \"Late component gets new owner, when another was already connected!\",\n      );\n    }\n    this.theOwner = o;\n    this.notify();\n    return this;\n  }\n\n  public owner() {\n    return this.lateOwner;\n  }\n\n  private notify() {\n    if (isFilled(this.theValue) && this.theOwner) {\n      this.theOwner.give(this.theValue);\n    }\n    return this;\n  }\n}\n","import { Lazy, TheInformation } from \"../base\";\n\n/**\n * Lazy with applied function to its results\n */\nexport class LazyApplied<T> extends Lazy<T> {\n  public constructor(\n    private baseLazy: Lazy,\n    private applier: (i: TheInformation) => TheInformation<T>,\n  ) {\n    super();\n  }\n\n  public get(...args: TheInformation[]): TheInformation<T> {\n    return this.applier(this.baseLazy.get(...args));\n  }\n}\n","import { Lazy } from \"../base\";\n\n/**\n * Lazy instance from class constructor\n */\nexport class LazyClass<T> extends Lazy<T> {\n  public constructor(constrFn: any) {\n    const buildFn = (...args: unknown[]) => new constrFn(...args);\n    super(buildFn);\n  }\n}\n","import { From, Lazy, Of, TheInformation, TheOwner } from \"../base\";\nimport { All } from \"./All\";\n\n/**\n * Component that applies an info object constructor to each data item,\n * producing an information source with new values\n * https://silentium-lab.github.io/silentium/#/en/information/map\n */\nexport class Map<T, TG> extends TheInformation<TG[]> {\n  public constructor(\n    private baseSrc: TheInformation<T[]>,\n    private targetSrc: Lazy<TG>,\n  ) {\n    super([baseSrc, targetSrc]);\n  }\n\n  public value(o: TheOwner<TG[]>) {\n    this.baseSrc.value(\n      new From((v) => {\n        const infos: TheInformation<TG>[] = [];\n        v.forEach((val) => {\n          let valInfo: TheInformation<T> | T = val;\n          if (!(valInfo instanceof TheInformation)) {\n            valInfo = new Of(valInfo);\n          }\n          const info = this.targetSrc.get(valInfo);\n          infos.push(info);\n        });\n        const allI = new All(...infos);\n        allI.value(o);\n      }),\n    );\n    return this;\n  }\n}\n","import { From, TheInformation, TheOwner } from \"../base\";\n\n/**\n * Limits the number of values from the information source\n * to a single value - once the first value is emitted, no more\n * values are delivered from the source\n * https://silentium-lab.github.io/silentium/#/en/information/once\n */\nexport class Once<T> extends TheInformation<T> {\n  public constructor(private baseSrc: TheInformation<T>) {\n    super();\n  }\n\n  public value(o: TheOwner<T>): this {\n    let isFilled = false;\n    this.baseSrc.value(\n      new From((v) => {\n        if (!isFilled) {\n          isFilled = true;\n          o.give(v);\n        }\n      }),\n    );\n    return this;\n  }\n}\n","import { From, TheInformation, TheOwner } from \"../base\";\n\n/**\n * A component that takes one value at a time and returns\n * an array of all previous values\n * https://silentium-lab.github.io/silentium/#/en/information/sequence\n */\nexport class Sequence<T> extends TheInformation<T[]> {\n  public constructor(private baseSrc: TheInformation<T>) {\n    super([baseSrc]);\n  }\n\n  public value(o: TheOwner<T[]>): this {\n    const result: T[] = [];\n    this.baseSrc.value(\n      new From((v) => {\n        result.push(v);\n        o.give(result);\n      }),\n    );\n    return this;\n  }\n}\n","import { isFilled, OwnerPool } from \"../helpers\";\nimport { From, OfFunc, TheInformation, TheOwner } from \"../base\";\n\n/**\n * An information object that helps multiple owners access\n * a single another information object\n * https://silentium-lab.github.io/silentium/#/en/information/pool\n */\nexport class Shared<T> extends TheInformation<T> {\n  private lastValue: T | undefined;\n  private ownersPool = new OwnerPool<T>();\n\n  public constructor(\n    private baseSrc: TheInformation<T>,\n    private stateless = false,\n  ) {\n    super([baseSrc]);\n    this.addDep(this.ownersPool);\n    this.baseSrc.value(\n      new From((v) => {\n        this.ownersPool.owner().give(v);\n        this.lastValue = v;\n      }),\n    );\n  }\n\n  public value(o: TheOwner<T>): this {\n    const i = new OfFunc((g: TheOwner<T>) => {\n      if (\n        !this.stateless &&\n        isFilled(this.lastValue) &&\n        !this.ownersPool.has(g)\n      ) {\n        g.give(this.lastValue);\n      }\n      this.ownersPool.add(g);\n      return () => {\n        this.ownersPool.remove(g);\n      };\n    });\n    i.value(o);\n    this.addDep(i);\n\n    return this;\n  }\n\n  public pool() {\n    return this.ownersPool;\n  }\n}\n","import { From, TheInformation, TheOwner } from \"../base\";\n\n/**\n * Component that receives a data array and yields values one by one\n * https://silentium-lab.github.io/silentium/#/en/information/stream\n */\nexport class Stream<T> extends TheInformation<T> {\n  public constructor(private baseSrc: TheInformation<T[]>) {\n    super([baseSrc]);\n  }\n\n  public value(o: TheOwner<T>): this {\n    this.baseSrc.value(\n      new From((v) => {\n        v.forEach((cv) => {\n          o.give(cv);\n        });\n      }),\n    );\n    return this;\n  }\n}\n"],"names":["Destroyable","constructor","deps","this","destroy","forEach","dep","addDep","push","DestroyFunc","destructor","super","TheOwner","From","fn","give","value","TheInformation","isFilled","OwnerPool","__publicField","owners","Set","innerOwner","v","g","owner","size","has","add","remove","delete","Of","theValue","o","Lazy","buildFn","get","args","OfFunc","valueFn","mbDestructor","All","theInfos","infos","keysKnown","Object","keys","result","entries","key","info","keysFilled","isAllFilled","values","Any","Applied","baseSrc","applier","Chain","lastValue","handleI","index","nextI","ExecutorApplied","Filtered","predicate","defaultValue","FromCallback","waitForCb","theArgs","FromEvent","emitterSrc","eventNameSrc","subscribeMethodSrc","unsubscribeMethodSrc","a","handler","emitter","eventName","subscribe","unsubscribe","FromPromise","p","errorOwner","then","catch","e","Late","notify","theOwner","Error","lateOwner","LazyApplied","baseLazy","LazyClass","constrFn","Map","targetSrc","val","valInfo","Once","Sequence","Shared","stateless","ownersPool","i","pool","Stream","cv"],"mappings":"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"}