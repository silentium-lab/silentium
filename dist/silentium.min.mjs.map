{"version":3,"file":"silentium.min.mjs","sources":["../src/Information/Information.ts","../src/Owner/Owner.ts","../src/Information/All.ts","../src/Information/Any.ts","../src/Information/Chain.ts","../src/Information/ExecutorApplied.ts","../src/Information/Applied.ts","../src/Information/Filtered.ts","../src/Owner/OwnerApplied.ts","../src/Owner/OwnerExecutorApplied.ts","../src/Owner/OwnerSync.ts","../src/Information/Lazy.ts","../src/Information/Map.ts","../src/Information/Of.ts","../src/Information/Once.ts","../src/utils/OwnerPool.ts","../src/Information/Pool.ts","../src/Information/Sequence.ts","../src/Information/Stream.ts","../src/Information/FromCallback.ts","../src/Information/FromEvent.ts","../src/Information/FromPromise.ts","../src/utils/Lazy.ts","../src/utils/LazyClass.ts"],"sourcesContent":["import { DebugCbType } from \"src/types\";\nimport { Owner } from \"../Owner/Owner\";\nimport { InformationDataType } from \"../types/InformationType\";\n\ntype InfoExecutorType<T> = (g: Owner<T>) => (() => void | undefined) | void;\ntype InfoObjectType<T> = {\n  value: InfoExecutorType<T>;\n};\n\ntype InformationExecutedCb<T> = (g: Owner<T>) => void;\n\n/**\n * Main information representation\n * https://silentium-lab.github.io/silentium/#/en/information\n */\nexport class Information<T = any> {\n  private static instances = 0;\n  private theSubInfos: Information<unknown>[] = [];\n  private destructor?: () => void;\n  private owner?: Owner<T>;\n  private executedCbs?: InformationExecutedCb<T>[];\n  private alreadyExecuted = false;\n  private debugCbs: DebugCbType[] = [];\n\n  public constructor(\n    private info?:\n      | InfoObjectType<T>\n      | InfoExecutorType<T>\n      | InformationDataType<T>,\n    private theName = \"unknown\",\n    private onlyOneOwner = true,\n  ) {\n    Information.instances += 1;\n  }\n\n  /**\n   * Следующее значение источника\n   */\n  private next(value: T) {\n    if (this.owner !== undefined) {\n      this.owner.give(value);\n      this.doDebug(\"next value\", value);\n    }\n    return this;\n  }\n\n  /**\n   * Возможность гостю получить информацию от источника\n   */\n  public value(owner: Owner<T>) {\n    if (this.onlyOneOwner && this.owner !== undefined) {\n      throw new Error(`owner already connected to info ${this.name()}`);\n    }\n\n    this.owner = owner;\n    if (this.executedCbs !== undefined && !this.alreadyExecuted) {\n      this.executedCbs.forEach((cb) => cb(owner));\n      this.alreadyExecuted = true;\n    }\n\n    if (this.info === undefined) {\n      return this;\n    }\n\n    if (typeof this.info === \"function\") {\n      const mbDestructor = this.info(owner);\n      if (\n        this.destructor === undefined &&\n        mbDestructor !== undefined &&\n        this.info !== mbDestructor &&\n        typeof mbDestructor === \"function\"\n      ) {\n        this.destructor = mbDestructor as () => void;\n      }\n    } else if (\n      typeof this.info === \"object\" &&\n      this.info !== null &&\n      \"value\" in this.info &&\n      typeof this.info.value === \"function\"\n    ) {\n      this.info.value(owner);\n    } else {\n      this.next(this.info as T);\n    }\n\n    return this;\n  }\n\n  /**\n   * Ability to destroy the information info\n   */\n  public destroy() {\n    while (this.theSubInfos.length > 0) {\n      const subInfo = this.theSubInfos.shift();\n      subInfo?.destroy();\n    }\n    if (this.destructor) {\n      this.destructor();\n    }\n    this.owner = undefined;\n    this.executedCbs = undefined;\n    this.destructor = undefined;\n    this.doDebug(\"destroyed\");\n    return this;\n  }\n\n  /**\n   * The ability to link another info to the current info\n   */\n  public subInfo(info: Information<any>) {\n    this.theSubInfos.push(info);\n    return this;\n  }\n\n  public subInfos() {\n    return this.theSubInfos;\n  }\n\n  public name() {\n    return `#info_${this.theName}_${Information.instances}`;\n  }\n\n  public executed(cb: InformationExecutedCb<T>) {\n    this.doDebug(\"executed\");\n    if (!this.executedCbs) {\n      this.executedCbs = [];\n    }\n    this.executedCbs.push(cb);\n    if (this.alreadyExecuted && this.owner !== undefined) {\n      cb(this.owner);\n    }\n    return this;\n  }\n\n  public hasOwner(): boolean {\n    return !!this.owner;\n  }\n\n  public debug(cb: DebugCbType) {\n    this.debugCbs.push(cb);\n    return this;\n  }\n\n  private doDebug(...data: unknown[]) {\n    this.debugCbs.forEach((cb) => cb(...data));\n  }\n}\n\nexport const I = <T>(\n  info?:\n    | Information<T>\n    | InfoObjectType<T>\n    | InfoExecutorType<T>\n    | InformationDataType<T>,\n  theName = \"unknown\",\n  onlyOneOwner = true,\n) =>\n  info instanceof Information\n    ? info\n    : new Information(info, theName, onlyOneOwner);\n","import { DebugCbType } from \"src/types\";\nimport { OwnerExecutorType } from \"../types/OwnerType\";\n\n/**\n * Information owner, if information\n * has owner than information executed\n * https://silentium-lab.github.io/silentium/#/en/owner\n */\nexport class Owner<T = any> {\n  private debugCbs: DebugCbType[] = [];\n\n  public constructor(\n    private ownerFn: OwnerExecutorType<T>,\n    private errorFn?: (cause: unknown) => void,\n    private disposedFn?: () => boolean,\n  ) {}\n\n  public give(value: T) {\n    this.doDebug(\"value\", value);\n    if (!this.disposed()) {\n      this.ownerFn(value);\n    }\n    return this;\n  }\n\n  public error(cause: unknown) {\n    this.doDebug(\"error\", cause);\n    if (this.errorFn !== undefined) {\n      this.errorFn(cause);\n    }\n    return this;\n  }\n\n  public disposed() {\n    return this.disposedFn !== undefined ? this.disposedFn() : false;\n  }\n\n  public debug(cb: DebugCbType) {\n    this.debugCbs.push(cb);\n    return this;\n  }\n\n  private doDebug(...data: unknown[]) {\n    this.debugCbs.forEach((cb) => cb(...data));\n  }\n}\n\nexport const O = <T>(ownerFn: OwnerExecutorType<T>) => new Owner(ownerFn);\n","import { Owner } from \"../Owner/Owner\";\nimport { InformationType } from \"../types/InformationType\";\nimport { Information } from \"./Information\";\n\ntype ExtractType<T> = T extends InformationType<infer U> ? U : never;\ntype ExtractTypeS<T> = T extends Information<infer U> ? U : never;\n\nexport type ExtractTypesFromArray<T extends InformationType<any>[]> = {\n  [K in keyof T]: ExtractType<T[K]>;\n};\n\nexport type ExtractTypesFromArrayS<T extends Information<any>[]> = {\n  [K in keyof T]: ExtractTypeS<T[K]>;\n};\n\n/**\n * Combines multiple information sources into a single unified source\n * represented as an array containing values from all sources\n * https://silentium-lab.github.io/silentium/#/en/information/all\n */\nexport const all = <const T extends Information[]>(...infos: T) => {\n  const i = new Information<ExtractTypesFromArrayS<T>>((g) => {\n    const keysKnown = new Set<string>(Object.keys(infos));\n    const keysFilled = new Set();\n    const isAllFilled = () => {\n      return keysFilled.size > 0 && keysFilled.size === keysKnown.size;\n    };\n    const result: Record<string, unknown> = {};\n\n    Object.entries(infos).forEach(([key, info]) => {\n      i.subInfo(info);\n      keysKnown.add(key);\n      info.value(\n        new Owner((v) => {\n          keysFilled.add(key);\n          result[key] = v;\n          if (isAllFilled()) {\n            g.give(Object.values(result) as ExtractTypesFromArrayS<T>);\n          }\n        }),\n      );\n    });\n  });\n\n  return i;\n};\n","import { I, Information } from \"./Information\";\n\n/**\n * From a set of information sources we get\n * a common response from any source for a single owner\n * https://silentium-lab.github.io/silentium/#/en/information/any\n */\nexport const any = <T>(...infos: Information<T>[]) => {\n  const info = I((g) => {\n    infos.forEach((info) => {\n      info.value(g);\n      info.subInfo(info);\n    });\n  });\n\n  return info;\n};\n","import { O, Owner } from \"../Owner/Owner\";\nimport { I, Information } from \"./Information\";\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ntype Last<T extends any[]> = T extends [...infer U, infer L] ? L : never;\n\n/**\n * The set of information sources forms a sequential chain where each source provides\n * an answer. The final answer will be the output result. If any source in the chain\n * provides a new answer, the component's overall response will be repeated.\n * https://silentium-lab.github.io/silentium/#/en/information/applied\n */\nexport const chain = <T extends Information[]>(\n  ...infos: T\n): Information<Last<T>> => {\n  let theOwner: Owner<Last<T>> | undefined;\n  let lastValue: Last<T> | undefined;\n  const respondedI = new WeakMap();\n\n  const handleI = (index: number) => {\n    const info = infos[index];\n    const nextI = infos[index + 1];\n\n    info.value(\n      O((v) => {\n        if (!nextI) {\n          lastValue = v;\n          theOwner?.give(v);\n        }\n\n        if (nextI && lastValue !== undefined && theOwner !== undefined) {\n          theOwner.give(lastValue);\n        }\n\n        if (nextI && !respondedI.has(info)) {\n          handleI(index + 1);\n        }\n\n        respondedI.set(info, 1);\n      }),\n    );\n  };\n\n  const info = I<Last<T>>((g) => {\n    theOwner = g;\n  });\n\n  info.executed((g) => {\n    theOwner = g;\n    handleI(0);\n  });\n\n  return info;\n};\n","import { Owner } from \"../Owner/Owner\";\nimport { Information } from \"./Information\";\n\n/**\n * Information to which a function is applied in order\n * to control the value passing process\n * https://silentium-lab.github.io/silentium/#/en/information/applied\n */\nexport const executorApplied = <T>(\n  base: Information<T>,\n  applier: (executor: Owner<T>) => Owner<T>,\n) => {\n  const i = new Information<T>((g) => {\n    base.value(applier(g));\n  });\n  i.subInfo(base);\n\n  return i;\n};\n","import { O } from \"../Owner/Owner\";\nimport { I, Information } from \"./Information\";\n\n/**\n * Information to which the function was applied to change the value\n * https://silentium-lab.github.io/silentium/#/en/information/applied\n */\nexport const applied = <T, R>(base: Information<T>, applier: (v: T) => R) => {\n  const info = I((g) => {\n    base.value(\n      O((v) => {\n        g.give(applier(v));\n      }),\n    );\n  });\n  info.subInfo(base);\n\n  return info;\n};\n","import { O } from \"../Owner/Owner\";\nimport { Information } from \"./Information\";\n\n/**\n * Information whose value is being validated\n * via a predicate; if the predicate returns true, the value\n * can be passed to the output\n * https://silentium-lab.github.io/silentium/#/en/information/filtered\n */\nexport const filtered = <T>(\n  base: Information<T>,\n  predicate: (v: T) => boolean,\n  defaultValue?: T,\n) => {\n  return new Information<T>((g) => {\n    base.value(\n      O((v) => {\n        if (predicate(v)) {\n          g.give(v);\n        } else if (defaultValue !== undefined) {\n          g.give(defaultValue);\n        }\n      }),\n    );\n  }).subInfo(base);\n};\n","import { Owner } from \"./Owner\";\n\n/**\n * Owner to which a function is applied that modifies the incoming\n * value it receives\n * https://silentium-lab.github.io/silentium/#/en/owner/applied\n */\nexport const ownerApplied = <T, R>(\n  base: Owner<R>,\n  applier: (value: T) => R,\n) => {\n  return new Owner<T>(\n    (v) => {\n      base.give(applier(v));\n    },\n    (cause) => {\n      base.error(cause);\n    },\n    () => base.disposed(),\n  );\n};\n","import { Owner } from \"./Owner\";\n\n/**\n * Owner to which the function is applied that\n * controls the conditions for passing the value\n * https://silentium-lab.github.io/silentium/#/en/owner/executor-applied\n */\nexport const ownerExecutorApplied = <T>(\n  base: Owner<T>,\n  applier: (ge: (v: T) => void) => (v: T) => void,\n) => {\n  const executor = applier((v) => base.give(v));\n  return new Owner<T>((v) => {\n    executor(v);\n  });\n};\n","import { Information } from \"../Information\";\nimport { O } from \".\";\n\nexport interface InfoSync<T> {\n  syncValue(): T;\n  filled(): boolean;\n}\n\n/**\n * Owner that can return a synchronous value\n * from the information passed to it. If there is no value and no\n * defaultValue, an error will occur\n * https://silentium-lab.github.io/silentium/#/en/owner/sync\n */\nexport const ownerSync = <T>(\n  base: Information<T>,\n  defaultValue?: T,\n): InfoSync<T> => {\n  let lastValue: T | undefined;\n\n  base.value(\n    O((v) => {\n      lastValue = v;\n    }),\n  );\n\n  return {\n    syncValue() {\n      if (lastValue === undefined && defaultValue === undefined) {\n        throw new Error(\"info sync is empty\");\n      }\n      return (lastValue ?? defaultValue) as T;\n    },\n    filled() {\n      return lastValue !== undefined;\n    },\n  };\n};\n","import { O } from \"../Owner\";\nimport { LazyType } from \"../types/LazyType\";\nimport { Information } from \"./Information\";\n\n/**\n * Helps in the process of executing information to create\n * a new information object and also destroy it if\n * destruction information is received\n * https://silentium-lab.github.io/silentium/#/en/information/lazy\n */\nexport const lazyS = <T>(\n  lazyI: LazyType<Information<T>>,\n  destroyI?: Information<unknown>,\n) => {\n  const info = new Information<T>((g) => {\n    const instance = lazyI.get();\n    info.subInfo(instance);\n    instance.value(g);\n  });\n\n  if (destroyI) {\n    info.subInfo(destroyI);\n    destroyI.value(\n      O(() => {\n        info.destroy();\n      }),\n    );\n  }\n\n  return info;\n};\n","import { InformationDataType } from \"../types\";\nimport { O } from \"../Owner/Owner\";\nimport { LazyType } from \"../types/LazyType\";\nimport { all } from \"./All\";\nimport { I, Information } from \"./Information\";\n\n/**\n * Component that applies an info object constructor to each data item,\n * producing an information source with new values\n * https://silentium-lab.github.io/silentium/#/en/information/map\n */\nexport const map = <T, TG>(\n  base: Information<T[]>,\n  targetI: LazyType<Information<TG>>,\n) => {\n  const i = new Information<TG[]>((g) => {\n    base.value(\n      O((v) => {\n        const infos: Information<TG>[] = [];\n        v.forEach((val) => {\n          let valInfo: Information<T> | T = val;\n          if (!(valInfo instanceof Information)) {\n            valInfo = I(val as InformationDataType<T>);\n          }\n          const info = targetI.get(valInfo);\n          infos.push(info);\n        });\n        const allI = all(...infos).value(g);\n        i.subInfo(allI);\n      }),\n    );\n  });\n  i.subInfo(base);\n\n  return i;\n};\n","import { Owner } from \"../Owner\";\nimport { Information } from \"./Information\";\nimport { InformationDataType } from \"../types/InformationType\";\n\n/**\n * A component that allows creating linked objects of information and its owner\n * in such a way that if a new value is assigned to the owner, this value\n * will become the value of the linked information source\n * https://silentium-lab.github.io/silentium/#/en/information/of\n */\nexport const of = <T>(incomeI?: InformationDataType<T>) => {\n  let sharedValue = incomeI as T;\n  let relatedO: Owner<T> | undefined;\n\n  const notifyO = () => {\n    if (relatedO !== undefined) {\n      relatedO.give(sharedValue);\n    }\n  };\n\n  const info = new Information<T>((g) => {\n    relatedO = g;\n    if (sharedValue !== undefined && sharedValue !== null) {\n      notifyO();\n    }\n  }, \"of\");\n\n  return [\n    info,\n    new Owner<T>((v) => {\n      sharedValue = v;\n      notifyO();\n    }),\n  ] as const;\n};\n","import { O } from \"../Owner\";\nimport { Information } from \"./Information\";\n\n/**\n * Limits the number of values from the information source\n * to a single value - once the first value is emitted, no more\n * values are delivered from the source\n * https://silentium-lab.github.io/silentium/#/en/information/once\n */\nexport const once = <T>(base: Information<T>) => {\n  const info = new Information<T>((g) => {\n    let isFilled = false;\n    base.value(\n      O((v) => {\n        if (!isFilled) {\n          isFilled = true;\n          g.give(v);\n        }\n      }),\n    );\n  });\n  info.subInfo(base);\n\n  return info;\n};\n","import { Owner } from \"../Owner\";\n\n/**\n * Helps maintain an owner list allowing different\n * owners to get information from a common source\n * https://silentium-lab.github.io/silentium/#/en/utils/owner-pool\n */\nexport class OwnerPool<T> {\n  private owners: Set<Owner<T>>;\n  private innerOwner: Owner<T>;\n\n  public constructor() {\n    this.owners = new Set<Owner<T>>();\n    this.innerOwner = new Owner(\n      (v) => {\n        this.owners.forEach((g) => {\n          g.give(v);\n        });\n      },\n      (cause) => {\n        this.owners.forEach((g) => {\n          g.error(cause);\n        });\n      },\n    );\n  }\n\n  public owner() {\n    return this.innerOwner;\n  }\n\n  public size(): number {\n    return this.owners.size;\n  }\n\n  public has(owner: Owner<T>): boolean {\n    return this.owners.has(owner);\n  }\n\n  public add(shouldBePatron: Owner<T>) {\n    this.owners.add(shouldBePatron);\n    return this;\n  }\n\n  public remove(g: Owner<T>) {\n    this.owners.delete(g);\n    return this;\n  }\n\n  public destroy() {\n    this.owners.forEach((g) => {\n      this.remove(g);\n    });\n    return this;\n  }\n}\n","import { Owner } from \"../Owner\";\nimport { Information } from \"./Information\";\nimport { OwnerPool } from \"../utils/OwnerPool\";\n\n/**\n * An information object that helps multiple owners access\n * a single another information object\n * https://silentium-lab.github.io/silentium/#/en/information/pool\n */\nexport const pool = <T>(base: Information<T>) => {\n  const ownersPool = new OwnerPool<T>();\n  let lastValue: T | undefined;\n\n  const i = new Information<T>(\n    (g) => {\n      if (lastValue !== undefined && !ownersPool.has(g)) {\n        g.give(lastValue);\n      }\n      ownersPool.add(g);\n\n      return () => {\n        ownersPool.destroy();\n      };\n    },\n    \"pool\",\n    false,\n  );\n  i.subInfo(base);\n\n  i.executed(() => {\n    const gp = ownersPool.owner();\n    base.value(\n      new Owner((v) => {\n        gp.give(v);\n        lastValue = v;\n      }),\n    );\n  });\n\n  return [i, ownersPool] as const;\n};\n\nexport const poolStateless = <T>(base: Information<T>) => {\n  const ownersPool = new OwnerPool<T>();\n\n  const i = new Information<T>(\n    (g) => {\n      ownersPool.add(g);\n\n      return () => {\n        ownersPool.destroy();\n      };\n    },\n    \"pool\",\n    false,\n  );\n  i.subInfo(base);\n\n  i.executed((g) => {\n    ownersPool.add(g);\n    base.value(ownersPool.owner());\n  });\n\n  return [i, ownersPool] as const;\n};\n","import { I, Information } from \"../Information\";\nimport { O } from \"../Owner\";\n\n/**\n * A component that takes one value at a time and returns an array\n * https://silentium-lab.github.io/silentium/#/en/information/sequence\n */\nexport const sequence = <T>(base: Information<T>): Information<T[]> => {\n  const i = I<T[]>((o) => {\n    const result: T[] = [];\n\n    base.value(\n      O((v) => {\n        result.push(v);\n        o.give(result);\n      }),\n    );\n  });\n  i.subInfo(base);\n\n  return i;\n};\n","import { I, Information } from \"../Information\";\nimport { O } from \"../Owner\";\n\n/**\n * Component that receives a data array and yields values one by one\n * https://silentium-lab.github.io/silentium/#/en/information/stream\n */\nexport const stream = <T>(base: Information<T[]>): Information<T> => {\n  const i = I<T>((o) => {\n    base.value(\n      O((v) => {\n        v.forEach((cv) => {\n          o.give(cv);\n        });\n      }),\n    );\n  });\n\n  return i;\n};\n","import { I } from \"../Information\";\n\n/**\n * When receiving a reference to a function expecting a callback, the component\n * creates its own callback, and the data received in this callback\n * will become the value of the information object\n * https://silentium-lab.github.io/silentium/#/en/information/from-callback\n */\nexport const fromCallback = <T>(waitForCb: (cb: (v: T) => any) => unknown) => {\n  return I((o) => {\n    waitForCb((v) => {\n      o.give(v);\n    });\n  });\n};\n","import { I } from \"../Information\";\n\n/**\n * A component that receives data from an event and\n * presents it as an information object\n * https://silentium-lab.github.io/silentium/#/en/information/from-event\n */\nexport const fromEvent = <T extends []>(\n  emitter: any,\n  eventName: string,\n  subscribeMethod: string,\n  unsubscribeMethod?: string,\n) => {\n  return I((o) => {\n    const handler = (...args: T) => {\n      o.give(args);\n    };\n    emitter[subscribeMethod](eventName, handler);\n    return () => {\n      if (unsubscribeMethod !== undefined) {\n        emitter[unsubscribeMethod](eventName, handler);\n      }\n    };\n  });\n};\n","import { I, Information } from \"../Information/Information\";\n\n/**\n * Component that gets a value from a promise and\n * presents it as information\n * https://silentium-lab.github.io/silentium/#/en/information/from-promise\n */\nexport const fromPromise = <T>(p: Promise<T>): Information<T> => {\n  return I((o) => {\n    p.then((v) => {\n      o.give(v);\n    }).catch((e) => {\n      o.error(e);\n    });\n  });\n};\n","import { LazyType } from \"../types/LazyType\";\n\n/**\n * Helps to get lazy instance of dependency\n * @url https://silentium-lab.github.io/silentium/#/utils/lazy\n */\nexport const lazy = <T>(buildingFn: (...args: any[]) => T): LazyType<T> => {\n  if (buildingFn === undefined) {\n    throw new Error(\"lazy didn't receive buildingFn argument\");\n  }\n\n  return {\n    get<R extends unknown[], CT = null>(...args: R): CT extends null ? T : CT {\n      return buildingFn(...args) as CT extends null ? T : CT;\n    },\n  };\n};\n","import { LazyType } from \"../types/LazyType\";\n\ninterface Constructable<T> {\n  new (...args: unknown[]): T;\n}\n\ninterface Prototyped<T> {\n  prototype: T;\n}\n\n/**\n * Helps create an object from a class\n * https://silentium-lab.github.io/silentium/#/en/utils/lazy-class\n */\nexport const lazyClass = <T>(\n  constructorFn: Prototyped<T>,\n  modules: Record<string, unknown> = {},\n): LazyType<T> => {\n  if (constructorFn === undefined) {\n    throw new Error(\"PrivateClass didn't receive constructorFn argument\");\n  }\n\n  return {\n    get<R extends unknown[], CT = null>(...args: R): CT extends null ? T : CT {\n      return new (constructorFn as Constructable<T>)(\n        ...args,\n        modules,\n      ) as CT extends null ? T : CT;\n    },\n  };\n};\n"],"names":["_Information","constructor","info","theName","onlyOneOwner","this","__publicField","instances","next","value","owner","give","doDebug","Error","name","executedCbs","alreadyExecuted","forEach","cb","mbDestructor","destructor","destroy","theSubInfos","length","subInfo","shift","push","subInfos","executed","hasOwner","debug","debugCbs","data","Information","I","Owner","ownerFn","errorFn","disposedFn","disposed","error","cause","O","all","infos","i","g","keysKnown","Set","Object","keys","keysFilled","result","entries","key","add","v","size","values","any","chain","theOwner","lastValue","respondedI","WeakMap","handleI","index","nextI","has","set","executorApplied","base","applier","applied","filtered","predicate","defaultValue","ownerApplied","ownerExecutorApplied","executor","ownerSync","syncValue","filled","lazyS","lazyI","destroyI","instance","get","map","targetI","val","valInfo","allI","of","incomeI","relatedO","sharedValue","notifyO","once","isFilled","OwnerPool","owners","innerOwner","shouldBePatron","remove","delete","pool","ownersPool","gp","poolStateless","sequence","o","stream","cv","fromCallback","waitForCb","fromEvent","emitter","eventName","subscribeMethod","unsubscribeMethod","handler","args","fromPromise","p","then","catch","e","lazy","buildingFn","lazyClass","constructorFn","modules"],"mappings":"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"}