{"version":3,"file":"silentium.mjs","sources":["../src/helpers/isFilled.ts","../src/helpers/OwnerPool.ts","../src/helpers/onExecuted.ts","../src/helpers/destroyArr.ts","../src/components/All.ts","../src/components/Any.ts","../src/components/Applied.ts","../src/components/Chain.ts","../src/components/ExecutorApplied.ts","../src/components/Filtered.ts","../src/components/FromCallback.ts","../src/components/FromEvent.ts","../src/components/Of.ts","../src/components/FromPromise.ts","../src/components/Information.ts","../src/components/LazyChain.ts","../src/components/LazyClass.ts","../src/components/Map.ts","../src/components/Once.ts","../src/components/Sequence.ts","../src/components/Shared.ts","../src/components/Stream.ts"],"sourcesContent":["export const isFilled = <T>(value?: T): value is T => {\n  return value !== undefined && value !== null;\n};\n","import { OwnerType } from \"../types\";\n\n/**\n * Helps maintain an owner list allowing different\n * owners to get information from a common source\n * https://silentium-lab.github.io/silentium/#/en/utils/owner-pool\n */\nexport class OwnerPool<T> {\n  private owners: Set<OwnerType<T>>;\n  private innerOwner: OwnerType<T>;\n\n  public constructor() {\n    this.owners = new Set<OwnerType<T>>();\n    this.innerOwner = (v) => {\n      this.owners.forEach((g) => {\n        g(v);\n      });\n    };\n  }\n\n  public owner() {\n    return this.innerOwner;\n  }\n\n  public size(): number {\n    return this.owners.size;\n  }\n\n  public has(owner: OwnerType<T>): boolean {\n    return this.owners.has(owner);\n  }\n\n  public add(shouldBePatron: OwnerType<T>) {\n    this.owners.add(shouldBePatron);\n    return this;\n  }\n\n  public remove(g: OwnerType<T>) {\n    this.owners.delete(g);\n    return this;\n  }\n\n  public destroy() {\n    this.owners.forEach((g) => {\n      this.remove(g);\n    });\n    return this;\n  }\n}\n","/**\n * Helps to run callback only once\n * when information was executed at first time\n */\nexport const onExecuted = (fn: (...args: any[]) => void) => {\n  let executed = false;\n  return (...args: unknown[]) => {\n    if (!executed) {\n      fn(...args);\n    }\n    executed = true;\n  };\n};\n","export const destroyArr = (arr: unknown[]) => {\n  arr.forEach((item) => {\n    if (typeof item === \"function\") {\n      item();\n    }\n  });\n};\n","import { destroyArr } from \"../helpers\";\nimport { InformationType } from \"../types\";\n\ntype ExtractTypeS<T> = T extends InformationType<infer U> ? U : never;\n\nexport type ExtractTypesFromArrayS<T extends InformationType<any>[]> = {\n  [K in keyof T]: ExtractTypeS<T[K]>;\n};\n\n/**\n * Combines multiple information sources into a single unified source\n * represented as an array containing values from all sources\n * https://silentium-lab.github.io/silentium/#/en/information/all\n */\nexport const all = <const T extends InformationType[]>(\n  ...infos: T\n): InformationType<ExtractTypesFromArrayS<T>> => {\n  return (g) => {\n    const keysKnown = new Set<string>(Object.keys(infos));\n    const keysFilled = new Set();\n    const isAllFilled = () => {\n      return keysFilled.size > 0 && keysFilled.size === keysKnown.size;\n    };\n    const result: Record<string, unknown> = {};\n    const destructors: unknown[] = [];\n\n    Object.entries(infos).forEach(([key, info]) => {\n      keysKnown.add(key);\n      destructors.push(\n        info((v) => {\n          keysFilled.add(key);\n          result[key] = v;\n          if (isAllFilled()) {\n            return g(Object.values(result) as ExtractTypesFromArrayS<T>);\n          }\n        }),\n      );\n    });\n\n    return () => {\n      keysKnown.clear();\n      keysFilled.clear();\n      destroyArr(destructors);\n    };\n  };\n};\n","import { destroyArr } from \"../helpers\";\nimport { InformationType } from \"../types\";\n\n/**\n * From a set of information sources we get\n * a common response from any source for a single owner\n * https://silentium-lab.github.io/silentium/#/en/information/any\n */\nexport const any = <T>(...infos: InformationType<T>[]): InformationType<T> => {\n  return (o) => {\n    const destructors: unknown[] = [];\n    infos.forEach((info) => {\n      destructors.push(info(o));\n    });\n\n    return () => {\n      destroyArr(destructors);\n    };\n  };\n};\n","import { InformationType, OwnerType } from \"../types\";\n\n/**\n * Information to which the function was applied to change the value\n * https://silentium-lab.github.io/silentium/#/en/information/applied\n */\nexport const applied = <T, R>(\n  base: InformationType<T>,\n  applier: (v: T) => R,\n): InformationType<R> => {\n  return (g: OwnerType<R>) => {\n    return base((v) => {\n      return g(applier(v));\n    });\n  };\n};\n","import { destroyArr, onExecuted } from \"../helpers\";\nimport { InformationType, OwnerType } from \"../types\";\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ntype Last<T extends any[]> = T extends [...infer U, infer L] ? L : never;\n\n/**\n * The set of information sources forms a sequential chain where each source provides\n * an answer. The final answer will be the output result. If any source in the chain\n * provides a new answer, the component's overall response will be repeated.\n * https://silentium-lab.github.io/silentium/#/en/information/applied\n */\nexport const chain = <T extends InformationType[]>(...infos: T): Last<T> => {\n  let theOwner: OwnerType<Last<T>> | undefined;\n  let lastValue: Last<T> | undefined;\n  const respondedI = new WeakMap();\n  const destructors: unknown[] = [];\n\n  const handleI = (index: number) => {\n    const info = infos[index] as InformationType<Last<T>>;\n    const nextI = infos[index + 1] as InformationType<Last<T>> | undefined;\n\n    info((v) => {\n      if (!nextI) {\n        lastValue = v;\n        destructors.push(theOwner?.(v));\n      }\n\n      if (nextI && lastValue !== undefined && theOwner !== undefined) {\n        destructors.push(theOwner?.(lastValue));\n      }\n\n      if (nextI && !respondedI.has(info)) {\n        handleI(index + 1);\n      }\n\n      respondedI.set(info, 1);\n    });\n  };\n\n  const executed = onExecuted((g) => {\n    theOwner = g;\n    handleI(0);\n  });\n\n  const info = <Last<T>>((g) => {\n    executed(g);\n    theOwner = g;\n    return () => {\n      destroyArr(destructors);\n    };\n  });\n\n  return info;\n};\n","import { InformationType, OwnerType } from \"../types\";\n\n/**\n * Information to which a function is applied in order\n * to control the value passing process\n * https://silentium-lab.github.io/silentium/#/en/information/applied\n */\nexport const executorApplied = <T>(\n  base: InformationType<T>,\n  applier: (executor: OwnerType<T>) => OwnerType<T>,\n): InformationType<T> => {\n  return (owner) => {\n    return base(applier(owner));\n  };\n};\n","import { InformationType } from \"../types\";\n\n/**\n * Information whose value is being validated\n * via a predicate; if the predicate returns true, the value\n * can be passed to the output\n * https://silentium-lab.github.io/silentium/#/en/information/filtered\n */\nexport const filtered = <T>(\n  base: InformationType<T>,\n  predicate: (v: T) => boolean,\n  defaultValue?: T,\n): InformationType<T> => {\n  return (owner) => {\n    return base((v) => {\n      if (predicate(v)) {\n        return owner(v);\n      } else if (defaultValue !== undefined) {\n        return owner(defaultValue);\n      }\n    });\n  };\n};\n","import { InformationType } from \"../types\";\n\n/**\n * When receiving a reference to a function expecting a callback, the component\n * creates its own callback, and the data received in this callback\n * will become the value of the information object\n * https://silentium-lab.github.io/silentium/#/en/information/from-callback\n */\nexport const fromCallback = <T>(\n  waitForCb: (cb: (v: T) => any, ...args: unknown[]) => unknown,\n  ...args: unknown[]\n): InformationType<T> => {\n  return (o) => {\n    waitForCb(\n      (v) => {\n        o(v);\n      },\n      ...args,\n    );\n  };\n};\n","import { InformationType } from \"../types\";\n\n/**\n * A component that receives data from an event and\n * presents it as an information object\n * https://silentium-lab.github.io/silentium/#/en/information/from-event\n */\nexport const fromEvent = (\n  emitter: any,\n  eventName: string,\n  subscribeMethod: string,\n  unsubscribeMethod?: string,\n): InformationType => {\n  return (o) => {\n    const handler = (...args: any[]) => {\n      o(args);\n    };\n    emitter[subscribeMethod](eventName, handler);\n    return () => {\n      if (unsubscribeMethod !== undefined) {\n        emitter[unsubscribeMethod](eventName, handler);\n      }\n    };\n  };\n};\n","import { isFilled } from \"../helpers\";\nimport { InformationType, OwnerType } from \"../types\";\n\n/**\n * A component that allows creating linked objects of information and its owner\n * in such a way that if a new value is assigned to the owner, this value\n * will become the value of the linked information source\n * https://silentium-lab.github.io/silentium/#/en/information/of\n */\nexport const of = <T>(sharedValue?: T) => {\n  let relatedO: OwnerType<T> | undefined;\n\n  const notifyO = () => {\n    if (relatedO !== undefined && isFilled(sharedValue)) {\n      return relatedO(sharedValue);\n    }\n  };\n\n  const info = <InformationType<T>>((o) => {\n    relatedO = o;\n    return notifyO();\n  });\n\n  return [\n    info,\n    (v: T) => {\n      sharedValue = v;\n      return notifyO();\n    },\n  ] as const;\n};\n","import { InformationType } from \"../types\";\nimport { of } from \"./Of\";\n\n/**\n * Component that gets a value from a promise and\n * presents it as information\n * https://silentium-lab.github.io/silentium/#/en/information/from-promise\n */\nexport const fromPromise = <T>(\n  p: Promise<T>,\n): [InformationType<T>, InformationType] => {\n  const [errorInf, errorOwn] = of();\n\n  return [\n    (own) => {\n      p.then((v) => {\n        own(v);\n      }).catch((e) => {\n        errorOwn(e);\n      });\n    },\n    errorInf,\n  ];\n};\n","import { InformationType } from \"../types\";\n\nexport const i =\n  <T>(v: T): InformationType<T> =>\n  (o) => {\n    return o(v);\n  };\n","import { InformationType, LazyType } from \"../types\";\nimport { chain } from \"./Chain\";\n\n/**\n * Helps to chain lazy info after\n * another lazy info\n */\nexport const lazyChain = <T>(\n  lazy: LazyType<T>,\n  chainSrc: InformationType<T>,\n): LazyType<T> => {\n  return (...args) => {\n    const baseSrc = lazy(...args);\n    return chain(chainSrc, baseSrc);\n  };\n};\n","import { OwnerType } from \"../types\";\n\nexport const lazyClass =\n  (constrFn: any) =>\n  (...args: any[]) => {\n    const inst = new constrFn(...args);\n    return (o: OwnerType<any>) => {\n      inst.value(o);\n    };\n  };\n","import { InformationType, LazyType } from \"../types\";\nimport { all } from \"./All\";\nimport { i } from \"./Information\";\n\n/**\n * Component that applies an info object constructor to each data item,\n * producing an information source with new values\n * https://silentium-lab.github.io/silentium/#/en/information/map\n */\nexport const map = <T, TG>(\n  base: InformationType<T[]>,\n  targetI: LazyType<TG>,\n): InformationType<TG[]> => {\n  return (g) => {\n    base((v) => {\n      const infos: InformationType<TG>[] = [];\n      v.forEach((val) => {\n        let valInfo: InformationType<T> | T = val;\n        if (typeof valInfo !== \"function\") {\n          valInfo = i(valInfo);\n        }\n        const info = targetI(valInfo);\n        infos.push(info);\n      });\n      const allI = all(...infos);\n      allI(g);\n    });\n  };\n};\n","import { InformationType } from \"../types\";\n\n/**\n * Limits the number of values from the information source\n * to a single value - once the first value is emitted, no more\n * values are delivered from the source\n * https://silentium-lab.github.io/silentium/#/en/information/once\n */\nexport const once = <T>(base: InformationType<T>): InformationType<T> => {\n  return (owner) => {\n    let isFilled = false;\n    base((v) => {\n      if (!isFilled) {\n        isFilled = true;\n        owner(v);\n      }\n    });\n  };\n};\n","import { InformationType } from \"../types\";\n\n/**\n * A component that takes one value at a time and returns\n * an array of all previous values\n * https://silentium-lab.github.io/silentium/#/en/information/sequence\n */\nexport const sequence = <T>(base: InformationType<T>): InformationType<T[]> => {\n  return (o) => {\n    const result: T[] = [];\n\n    base((v) => {\n      result.push(v);\n      o(result);\n    });\n  };\n};\n","import { DestructorType } from \"../types/DestructorType\";\nimport { isFilled, onExecuted, OwnerPool } from \"../helpers\";\nimport { InformationType, OwnerType } from \"../types\";\n\n/**\n * An information object that helps multiple owners access\n * a single another information object\n * https://silentium-lab.github.io/silentium/#/en/information/pool\n */\nexport const shared = <T>(base: InformationType<T>) => {\n  const ownersPool = new OwnerPool<T>();\n  let lastValue: T | undefined;\n  let baseDestructor: DestructorType | void;\n\n  const executed = onExecuted(() => {\n    const gp = ownersPool.owner();\n    baseDestructor = base((v) => {\n      gp(v);\n      lastValue = v;\n    });\n  });\n\n  const i = (g: OwnerType<T>) => {\n    executed();\n    let od: DestructorType | void;\n    if (isFilled(lastValue) && !ownersPool.has(g)) {\n      od = g(lastValue);\n    }\n    ownersPool.add(g);\n    return () => {\n      ownersPool.remove(g);\n      od?.();\n    };\n  };\n\n  return [\n    i,\n    () => {\n      ownersPool.destroy();\n      baseDestructor?.();\n    },\n    ownersPool,\n  ] as const;\n};\n\nexport const sharedStateless = <T>(base: InformationType<T>) => {\n  const ownersPool = new OwnerPool<T>();\n  let baseDestructor: DestructorType | void;\n\n  const executed = onExecuted((g: OwnerType<T>) => {\n    ownersPool.add(g);\n    baseDestructor = base(ownersPool.owner());\n  });\n\n  const i = (g: OwnerType<T>) => {\n    executed(g);\n    if (!ownersPool.has(g)) {\n      ownersPool.add(g);\n    }\n    return () => {\n      ownersPool.remove(g);\n    };\n  };\n\n  return [\n    i,\n    () => {\n      ownersPool.destroy();\n      baseDestructor?.();\n    },\n    ownersPool,\n  ] as const;\n};\n","import { InformationType } from \"../types\";\n\n/**\n * Component that receives a data array and yields values one by one\n * https://silentium-lab.github.io/silentium/#/en/information/stream\n */\nexport const stream = <T>(base: InformationType<T[]>): InformationType<T> => {\n  return (o) => {\n    base((v) => {\n      v.forEach((cv) => {\n        o(cv);\n      });\n    });\n  };\n};\n"],"names":["info"],"mappings":"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"}