{"version":3,"file":"silentium.cjs","sources":["../src/components/All.ts","../src/components/Any.ts","../src/components/Applied.ts","../src/components/Catch.ts","../src/components/Chain.ts","../src/components/ConstructorApplied.ts","../src/components/ConstructorArgs.ts","../src/components/ConstructorDestroyable.ts","../src/components/ExecutorApplied.ts","../src/components/Filtered.ts","../src/components/FromEvent.ts","../src/components/FromPromise.ts","../src/helpers/isFilled.ts","../src/helpers/OwnerPool.ts","../src/components/Late.ts","../src/components/Once.ts","../src/components/Shared.ts","../src/components/SharedSource.ts","../src/components/LateShared.ts","../src/base/Destructor.ts","../src/base/Local.ts","../src/base/Of.ts","../src/base/On.ts","../src/base/Void.ts","../src/base/DestroyContainer.ts","../src/components/Map.ts","../src/components/Primitive.ts","../src/components/Sequence.ts","../src/components/Stream.ts"],"sourcesContent":["import { EventType } from \"../types\";\n\ntype ExtractTypeS<T> = T extends EventType<infer U> ? U : never;\n\nexport type ExtractTypesFromArrayS<T extends EventType<any>[]> = {\n  [K in keyof T]: ExtractTypeS<T[K]>;\n};\n\nconst isAllFilled = (keysFilled: Set<string>, keysKnown: Set<string>) => {\n  return keysFilled.size > 0 && keysFilled.size === keysKnown.size;\n};\n\n/**\n * Combines multiple information sources into a single unified source\n * represented as an array containing values from all sources\n * https://silentium-lab.github.io/silentium/#/en/information/all\n */\nexport function All<const T extends EventType[]>(\n  ...theInfos: T\n): EventType<ExtractTypesFromArrayS<T>> {\n  const keysKnown = new Set<string>(Object.keys(theInfos));\n  const keysFilled = new Set<string>();\n\n  return function AllEvent(user) {\n    const result: Record<string, unknown> = {};\n\n    Object.entries(theInfos).forEach(([key, info]) => {\n      keysKnown.add(key);\n      info(function AllItemUser(v) {\n        keysFilled.add(key);\n        result[key] = v;\n        if (isAllFilled(keysFilled, keysKnown)) {\n          user(Object.values(result) as ExtractTypesFromArrayS<T>);\n        }\n      });\n    });\n  };\n}\n","import { EventType } from \"../types\";\n\n/**\n * From a set of information sources we get\n * a common response from any source for a single owner\n * https://silentium-lab.github.io/silentium/#/en/information/any\n */\nexport function Any<T>(...infos: EventType<T>[]): EventType<T> {\n  return function AnyEvent(user) {\n    infos.forEach((info) => {\n      info(user);\n    });\n  };\n}\n","import { EventType, ConstructorType } from \"../types\";\n\n/**\n * Information to which the function was applied to change the value\n * https://silentium-lab.github.io/silentium/#/en/information/applied\n */\nexport function Applied<T, R>(\n  baseEv: EventType<T>,\n  applier: ConstructorType<[T], R>,\n): EventType<R> {\n  return function AppliedEvent(user) {\n    baseEv(function AppliedBaseUser(v) {\n      user(applier(v));\n    });\n  };\n}\n","import { EventType, EventUserType } from \"src/types\";\n\n/**\n * Catches exception and passes\n * exception content to error user\n */\nexport function Catch<T>(\n  $base: EventType<T>,\n  error: EventUserType,\n  errorOriginal?: EventUserType,\n): EventType<T> {\n  return (user) => {\n    try {\n      $base(user);\n    } catch (e: any) {\n      if (e instanceof Error) {\n        error(e.message);\n      } else {\n        error(e);\n      }\n      if (errorOriginal) {\n        errorOriginal(e);\n      }\n    }\n  };\n}\n","import { EventTypeValue } from \"../types/EventType\";\nimport { EventType } from \"../types\";\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ntype Last<T extends any[]> = T extends [...infer _, infer L] ? L : never;\n\n/**\n * The set of information sources forms a sequential chain where each source provides\n * an answer. The final answer will be the output result. If any source in the chain\n * provides a new answer, the component's overall response will be repeated.\n * https://silentium-lab.github.io/silentium/#/en/information/applied\n */\nexport function Chain<T extends EventType[]>(...infos: T): Last<T> {\n  return <Last<T>>function ChainEvent(user) {\n    let lastValue: EventTypeValue<Last<T>> | undefined;\n\n    const handleI = (index: number) => {\n      const info = infos[index] as Last<T>;\n      const nextI = infos[index + 1] as Last<T> | undefined;\n\n      info(function ChainItemUser(v) {\n        if (!nextI) {\n          lastValue = v as EventTypeValue<Last<T>>;\n        }\n\n        if (lastValue) {\n          user(lastValue);\n        }\n\n        if (nextI && !lastValue) {\n          handleI(index + 1);\n        }\n      });\n    };\n\n    handleI(0);\n  };\n}\n","import { EventType, ConstructorType } from \"../types\";\n\n/**\n * Constructor with applied function to its results\n */\nexport function ConstructorApplied<T>(\n  baseConstructor: ConstructorType<any[], EventType>,\n  applier: (i: EventType) => EventType<T>,\n): ConstructorType<EventType[], EventType<T>> {\n  return function LazyAppliedData(...args) {\n    return applier(baseConstructor(...args));\n  };\n}\n","import { EventType, ConstructorType } from \"../types\";\n\nexport function ConstructorArgs(\n  baseConstructor: ConstructorType<any[], EventType>,\n  args: unknown[],\n  startFromArgIndex: number = 0,\n) {\n  return function ConstructorArgsEvent(...runArgs: any[]) {\n    return baseConstructor(...mergeAtIndex(runArgs, args, startFromArgIndex));\n  };\n}\n\nfunction mergeAtIndex(arr1: unknown[], arr2: unknown[], index: number) {\n  const result = arr1.slice(0, index);\n  while (result.length < index) result.push(undefined);\n  return result.concat(arr2);\n}\n","import {\n  ConstructorType,\n  DestroyableType,\n  DestructorType,\n  EventObjectType,\n  EventType,\n} from \"../types\";\n\n/**\n * Constructor what can be destroyed\n */\nexport function ConstructorDestroyable(\n  baseConstructor: ConstructorType<\n    any[],\n    (DestroyableType & EventObjectType) | EventType\n  >,\n): {\n  get: ConstructorType<any[], EventType>;\n  destroy: DestructorType;\n} {\n  const destructors: DestructorType[] = [];\n  return {\n    get: function ConstructorDestroyableGet(...args) {\n      const inst = baseConstructor(...args);\n      return (user) => {\n        if (\"destroy\" in inst) {\n          destructors.push(inst.destroy);\n          inst.event(user);\n        } else {\n          const d = inst(user);\n          if (d) {\n            destructors.push(d);\n          }\n        }\n\n        return () => {\n          destructors.forEach((i) => i());\n        };\n      };\n    },\n    destroy: function ConstructorDestructor() {\n      destructors.forEach((i) => i());\n    },\n  };\n}\n","import { EventType, EventUserType } from \"../types\";\n\n/**\n * Information to which a function is applied in order\n * to control the value passing process\n * https://silentium-lab.github.io/silentium/#/en/information/applied\n */\nexport function ExecutorApplied<T>(\n  baseEv: EventType<T>,\n  applier: (executor: EventUserType<T>) => EventUserType<T>,\n): EventType<T> {\n  return function ExecutorAppliedEvent(user) {\n    const ExecutorAppliedBaseUser = applier(user);\n    baseEv(ExecutorAppliedBaseUser);\n  };\n}\n","import { EventType, ConstructorType } from \"../types\";\n\n/**\n * Information whose value is being validated\n * via a predicate; if the predicate returns true, the value\n * can be passed to the output\n * https://silentium-lab.github.io/silentium/#/en/information/filtered\n */\nexport function Filtered<T>(\n  baseEv: EventType<T>,\n  predicate: ConstructorType<[T], boolean>,\n  defaultValue?: T,\n): EventType<T> {\n  return function FilteredEvent(user) {\n    baseEv(function FilteredBaseUser(v) {\n      if (predicate(v)) {\n        user(v);\n      } else if (defaultValue !== undefined) {\n        user(defaultValue);\n      }\n    });\n  };\n}\n","import { EventTypeDestroyable } from \"../types/EventType\";\nimport { EventType, EventUserType } from \"../types\";\nimport { All } from \"./All\";\n\n/**\n * A component that receives data from an event and\n * presents it as an information object\n * https://silentium-lab.github.io/silentium/#/en/information/from-event\n */\nexport function FromEvent<T>(\n  emitterEv: EventType<any>,\n  eventNameEv: EventType<string>,\n  subscribeMethodEv: EventType<string>,\n  unsubscribeMethodEv?: EventType<string>,\n): EventTypeDestroyable<T> {\n  let lastU: EventUserType<T> | null = null;\n  const handler = function FromEventHandler(v: T) {\n    if (lastU) {\n      lastU(v);\n    }\n  };\n  return function FromEventEvent(user) {\n    lastU = user;\n    const a = All(emitterEv, eventNameEv, subscribeMethodEv);\n    a(function FromEventAllUser([emitter, eventName, subscribe]) {\n      if (!emitter?.[subscribe]) {\n        return;\n      }\n      emitter[subscribe](eventName, handler);\n    });\n\n    return function FromEventDestructor() {\n      lastU = null;\n      if (!unsubscribeMethodEv) {\n        return;\n      }\n      const a = All(emitterEv, eventNameEv, unsubscribeMethodEv);\n      a(([emitter, eventName, unsubscribe]) => {\n        emitter?.[unsubscribe]?.(eventName, handler);\n      });\n    };\n  };\n}\n","import { EventType, EventUserType } from \"../types\";\n\n/**\n * Component that gets a value from a promise and\n * presents it as information\n * https://silentium-lab.github.io/silentium/#/en/information/from-promise\n */\nexport function FromPromise<T>(\n  p: Promise<T>,\n  errorOwner?: EventUserType,\n): EventType<T> {\n  return function FromPromiseEvent(user) {\n    p.then(function FromPromiseThen(v) {\n      user(v);\n    }).catch(function FromPromiseCatch(e) {\n      errorOwner?.(e);\n    });\n  };\n}\n","export const isFilled = <T>(\n  value?: T,\n): value is Exclude<T, null | undefined> => {\n  return value !== undefined && value !== null;\n};\n","import { EventUserType } from \"../types\";\n\n/**\n * Helps maintain an owner list allowing different\n * owners to get information from a common source\n * https://silentium-lab.github.io/silentium/#/en/utils/owner-pool\n */\nexport class OwnerPool<T> {\n  private owners: Set<EventUserType<T>>;\n  private innerOwner: EventUserType<T>;\n\n  public constructor() {\n    this.owners = new Set<EventUserType<T>>();\n    this.innerOwner = (v) => {\n      this.owners.forEach((g) => {\n        g(v);\n      });\n    };\n  }\n\n  public owner() {\n    return this.innerOwner;\n  }\n\n  public size(): number {\n    return this.owners.size;\n  }\n\n  public has(owner: EventUserType<T>): boolean {\n    return this.owners.has(owner);\n  }\n\n  public add(owner: EventUserType<T>) {\n    this.owners.add(owner);\n    return this;\n  }\n\n  public remove(g: EventUserType<T>) {\n    this.owners.delete(g);\n    return this;\n  }\n\n  public destroy() {\n    this.owners.forEach((g) => {\n      this.remove(g);\n    });\n    return this;\n  }\n}\n","import { EventUserType, SourceType } from \"../types\";\nimport { isFilled } from \"../helpers\";\n\n/**\n * A component that allows creating linked objects of information and its owner\n * in such a way that if a new value is assigned to the owner, this value\n * will become the value of the linked information source\n * https://silentium-lab.github.io/silentium/#/en/information/of\n */\nexport function Late<T>(v?: T): SourceType<T> {\n  let lateUser: EventUserType<T> | null = null;\n  const notify = (v?: T) => {\n    if (isFilled(v) && lateUser) {\n      lateUser(v);\n    }\n  };\n\n  return {\n    event: function LateEvent(user) {\n      if (lateUser) {\n        throw new Error(\n          \"Late component gets new user, when another was already connected!\",\n        );\n      }\n\n      lateUser = user;\n      notify(v);\n    },\n    use: function LateUser(v) {\n      notify(v);\n    },\n  };\n}\n","import { EventType } from \"../types\";\n\n/**\n * Limits the number of values from the information source\n * to a single value - once the first value is emitted, no more\n * values are delivered from the source\n * https://silentium-lab.github.io/silentium/#/en/information/once\n */\nexport function Once<T>(baseEv: EventType<T>): EventType<T> {\n  return function OnceEvent(user) {\n    let isFilled = false;\n    baseEv(function OnceBaseUser(v) {\n      if (!isFilled) {\n        isFilled = true;\n        user(v);\n      }\n    });\n  };\n}\n","import { EventType, DestroyableType, SourceType } from \"../types\";\nimport { isFilled, OwnerPool } from \"../helpers\";\nimport { Late } from \"../components/Late\";\nimport { Once } from \"../components/Once\";\n\n/**\n * An information object that helps multiple owners access\n * a single another information object\n * https://silentium-lab.github.io/silentium/#/en/information/pool\n */\nexport function Shared<T>(\n  baseEv: EventType<T>,\n  stateless = false,\n): SourceType<T> & {\n  pool: () => OwnerPool<T>;\n  touched: () => void;\n} & DestroyableType {\n  const ownersPool = new OwnerPool<T>();\n  let lastValue: T | undefined;\n\n  const calls = Late();\n  Once(calls.event)(function SharedCallsUser() {\n    baseEv(function SharedBaseUser(v) {\n      lastValue = v;\n      ownersPool.owner()(v);\n    });\n  });\n\n  return {\n    event: function SharedEvent(user) {\n      calls.use(1);\n      if (!stateless && isFilled(lastValue) && !ownersPool.has(user)) {\n        user(lastValue);\n      }\n      ownersPool.add(user);\n      return () => {\n        ownersPool.remove(user);\n      };\n    },\n    use: function SharedUser(value: T) {\n      calls.use(1);\n      lastValue = value;\n      ownersPool.owner()(value);\n    },\n    touched() {\n      calls.use(1);\n    },\n    pool() {\n      return ownersPool;\n    },\n    destroy() {\n      ownersPool.destroy();\n    },\n  };\n}\n","import { SourceType } from \"../types\";\nimport { Shared } from \"../components/Shared\";\n\nexport function SharedSource<T>(\n  baseEv: SourceType<T>,\n  stateless = false,\n): SourceType<T> {\n  const sharedEv = Shared(baseEv.event, stateless);\n\n  return {\n    event: function SharedSourceEvent(user) {\n      sharedEv.event(user);\n    },\n    use: function SharedSourceUser(v) {\n      sharedEv.touched();\n      baseEv.use(v);\n    },\n  };\n}\n","import { Late } from \"../components/Late\";\nimport { SharedSource } from \"../components/SharedSource\";\nimport { SourceType } from \"../types\";\n\nexport function LateShared<T>(value?: T): SourceType<T> {\n  return SharedSource(Late(value));\n}\n","import { DestructorType, EventType, EventUserType } from \"../types\";\n\nexport function Destructor<T>(\n  baseEv: EventType<T>,\n  destructorUser?: EventUserType<DestructorType>,\n) {\n  let mbDestructor: DestructorType | void;\n  let theUser: WeakRef<EventUserType<T>> | null = null;\n  const destroy = () => {\n    theUser = null;\n    mbDestructor?.();\n  };\n  return {\n    event: function DestructorEvent(user) {\n      theUser = new WeakRef(user);\n      mbDestructor = baseEv((v) => {\n        if (theUser) {\n          theUser.deref()?.(v);\n        }\n      });\n      if (mbDestructor && destructorUser) {\n        destructorUser(destroy);\n      }\n      return destroy;\n    } as EventType<T>,\n    destroy,\n  };\n}\n","import { EventType } from \"../types\";\n\n/**\n * Create local copy of source what can be destroyed\n */\nexport function Local<T>(baseEv: EventType<T>): EventType<T> {\n  return function LocalEvent(user) {\n    let destroyed = false;\n    const d = baseEv(function LocalBaseUser(v) {\n      if (!destroyed) {\n        user(v);\n      }\n    });\n    return () => {\n      destroyed = true;\n      d?.();\n    };\n  };\n}\n","import { EventType } from \"../types\";\n\nexport function Of<T>(value: T): EventType<T> {\n  return function OfEvent(user) {\n    return user(value);\n  };\n}\n","import { EventType, EventUserType } from \"../types\";\n\n/**\n * Run data with user\n */\nexport function On<T>(event: EventType<T>, user: EventUserType<T>) {\n  return event(user);\n}\n","import { EventUserType } from \"../types\";\n\n/**\n * Silent user\n */\nexport function Void(): EventUserType {\n  return function VoidEvent() {};\n}\n","import { Destructor } from \"../base/Destructor\";\nimport { DestructorType, EventType } from \"../types\";\n\nexport function DestroyContainer() {\n  const destructors: DestructorType[] = [];\n  return {\n    add(e: EventType) {\n      const d = Destructor(e);\n      destructors.push(d.destroy);\n      return d.event;\n    },\n    destroy() {\n      destructors.forEach((d) => d());\n    },\n  };\n}\n","import { EventType, ConstructorType } from \"../types\";\nimport { Of } from \"../base\";\nimport { All } from \"./All\";\n\n/**\n * Component that applies an info object constructor to each data item,\n * producing an information source with new values\n * https://silentium-lab.github.io/silentium/#/en/information/map\n */\nexport function Map<T, TG>(\n  baseEv: EventType<T[]>,\n  targetEv: ConstructorType<any[], EventType<TG>>,\n): EventType<TG[]> {\n  return function MapData(user) {\n    baseEv(function MapBaseUser(v) {\n      const infos: EventType<TG>[] = [];\n      v.forEach((val) => {\n        let valInfo: EventType<T> | T = val;\n        if (typeof valInfo !== \"function\") {\n          valInfo = Of(valInfo);\n        }\n        const info = targetEv(valInfo);\n        infos.push(info);\n      });\n      const allI = All(...infos);\n      allI(user);\n    });\n  };\n}\n","import { EventType } from \"../types\";\n\nexport function Primitive<T>(baseEv: EventType<T>, theValue: T | null = null) {\n  baseEv(function PrimitiveBaseUser(v) {\n    theValue = v;\n  });\n\n  return {\n    [Symbol.toPrimitive]() {\n      return theValue;\n    },\n    primitive() {\n      return theValue;\n    },\n    primitiveWithException() {\n      if (theValue === null) {\n        throw new Error(\"Primitive value is null\");\n      }\n      return theValue;\n    },\n  };\n}\n","import { EventType } from \"../types\";\n\n/**\n * A component that takes one value at a time and returns\n * an array of all previous values\n * https://silentium-lab.github.io/silentium/#/en/information/sequence\n */\nexport function Sequence<T>(baseEv: EventType<T>): EventType<T[]> {\n  return function SequenceEvent(user) {\n    const result: T[] = [];\n    baseEv(function SequenceBaseUser(v) {\n      result.push(v);\n      user(result);\n    });\n  };\n}\n","import { EventType } from \"../types\";\n\n/**\n * Component that receives a data array and yields values one by one\n * https://silentium-lab.github.io/silentium/#/en/information/stream\n */\nexport function Stream<T>(baseEv: EventType<T[]>): EventType<T> {\n  return function StreamEvent(user) {\n    baseEv(function StreamBaseUser(v) {\n      v.forEach((cv) => {\n        user(cv);\n      });\n    });\n  };\n}\n"],"names":["a","v"],"mappings":"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"}