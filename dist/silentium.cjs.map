{"version":3,"file":"silentium.cjs","sources":["../src/helpers/guards.ts","../src/helpers/ensures.ts","../src/base/DestroyContainer.ts","../src/base/Event.ts","../src/base/Local.ts","../src/base/Of.ts","../src/base/Void.ts","../src/helpers/OwnerPool.ts","../src/base/User.ts","../src/components/All.ts","../src/components/Any.ts","../src/components/Applied.ts","../src/components/Catch.ts","../src/components/Chain.ts","../src/components/ExecutorApplied.ts","../src/components/Filtered.ts","../src/components/FromEvent.ts","../src/components/FromPromise.ts","../src/components/Late.ts","../src/components/Once.ts","../src/components/Shared.ts","../src/components/SharedSource.ts","../src/components/LateShared.ts","../src/components/Map.ts","../src/components/Primitive.ts","../src/components/Sequence.ts","../src/components/Stream.ts","../src/components/Transport.ts","../src/components/TransportApplied.ts","../src/components/TransportArgs.ts","../src/components/TransportDestroyable.ts"],"sourcesContent":["import {\n  DestroyableType,\n  EventType,\n  EventUserType,\n  TransportType,\n} from \"../types\";\n\nexport const isFilled = <T>(\n  value?: T,\n): value is Exclude<T, null | undefined> => {\n  return value !== undefined && value !== null;\n};\n\nexport function isEvent<T>(o: T): o is T & EventType {\n  return (\n    o !== null &&\n    typeof o === \"object\" &&\n    \"event\" in o &&\n    typeof (o as any).event === \"function\"\n  );\n}\n\nexport function isDestroyable<T>(o: T): o is T & DestroyableType {\n  return (\n    o !== null &&\n    typeof o === \"object\" &&\n    \"destroy\" in o &&\n    typeof (o as any).destroy === \"function\"\n  );\n}\n\nexport function isUser<T>(o: T): o is T & EventUserType {\n  return (\n    o !== null &&\n    typeof o === \"object\" &&\n    \"use\" in o &&\n    typeof (o as any).use === \"function\"\n  );\n}\n\nexport function isTransport<T>(o: T): o is T & TransportType {\n  return (\n    o !== null &&\n    typeof o === \"object\" &&\n    \"of\" in o &&\n    typeof (o as any).of === \"function\"\n  );\n}\n","import { isEvent, isUser } from \"../helpers/guards\";\n\nexport function ensureFunction(v: unknown, label: string) {\n  if (typeof v !== \"function\") {\n    throw new Error(`${label}: is not function`);\n  }\n}\n\nexport function ensureEvent(v: unknown, label: string) {\n  if (!isEvent(v)) {\n    throw new Error(`${label}: is not event`);\n  }\n}\n\nexport function ensureUser(v: unknown, label: string) {\n  if (!isUser(v)) {\n    throw new Error(`${label}: is not user`);\n  }\n}\n","import { DestroyableType } from \"../types\";\n\nexport class DestroyContainer implements DestroyableType {\n  private destructors: DestroyableType[] = [];\n\n  public add(e: DestroyableType) {\n    this.destructors.push(e);\n    return this;\n  }\n\n  public destroy() {\n    this.destructors.forEach((d) => d.destroy());\n    return this;\n  }\n}\n","import { ensureFunction } from \"../helpers\";\nimport { DestroyableType, EventType, EventUserType } from \"../types\";\n\ntype EventExecutor<T> = (user: EventUserType<T>) => void | (() => void);\n\nexport class Event<T> implements EventType<T>, DestroyableType {\n  private mbDestructor: unknown;\n\n  public constructor(private eventExecutor: EventExecutor<T>) {\n    ensureFunction(eventExecutor, \"Event: eventExecutor\");\n  }\n\n  public event(user: EventUserType<T>) {\n    this.mbDestructor = this.eventExecutor(user);\n    return this;\n  }\n\n  public destroy() {\n    if (typeof this.mbDestructor === \"function\") {\n      this.mbDestructor?.();\n    }\n    return this;\n  }\n}\n","import { ensureEvent } from \"../helpers\";\nimport { ParentUser } from \"../base/User\";\nimport { DestroyableType, EventType, EventUserType } from \"../types\";\n\n/**\n * Create local copy of source what can be destroyed\n */\nexport class Local<T> implements EventType<T>, DestroyableType {\n  private destroyed = false;\n\n  public constructor(private $base: EventType<T>) {\n    ensureEvent($base, \"Local: $base\");\n  }\n\n  public event(user: EventUserType<T>): this {\n    this.$base.event(this.user.child(user));\n    return this;\n  }\n\n  private user = new ParentUser((v: T, child: EventUserType<T>) => {\n    if (!this.destroyed) {\n      child.use(v);\n    }\n  });\n\n  public destroy(): this {\n    return this;\n  }\n}\n","import { EventType, EventUserType } from \"../types\";\n\nexport class Of<T> implements EventType<T> {\n  public constructor(private value: T) {}\n\n  public event(user: EventUserType<T>): this {\n    user.use(this.value);\n    return this;\n  }\n}\n","import { EventUserType } from \"../types\";\n\n/**\n * Silent user\n */\nexport class Void implements EventUserType {\n  public use(): this {\n    return this;\n  }\n}\n","import { User } from \"../base\";\nimport { EventUserType } from \"../types\";\n\n/**\n * Helps maintain an owner list allowing different\n * owners to get information from a common source\n * https://silentium-lab.github.io/silentium/#/en/utils/owner-pool\n */\nexport class OwnerPool<T> {\n  private owners: Set<EventUserType<T>>;\n  private innerOwner: EventUserType<T>;\n\n  public constructor() {\n    this.owners = new Set<EventUserType<T>>();\n    this.innerOwner = new User((v) => {\n      this.owners.forEach((g) => {\n        g.use(v);\n      });\n    });\n  }\n\n  public owner() {\n    return this.innerOwner;\n  }\n\n  public size(): number {\n    return this.owners.size;\n  }\n\n  public has(owner: EventUserType<T>): boolean {\n    return this.owners.has(owner);\n  }\n\n  public add(owner: EventUserType<T>) {\n    this.owners.add(owner);\n    return this;\n  }\n\n  public remove(g: EventUserType<T>) {\n    this.owners.delete(g);\n    return this;\n  }\n\n  public destroy() {\n    this.owners.forEach((g) => {\n      this.remove(g);\n    });\n    return this;\n  }\n}\n","import { ensureFunction } from \"../helpers\";\nimport { EventUserType } from \"../types\";\n\nexport class User<T> implements EventUserType<T> {\n  public constructor(private userExecutor: (v: T) => void) {\n    ensureFunction(userExecutor, \"User: user executor\");\n  }\n\n  public use(value: T) {\n    this.userExecutor(value);\n    return this;\n  }\n}\n\nexport class ParentUser<T> implements EventUserType<T> {\n  public constructor(\n    private userExecutor: (v: T, user: EventUserType, ...args: any[]) => void,\n    private args: any[] = [],\n    private childUser?: EventUserType<T>,\n  ) {\n    ensureFunction(userExecutor, \"ParentUser: executor\");\n  }\n\n  public use(value: T): this {\n    if (this.childUser === undefined) {\n      throw new Error(\"no base user\");\n    }\n    this.userExecutor(value, this.childUser, ...this.args);\n    return this;\n  }\n\n  public child(user: EventUserType, ...args: any[]) {\n    return new ParentUser(this.userExecutor, [...this.args, ...args], user);\n  }\n}\n","import { ParentUser } from \"../base/User\";\nimport { ensureEvent } from \"../helpers\";\nimport { EventType, EventUserType } from \"../types\";\n\ntype ExtractTypeS<T> = T extends EventType<infer U> ? U : never;\n\nexport type ExtractTypesFromArrayS<T extends EventType<any>[]> = {\n  [K in keyof T]: ExtractTypeS<T[K]>;\n};\n\nconst isAllFilled = (keysFilled: Set<string>, keysKnown: Set<string>) => {\n  return keysFilled.size > 0 && keysFilled.size === keysKnown.size;\n};\n\nexport class All<const T extends EventType[]>\n  implements EventType<ExtractTypesFromArrayS<T>>\n{\n  private keysKnown: Set<string>;\n  private keysFilled = new Set<string>();\n  private $events: T;\n  private result: Record<string, unknown> = {};\n\n  public constructor(...events: T) {\n    this.keysKnown = new Set<string>(Object.keys(events));\n    this.$events = events;\n  }\n\n  public event(user: EventUserType<ExtractTypesFromArrayS<T>>): this {\n    Object.entries(this.$events).forEach(([key, event]) => {\n      ensureEvent(event, \"All: item\");\n      this.keysKnown.add(key);\n      event.event(this.user.child(user, key));\n    });\n    return this;\n  }\n\n  private user = new ParentUser((v: T, child: EventUserType, key: string) => {\n    this.keysFilled.add(key);\n    this.result[key] = v;\n    if (isAllFilled(this.keysFilled, this.keysKnown)) {\n      child.use(Object.values(this.result) as ExtractTypesFromArrayS<T>);\n    }\n  });\n}\n","import { ensureEvent } from \"../helpers\";\nimport { EventType, EventUserType } from \"../types\";\n\nexport class Any<T> implements EventType<T> {\n  private $events: EventType[];\n\n  public constructor(...events: EventType<T>[]) {\n    this.$events = events;\n  }\n\n  public event(user: EventUserType<T>): this {\n    this.$events.forEach((event) => {\n      ensureEvent(event, \"Any: item\");\n      event.event(user);\n    });\n    return this;\n  }\n}\n","import { ensureEvent } from \"../helpers\";\nimport { ParentUser } from \"../base/User\";\nimport { ConstructorType, EventType, EventUserType } from \"../types\";\n\nexport class Applied<T, R> implements EventType<R> {\n  public constructor(\n    private $base: EventType<T>,\n    private applier: ConstructorType<[T], R>,\n  ) {\n    ensureEvent($base, \"Applied: base\");\n  }\n\n  public event(user: EventUserType<R>) {\n    this.$base.event(this.user.child(user));\n    return this;\n  }\n\n  private user = new ParentUser((v: T, child) => {\n    child.use(this.applier(v));\n  });\n}\n","import { ensureEvent, ensureUser } from \"../helpers\";\nimport { EventType, EventUserType } from \"../types\";\n\nexport class Catch<T> implements EventType<T> {\n  public constructor(\n    private $base: EventType<T>,\n    private errorMessage: EventUserType,\n    private errorOriginal?: EventUserType,\n  ) {\n    ensureEvent($base, \"Catch: base\");\n    ensureUser(errorMessage, \"Catch: errorMessage\");\n    if (errorOriginal !== undefined) {\n      ensureUser(errorOriginal, \"Catch: errorOriginal\");\n    }\n  }\n\n  public event(user: EventUserType<T>) {\n    try {\n      this.$base.event(user);\n    } catch (e: any) {\n      if (e instanceof Error) {\n        this.errorMessage.use(e.message);\n      } else {\n        this.errorMessage.use(e);\n      }\n      if (this.errorOriginal) {\n        this.errorOriginal.use(e);\n      }\n    }\n    return this;\n  }\n}\n","import { EventTypeValue } from \"../types/EventType\";\nimport { EventType, EventUserType } from \"../types\";\nimport { ParentUser } from \"../base/User\";\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ntype Last<T extends any[]> = T extends [...infer _, infer L] ? L : never;\n\nexport class Chain<T extends EventType[]>\n  implements EventType<EventTypeValue<Last<T>>>\n{\n  private $events: T;\n  private lastValue: EventTypeValue<Last<T>> | undefined;\n\n  public constructor(...events: T) {\n    this.$events = events;\n  }\n\n  public event(user: EventUserType<EventTypeValue<Last<T>>>) {\n    this.handleEvent(0, user);\n    return this;\n  }\n\n  private handleEvent = (index: number, user: EventUserType) => {\n    const event = this.$events[index] as Last<T>;\n    const nextI = this.$events[index + 1] as Last<T> | undefined;\n    event.event(this.oneEventUser.child(user, nextI, index));\n  };\n\n  private oneEventUser = new ParentUser(\n    (\n      v: EventTypeValue<Last<T>>,\n      child,\n      nextI: Last<T> | undefined,\n      index: number,\n    ) => {\n      if (!nextI) {\n        this.lastValue = v as EventTypeValue<Last<T>>;\n      }\n\n      if (this.lastValue) {\n        child.use(this.lastValue);\n      }\n\n      if (nextI && !this.lastValue) {\n        this.handleEvent(index + 1, child);\n      }\n    },\n  );\n}\n","import { ensureEvent } from \"../helpers\";\nimport { EventType, EventUserType } from \"../types\";\n\nexport class ExecutorApplied<T> implements EventType<T> {\n  public constructor(\n    private $base: EventType<T>,\n    private applier: (executor: EventUserType<T>) => EventUserType<T>,\n  ) {\n    ensureEvent($base, \"ExecutorApplied: base\");\n  }\n\n  public event(user: EventUserType<T>) {\n    const ExecutorAppliedBaseUser = this.applier(user);\n    this.$base.event(ExecutorAppliedBaseUser);\n    return this;\n  }\n}\n","import { ParentUser } from \"../base/User\";\nimport { EventType, ConstructorType, EventUserType } from \"../types\";\n\nexport class Filtered<T> implements EventType<T> {\n  public constructor(\n    private $base: EventType<T>,\n    private predicate: ConstructorType<[T], boolean>,\n    private defaultValue?: T,\n  ) {}\n\n  public event(user: EventUserType<T>) {\n    this.$base.event(this.parent.child(user));\n    return this;\n  }\n\n  private parent = new ParentUser<T>((v, child) => {\n    if (this.predicate(v)) {\n      child.use(v);\n    } else if (this.defaultValue !== undefined) {\n      child.use(this.defaultValue);\n    }\n  });\n}\n","import { ParentUser, User } from \"../base/User\";\nimport { EventType, EventUserType } from \"../types\";\nimport { DestroyableType } from \"../types/EventType\";\nimport { All } from \"./All\";\n\nexport class FromEvent<T> implements EventType<T>, DestroyableType {\n  private lastUser: EventUserType<T> | null = null;\n  private handler = (v: T) => {\n    if (this.lastUser) {\n      this.lastUser.use(v);\n    }\n  };\n\n  public constructor(\n    private $emitter: EventType<any>,\n    private $eventName: EventType<string>,\n    private $subscribeMethod: EventType<string>,\n    private $unsubscribeMethod?: EventType<string>,\n  ) {}\n\n  public event(user: EventUserType<T>): this {\n    const a = new All(this.$emitter, this.$eventName, this.$subscribeMethod);\n    a.event(this.parent.child(user));\n    return this;\n  }\n\n  private parent = new ParentUser<[any, string, string]>(\n    ([emitter, eventName, subscribe], parent) => {\n      this.lastUser = parent;\n      if (!emitter?.[subscribe]) {\n        return;\n      }\n      emitter[subscribe](eventName, this.handler);\n    },\n  );\n\n  public destroy(): this {\n    this.lastUser = null;\n    if (!this.$unsubscribeMethod) {\n      return this;\n    }\n    const a = new All(this.$emitter, this.$eventName, this.$unsubscribeMethod);\n    a.event(\n      new User(([emitter, eventName, unsubscribe]) => {\n        emitter?.[unsubscribe]?.(eventName, this.handler);\n      }),\n    );\n    return this;\n  }\n}\n","import { EventType, EventUserType } from \"../types\";\n\nexport class FromPromise<T> implements EventType<T> {\n  public constructor(\n    private p: Promise<T>,\n    private errorOwner?: EventUserType,\n  ) {}\n\n  public event(user: EventUserType<T>): this {\n    this.p\n      .then(function FromPromiseThen(v) {\n        user.use(v);\n      })\n      .catch((e) => {\n        this.errorOwner?.use(e);\n      });\n    return this;\n  }\n}\n","import { isFilled } from \"../helpers\";\nimport { EventUserType, SourceType } from \"../types\";\n\n/**\n * A component that allows creating linked objects of information and its owner\n * in such a way that if a new value is assigned to the owner, this value\n * will become the value of the linked information source\n * https://silentium-lab.github.io/silentium/#/en/information/of\n */\nexport class Late<T> implements SourceType<T> {\n  private lateUser: EventUserType<T> | null = null;\n  private notify = (v?: T) => {\n    if (isFilled(v) && this.lateUser) {\n      this.lateUser.use(v);\n    }\n  };\n\n  public constructor(private v?: T) {}\n\n  public event(user: EventUserType<T>): this {\n    if (this.lateUser) {\n      throw new Error(\n        \"Late component gets new user, when another was already connected!\",\n      );\n    }\n    this.lateUser = user;\n    this.notify(this.v);\n    return this;\n  }\n\n  public use(value: T): this {\n    this.notify(value);\n    return this;\n  }\n}\n","import { ParentUser } from \"../base\";\nimport { EventType, EventUserType } from \"../types\";\n\n/**\n * Limits the number of values from the information source\n * to a single value - once the first value is emitted, no more\n * values are delivered from the source\n * https://silentium-lab.github.io/silentium/#/en/information/once\n */\nexport class Once<T> implements EventType<T> {\n  private isFilled = false;\n\n  public constructor(private $base: EventType<T>) {}\n\n  public event(user: EventUserType<T>): this {\n    this.$base.event(this.parent.child(user));\n    return this;\n  }\n\n  private parent = new ParentUser<T>((v, child) => {\n    if (!this.isFilled) {\n      this.isFilled = true;\n      child.use(v);\n    }\n  });\n}\n","import { User } from \"../base\";\nimport { Late } from \"../components/Late\";\nimport { Once } from \"../components/Once\";\nimport { isFilled, OwnerPool } from \"../helpers\";\nimport { EventType, EventUserType, SourceType } from \"../types\";\n\n/**\n * An information object that helps multiple owners access\n * a single another information object\n * https://silentium-lab.github.io/silentium/#/en/information/pool\n */\nexport class Shared<T> implements SourceType<T> {\n  private ownersPool = new OwnerPool<T>();\n  private lastValue: T | undefined;\n  private calls = new Late();\n  private firstCall = new Once(this.calls).event(\n    new User(() => {\n      this.$base.event(this.firstCallUser);\n    }),\n  );\n\n  public constructor(\n    private $base: EventType<T>,\n    private stateless = false,\n  ) {}\n\n  public event(user: EventUserType<T>) {\n    this.calls.use(1);\n    if (\n      !this.stateless &&\n      isFilled(this.lastValue) &&\n      !this.ownersPool.has(user)\n    ) {\n      user.use(this.lastValue);\n    }\n    this.ownersPool.add(user);\n    return this;\n  }\n\n  public use(value: T) {\n    this.calls.use(1);\n    this.lastValue = value;\n    this.ownersPool.owner().use(value);\n    return this;\n  }\n\n  private firstCallUser = new User<T>((v: T) => {\n    this.lastValue = v;\n    this.ownersPool.owner().use(v);\n  });\n\n  public touched() {\n    this.calls.use(1);\n  }\n\n  public pool() {\n    return this.ownersPool;\n  }\n\n  public destroy() {\n    return this.ownersPool.destroy();\n  }\n}\n","import { Shared } from \"../components/Shared\";\nimport { EventUserType, SourceType } from \"../types\";\n\nexport class SharedSource<T> implements SourceType<T> {\n  private $sharedBase: Shared<T>;\n\n  public constructor(\n    private $base: SourceType<T>,\n    stateless = false,\n  ) {\n    this.$sharedBase = new Shared(this.$base, stateless);\n  }\n\n  public event(user: EventUserType<T>) {\n    this.$sharedBase.event(user);\n    return this;\n  }\n\n  public use(value: T) {\n    this.$sharedBase.touched();\n    this.$base.use(value);\n    return this;\n  }\n}\n","import { Late } from \"../components/Late\";\nimport { SharedSource } from \"../components/SharedSource\";\nimport { EventUserType, SourceType } from \"../types\";\n\nexport class LateShared<T> implements SourceType<T> {\n  private $event: SharedSource<T>;\n\n  public constructor(value?: T) {\n    this.$event = new SharedSource(new Late(value));\n  }\n\n  public event(user: EventUserType<T>) {\n    this.$event.event(user);\n    return this;\n  }\n\n  public use(value: T) {\n    this.$event.use(value);\n    return this;\n  }\n}\n","import { isEvent } from \"src/helpers\";\nimport { Of, ParentUser } from \"../base\";\nimport { EventType, EventUserType, TransportType } from \"../types\";\nimport { All } from \"./All\";\n\n/**\n * Component that applies an info object constructor to each data item,\n * producing an information source with new values\n * https://silentium-lab.github.io/silentium/#/en/information/map\n */\nexport class Map<T, TG> implements EventType<TG[]> {\n  public constructor(\n    private $base: EventType<T[]>,\n    private $target: TransportType<any[], TG>,\n  ) {}\n\n  public event(user: EventUserType<TG[]>): this {\n    this.$base.event(this.parent.child(user));\n    return this;\n  }\n\n  private parent = new ParentUser<T[]>((v, child) => {\n    const infos: EventType<TG>[] = [];\n    v.forEach((val) => {\n      let valInfo: EventType<T> | T = val;\n      if (!isEvent(valInfo as object)) {\n        valInfo = new Of(valInfo);\n      }\n      const info = this.$target.of(valInfo);\n      infos.push(info);\n    });\n    const allI = new All(...infos);\n    allI.event(child);\n  });\n}\n","import { User } from \"../base\";\nimport { EventType } from \"../types\";\n\nexport class Primitive<T> {\n  private touched = false;\n\n  public constructor(\n    private $base: EventType<T>,\n    private theValue: T | null = null,\n  ) {}\n\n  private ensureTouched() {\n    if (!this.touched) {\n      this.$base.event(\n        new User((v) => {\n          this.theValue = v;\n        }),\n      );\n    }\n    this.touched = true;\n  }\n\n  public [Symbol.toPrimitive]() {\n    this.ensureTouched();\n    return this.theValue;\n  }\n\n  public primitive() {\n    this.ensureTouched();\n    return this.theValue;\n  }\n\n  public primitiveWithException() {\n    this.ensureTouched();\n    if (this.theValue === null) {\n      throw new Error(\"Primitive value is null\");\n    }\n    return this.theValue;\n  }\n}\n","import { ParentUser } from \"../base\";\nimport { EventType, EventUserType } from \"../types\";\n\n/**\n * A component that takes one value at a time and returns\n * an array of all previous values\n * https://silentium-lab.github.io/silentium/#/en/information/sequence\n */\nexport class Sequence<T> implements EventType<T[]> {\n  private result: T[] = [];\n\n  public constructor(private $base: EventType<T>) {}\n\n  public event(user: EventUserType<T[]>): this {\n    this.$base.event(this.parent.child(user));\n    return this;\n  }\n\n  private parent = new ParentUser<T>((v, child) => {\n    this.result.push(v);\n    child.use(this.result);\n  });\n}\n","import { ParentUser } from \"../base\";\nimport { EventType, EventUserType } from \"../types\";\n\n/**\n * Component that receives a data array and yields values one by one\n * https://silentium-lab.github.io/silentium/#/en/information/stream\n */\nexport class Stream<T> implements EventType<T> {\n  public constructor(private $base: EventType<T[]>) {}\n\n  public event(user: EventUserType<T>): this {\n    this.$base.event(this.parent.child(user));\n    return this;\n  }\n\n  private parent = new ParentUser<T[]>((v, child) => {\n    v.forEach((cv) => {\n      child.use(cv);\n    });\n  });\n}\n","import { ConstructorType, EventType, TransportType } from \"../types\";\n\nexport class Transport<T> implements TransportType<any[], T> {\n  public constructor(private executor: ConstructorType<any[], EventType<T>>) {}\n\n  public of(...args: any[]): EventType<T> {\n    return this.executor(...args);\n  }\n}\n","import { EventType, ConstructorType, TransportType } from \"../types\";\n\nexport class TransportApplied<T> implements TransportType {\n  public constructor(\n    private baseTransport: TransportType<any[], T>,\n    private applier: ConstructorType<[EventType], EventType<T>>,\n  ) {}\n\n  public of(...args: unknown[]): EventType<unknown> {\n    return this.applier(this.baseTransport.of(...args));\n  }\n}\n","import { EventType, TransportType } from \"../types\";\n\nexport class TransportArgs implements TransportType {\n  public constructor(\n    private baseTransport: TransportType<any[], EventType>,\n    private args: unknown[],\n    private startFromArgIndex: number = 0,\n  ) {}\n\n  public of(...runArgs: unknown[]): EventType<unknown> {\n    return this.baseTransport.of(\n      ...mergeAtIndex(runArgs, this.args, this.startFromArgIndex),\n    );\n  }\n}\n\nfunction mergeAtIndex(arr1: unknown[], arr2: unknown[], index: number) {\n  const result = arr1.slice(0, index);\n  while (result.length < index) result.push(undefined);\n  return result.concat(arr2);\n}\n","import { isDestroyable } from \"../helpers\";\nimport { DestroyableType, TransportType } from \"../types\";\n\n/**\n * Constructor what can be destroyed\n */\nexport class TransportDestroyable<T> implements TransportType, DestroyableType {\n  private destructors: DestroyableType[] = [];\n\n  public constructor(private baseTransport: TransportType<any[], T>) {}\n\n  public of(...args: unknown[]) {\n    const inst = this.baseTransport.of(...args);\n    if (isDestroyable(inst)) {\n      this.destructors.push(inst);\n    }\n    return inst;\n  }\n\n  public destroy(): this {\n    this.destructors.forEach((i) => i.destroy());\n    return this;\n  }\n}\n"],"names":["__publicField","isEvent"],"mappings":"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"}