{"version":3,"file":"silentium.cjs","sources":["../src/helpers/guards.ts","../src/helpers/ensures.ts","../src/base/Component.ts","../src/base/ComponentClass.ts","../src/base/DestroyContainer.ts","../src/base/Event.ts","../src/base/Local.ts","../src/base/Of.ts","../src/base/Void.ts","../src/helpers/OwnerPool.ts","../src/base/Transport.ts","../src/components/All.ts","../src/components/Any.ts","../src/components/Applied.ts","../src/components/Catch.ts","../src/components/Chain.ts","../src/components/ExecutorApplied.ts","../src/components/Filtered.ts","../src/components/FromEvent.ts","../src/components/FromPromise.ts","../src/components/Late.ts","../src/components/Once.ts","../src/components/Shared.ts","../src/components/SharedSource.ts","../src/components/LateShared.ts","../src/components/Map.ts","../src/components/Primitive.ts","../src/components/Sequence.ts","../src/components/Stream.ts","../src/components/TransportApplied.ts","../src/components/TransportArgs.ts","../src/components/TransportDestroyable.ts"],"sourcesContent":["import { DestroyableType, EventType, TransportType } from \"../types\";\n\nexport const isFilled = <T>(\n  value?: T,\n): value is Exclude<T, null | undefined> => {\n  return value !== undefined && value !== null;\n};\n\nexport function isEvent<T>(o: T): o is T & EventType {\n  return (\n    o !== null &&\n    typeof o === \"object\" &&\n    \"event\" in o &&\n    typeof (o as any).event === \"function\"\n  );\n}\n\nexport function isDestroyable<T>(o: T): o is T & DestroyableType {\n  return (\n    o !== null &&\n    typeof o === \"object\" &&\n    \"destroy\" in o &&\n    typeof (o as any).destroy === \"function\"\n  );\n}\n\nexport function isTransport<T>(o: T): o is T & TransportType {\n  return (\n    o !== null &&\n    typeof o === \"object\" &&\n    \"use\" in o &&\n    typeof (o as any).use === \"function\"\n  );\n}\n","import { isEvent, isTransport } from \"../helpers/guards\";\n\nexport function ensureFunction(v: unknown, label: string) {\n  if (typeof v !== \"function\") {\n    throw new Error(`${label}: is not function`);\n  }\n}\n\nexport function ensureEvent(v: unknown, label: string) {\n  if (!isEvent(v)) {\n    throw new Error(`${label}: is not event`);\n  }\n}\n\nexport function ensureTransport(v: unknown, label: string) {\n  if (!isTransport(v)) {\n    throw new Error(`${label}: is not transport`);\n  }\n}\n","import {\n  DestroyableType,\n  EventType,\n  EventTypeValue,\n  TransportType,\n} from \"../types\";\n\n/**\n * Create a function component that\n * will emit an event with specified arguments\n * and specified type\n */\nexport function Component<T, P extends Array<any>>(\n  executor: (\n    this: TransportType<P[0] extends EventType ? EventTypeValue<P[0]> : T>,\n    ...args: P\n  ) => void | (() => void),\n): (\n  ...args: P\n) => (P[0] extends EventType ? EventType<EventTypeValue<P[0]>> : EventType<T>) &\n  DestroyableType {\n  return (...args) => {\n    let destructor: void | (() => void);\n    return {\n      event(\n        transport: TransportType<\n          P[0] extends EventType ? EventTypeValue<P[0]> : T\n        >,\n      ) {\n        destructor = executor.call(transport, ...args);\n        return this;\n      },\n      destroy() {\n        if (destructor !== undefined) {\n          destructor();\n        }\n        return this;\n      },\n    } as any;\n  };\n}\n","import {\n  DestroyableType,\n  EventType,\n  EventTypeValue,\n  SourceType,\n} from \"../types\";\n\ntype ConstructableType = { new (...args: any[]): any };\n\n/**\n * Creates a type-safe factory function for instantiating components with proper interface inference\n * Automatically determines return types based on whether the class implements SourceType, EventType, and DestroyableType\n */\nexport function ComponentClass<T extends ConstructableType>(\n  classConstructor: T,\n): <R = null>(\n  ...args: ConstructorParameters<T>\n) => R extends null\n  ? ConstructorParameters<T>[0] extends EventType\n    ? InstanceType<T> extends SourceType\n      ? InstanceType<T> extends DestroyableType\n        ? SourceType<EventTypeValue<ConstructorParameters<T>[0]>> &\n            DestroyableType\n        : SourceType<EventTypeValue<ConstructorParameters<T>[0]>>\n      : InstanceType<T> extends DestroyableType\n        ? EventType<EventTypeValue<ConstructorParameters<T>[0]>> &\n            DestroyableType\n        : EventType<EventTypeValue<ConstructorParameters<T>[0]>>\n    : InstanceType<T>\n  : R extends EventType\n    ? R\n    : EventType<R> {\n  return (...args) => new classConstructor(...args);\n}\n","import { DestroyableType } from \"../types\";\n\n/**\n * An object that allows collecting all disposable objects and\n * disposing them later all together\n */\nexport function DestroyContainer() {\n  return new DestroyContainerImpl();\n}\n\nclass DestroyContainerImpl implements DestroyableType {\n  private destructors: DestroyableType[] = [];\n\n  public add<R extends DestroyableType>(e: R): R {\n    this.destructors.push(e);\n    return e;\n  }\n\n  public destroy() {\n    this.destructors.forEach((d) => d.destroy());\n    return this;\n  }\n}\n","import { ensureFunction } from \"../helpers\";\nimport { DestroyableType, EventType, TransportType } from \"../types\";\n\ntype EventExecutor<T> = (transport: TransportType<T>) => void | (() => void);\n\n/**\n * An event created from an executor function.\n * The executor function can return an event destruction function.\n */\nexport function Event<T>(eventExecutor: EventExecutor<T>) {\n  return new EventImpl<T>(eventExecutor);\n}\n\nclass EventImpl<T> implements EventType<T>, DestroyableType {\n  private mbDestructor: unknown;\n\n  public constructor(private eventExecutor: EventExecutor<T>) {\n    ensureFunction(eventExecutor, \"Event: eventExecutor\");\n  }\n\n  public event(transport: TransportType<T>) {\n    this.mbDestructor = this.eventExecutor(transport);\n    return this;\n  }\n\n  public destroy() {\n    if (typeof this.mbDestructor === \"function\") {\n      this.mbDestructor?.();\n    }\n    return this;\n  }\n}\n","import { ensureEvent } from \"../helpers\";\nimport { DestroyableType, EventType, TransportType } from \"../types\";\nimport { TransportParent } from \"./Transport\";\n\n/**\n * Create local copy of source what can be destroyed\n */\nexport function Local<T>($base: EventType<T>) {\n  return new LocalEvent<T>($base);\n}\n\nclass LocalEvent<T> implements EventType<T>, DestroyableType {\n  private destroyed = false;\n\n  public constructor(private $base: EventType<T>) {\n    ensureEvent($base, \"Local: $base\");\n  }\n\n  public event(transport: TransportType<T>): this {\n    this.$base.event(this.transport.child(transport));\n    return this;\n  }\n\n  private transport = TransportParent(function (v: T, child: LocalEvent<T>) {\n    if (!child.destroyed) {\n      this.use(v);\n    }\n  }, this);\n\n  public destroy(): this {\n    return this;\n  }\n}\n","import { EventType, TransportType } from \"../types\";\n\n/**\n * Helps convert a value into an event\n */\nexport function Of<T>(value: T) {\n  return new OfEvent<T>(value);\n}\n\nclass OfEvent<T> implements EventType<T> {\n  public constructor(private value: T) {}\n\n  public event(transport: TransportType<T>): this {\n    transport.use(this.value);\n    return this;\n  }\n}\n","import { TransportType } from \"../types\";\n\n/**\n * Transport that does nothing with the passed value,\n * needed for silent event triggering\n */\nexport function Void() {\n  return new VoidImpl();\n}\n\nclass VoidImpl implements TransportType {\n  public use(): this {\n    return this;\n  }\n}\n","import { Transport } from \"../base\";\nimport { TransportType } from \"../types\";\n\n/**\n * Helps maintain an owner list allowing different\n * owners to get information from a common source\n * https://silentium-lab.github.io/silentium/#/en/utils/owner-pool\n */\nexport class OwnerPool<T> {\n  private owners: Set<TransportType<T>>;\n  private innerOwner: TransportType<T>;\n\n  public constructor() {\n    this.owners = new Set<TransportType<T>>();\n    this.innerOwner = Transport((v) => {\n      this.owners.forEach((g) => {\n        g.use(v);\n      });\n    });\n  }\n\n  public owner() {\n    return this.innerOwner;\n  }\n\n  public size(): number {\n    return this.owners.size;\n  }\n\n  public has(owner: TransportType<T>): boolean {\n    return this.owners.has(owner);\n  }\n\n  public add(owner: TransportType<T>) {\n    this.owners.add(owner);\n    return this;\n  }\n\n  public remove(g: TransportType<T>) {\n    this.owners.delete(g);\n    return this;\n  }\n\n  public destroy() {\n    this.owners.forEach((g) => {\n      this.remove(g);\n    });\n    return this;\n  }\n}\n","import { ensureFunction } from \"../helpers\";\nimport { EventType, TransportType } from \"../types\";\n\n/**\n * Type of value transfer logic executor\n */\nexport type TransportExecutor<T> = (v: T) => void;\n\n/**\n * Base transport that accepts the passed value,\n * acts as a conductor to deliver the value from an event to somewhere\n */\nexport function Transport<T>(transportExecutor: TransportExecutor<T>) {\n  return new TransportImpl<T>(transportExecutor);\n}\n\nclass TransportImpl<T> implements TransportType<T> {\n  public constructor(private transportExecutor: TransportExecutor<T>) {\n    ensureFunction(transportExecutor, \"Transport: transport executor\");\n  }\n\n  public use(value: T) {\n    this.transportExecutor(value);\n    return this;\n  }\n}\n\n/**\n * Type of executor for value passing logic and event returning\n */\nexport type TransportEventExecutor<T, ET = T> = (v: T) => EventType<ET>;\n\n/**\n * A transport that delivers a value from one event\n * and returns another event based on the value\n */\nexport function TransportEvent<T, ET = any>(\n  transportExecutor: TransportEventExecutor<T, ET>,\n) {\n  return new TransportEventImpl<T, ET>(transportExecutor);\n}\n\nclass TransportEventImpl<T, ET = T> implements TransportType<T, EventType<ET>> {\n  public constructor(private executor: TransportEventExecutor<T, ET>) {\n    ensureFunction(executor, \"TransportEvent: transport executor\");\n  }\n\n  public use(value: T) {\n    return this.executor(value);\n  }\n}\n\n/**\n * A transport that accepts a child transport\n * to perform some transformation on the value\n * during its transmission\n */\nexport function TransportParent<T>(\n  executor: (this: TransportType, v: T, ...context: any[]) => void,\n  ...args: any[]\n) {\n  return new TransportParentImpl<T>(executor, args);\n}\n\nclass TransportParentImpl<T> implements TransportType<T> {\n  public constructor(\n    private executor: (this: TransportType, v: T, ...context: any[]) => void,\n    private args: any[] = [],\n    private _child?: TransportType<T>,\n  ) {\n    ensureFunction(executor, \"TransportParent: executor\");\n  }\n\n  public use(value: T): this {\n    if (this._child === undefined) {\n      throw new Error(\"no base transport\");\n    }\n    this.executor.call(this._child, value, ...this.args);\n    return this;\n  }\n\n  public child(transport: TransportType, ...args: any[]) {\n    return new TransportParentImpl(\n      this.executor,\n      [...this.args, ...args],\n      transport,\n    );\n  }\n}\n","import { TransportParent } from \"../base/Transport\";\nimport { ensureEvent } from \"../helpers\";\nimport { EventType, TransportType } from \"../types\";\n\ntype ExtractTypeS<T> = T extends EventType<infer U> ? U : never;\n\ntype ExtractTypesFromArrayS<T extends EventType<any>[]> = {\n  [K in keyof T]: ExtractTypeS<T[K]>;\n};\n\nconst isAllFilled = (keysFilled: Set<string>, keysKnown: Set<string>) => {\n  return keysFilled.size > 0 && keysFilled.size === keysKnown.size;\n};\n\n/**\n * An event that represents values from\n * all provided events as an array.\n * When all events emit their values,\n * the combined value will be returned.\n * If at least one event later emits a new\n * value, the updated array with the new value\n * will be emitted by All.\n */\nexport function All<const T extends EventType[]>(...events: T) {\n  return new AllEvent<T>(...events);\n}\n\nclass AllEvent<const T extends EventType[]>\n  implements EventType<ExtractTypesFromArrayS<T>>\n{\n  private known: Set<string>;\n  private filled = new Set<string>();\n  private $events: T;\n  private result: unknown[] = [];\n\n  public constructor(...events: T) {\n    this.known = new Set<string>(Object.keys(events));\n    this.$events = events;\n  }\n\n  public event(transport: TransportType<ExtractTypesFromArrayS<T>>): this {\n    Object.entries(this.$events).forEach(([key, event]) => {\n      ensureEvent(event, \"All: item\");\n      event.event(this.transport.child(transport, key));\n    });\n    if (this.known.size === 0) {\n      transport.use([] as ExtractTypesFromArrayS<T>);\n    }\n    return this;\n  }\n\n  private transport = TransportParent(function (\n    v: unknown,\n    child: AllEvent<T>,\n    key: string,\n  ) {\n    child.filled.add(key);\n    child.result[parseInt(key)] = v;\n    if (isAllFilled(child.filled, child.known)) {\n      this.use(child.result as ExtractTypesFromArrayS<T>);\n    }\n  }, this);\n}\n","import { ensureEvent } from \"../helpers\";\nimport { EventType, TransportType } from \"../types\";\n\n/**\n * An event that emits values received from\n * any of its bound events\n */\nexport function Any<const T>(...events: EventType<T>[]) {\n  return new AnyEvent<T>(...events);\n}\n\nclass AnyEvent<T> implements EventType<T> {\n  private $events: EventType<T>[];\n\n  public constructor(...events: EventType<T>[]) {\n    this.$events = events;\n  }\n\n  public event(transport: TransportType<T>): this {\n    this.$events.forEach((event) => {\n      ensureEvent(event, \"Any: item\");\n      event.event(transport);\n    });\n    return this;\n  }\n}\n","import { TransportParent } from \"../base/Transport\";\nimport { ensureEvent } from \"../helpers\";\nimport { ConstructorType, EventType, TransportType } from \"../types\";\n\n/**\n * An event that applies a function\n * to the value of the base event\n */\nexport function Applied<const T, R>(\n  $base: EventType<T>,\n  applier: ConstructorType<[T], R>,\n) {\n  return new AppliedEvent<T, R>($base, applier);\n}\n\nclass AppliedEvent<T, R> implements EventType<R> {\n  public constructor(\n    private $base: EventType<T>,\n    private applier: ConstructorType<[T], R>,\n  ) {\n    ensureEvent($base, \"Applied: base\");\n  }\n\n  public event(transport: TransportType<R>) {\n    this.$base.event(this.transport.child(transport));\n    return this;\n  }\n\n  private transport = TransportParent(function (\n    v: T,\n    child: AppliedEvent<T, R>,\n  ) {\n    this.use(child.applier(v));\n  }, this);\n}\n","import { ensureEvent, ensureTransport } from \"../helpers\";\nimport { EventType, TransportType } from \"../types\";\n\n/**\n * An event representing a base event where\n * its operation is wrapped in try-catch\n * and expects exceptions. If an exception\n * bubbles up, it's passed to the transports\n * as errorMessage and errorOriginal\n */\nexport function Catch<T>(\n  $base: EventType<T>,\n  errorMessage: TransportType,\n  errorOriginal?: TransportType,\n) {\n  return new CatchEvent<T>($base, errorMessage, errorOriginal);\n}\n\nclass CatchEvent<T> implements EventType<T> {\n  public constructor(\n    private $base: EventType<T>,\n    private errorMessage: TransportType,\n    private errorOriginal?: TransportType,\n  ) {\n    ensureEvent($base, \"Catch: base\");\n    ensureTransport(errorMessage, \"Catch: errorMessage\");\n    if (errorOriginal !== undefined) {\n      ensureTransport(errorOriginal, \"Catch: errorOriginal\");\n    }\n  }\n\n  public event(transport: TransportType<T>) {\n    try {\n      this.$base.event(transport);\n    } catch (e: unknown) {\n      if (e instanceof Error) {\n        this.errorMessage.use(e.message);\n      } else {\n        this.errorMessage.use(String(e));\n      }\n      if (this.errorOriginal) {\n        this.errorOriginal.use(e);\n      }\n    }\n    return this;\n  }\n}\n","import { TransportParent } from \"../base/Transport\";\nimport { EventType, TransportType } from \"../types\";\nimport { EventTypeValue } from \"../types/EventType\";\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ntype Last<T extends readonly any[]> = T extends readonly [...infer _, infer L]\n  ? L\n  : never;\n\n/**\n * Chains events together and triggers\n * the last event only when all previous events\n * have emitted their values. The value of Chain will be the value\n * of the last event. If any events\n * emit a value again after the overall Chain response was already returned,\n * then Chain emits again with the value of the last event.\n */\nexport function Chain<T extends readonly EventType[]>(...events: T) {\n  return new ChainEvent<T>(...events);\n}\n\nexport class ChainEvent<T extends readonly EventType[]>\n  implements EventType<EventTypeValue<Last<T>>>\n{\n  private $events: T;\n  private $latest: EventTypeValue<Last<T>> | undefined;\n\n  public constructor(...events: T) {\n    this.$events = events;\n  }\n\n  public event(transport: TransportType<EventTypeValue<Last<T>>>) {\n    this.handleEvent(0, transport);\n    return this;\n  }\n\n  private handleEvent = (index: number, transport: TransportType) => {\n    const event = this.$events[index] as Last<T>;\n    const next = this.$events[index + 1] as Last<T> | undefined;\n    event.event(this.oneEventTransport.child(transport, next, index));\n  };\n\n  private oneEventTransport = TransportParent(function (\n    v: EventTypeValue<Last<T>>,\n    child: ChainEvent<T>,\n    next: Last<T> | undefined,\n    index: number,\n  ) {\n    if (!next) {\n      child.$latest = v as EventTypeValue<Last<T>>;\n    }\n    if (child.$latest) {\n      this.use(child.$latest);\n    }\n    if (next && !child.$latest) {\n      child.handleEvent(index + 1, this);\n    }\n  }, this);\n}\n","import { Transport, TransportExecutor } from \"../base\";\nimport { ensureEvent } from \"../helpers\";\nimport { EventType, TransportType } from \"../types\";\n\ntype ExecutorApplier<T> = (\n  executor: TransportExecutor<T>,\n) => TransportExecutor<T>;\n\n/**\n * Applies a value transfer function to the transport\n * and returns the same value transfer function for the transport\n * Useful for applying functions like debounced or throttle\n */\nexport function ExecutorApplied<T>(\n  $base: EventType<T>,\n  applier: ExecutorApplier<T>,\n) {\n  return new ExecutorAppliedEvent<T>($base, applier);\n}\n\nclass ExecutorAppliedEvent<T> implements EventType<T> {\n  public constructor(\n    private $base: EventType<T>,\n    private applier: ExecutorApplier<T>,\n  ) {\n    ensureEvent($base, \"ExecutorApplied: base\");\n  }\n\n  public event(transport: TransportType<T>) {\n    const ExecutorAppliedBaseTransport = this.applier(\n      transport.use.bind(transport),\n    );\n    this.$base.event(Transport(ExecutorAppliedBaseTransport));\n    return this;\n  }\n}\n","import { TransportParent } from \"../base/Transport\";\nimport { ConstructorType, EventType, TransportType } from \"../types\";\n\n/**\n * Filters values from the source event based on a predicate function,\n * optionally providing a default value when the predicate fails.\n */\nexport function Filtered<T>(\n  $base: EventType<T>,\n  predicate: ConstructorType<[T], boolean>,\n  defaultValue?: T,\n) {\n  return new FilteredEvent<T>($base, predicate, defaultValue);\n}\n\nclass FilteredEvent<T> implements EventType<T> {\n  public constructor(\n    private $base: EventType<T>,\n    private predicate: ConstructorType<[T], boolean>,\n    private defaultValue?: T,\n  ) {}\n\n  public event(transport: TransportType<T>) {\n    this.$base.event(this.parent.child(transport));\n    return this;\n  }\n\n  private parent = TransportParent<T>(function (v, child: FilteredEvent<T>) {\n    if (child.predicate(v)) {\n      this.use(v);\n    } else if (child.defaultValue !== undefined) {\n      this.use(child.defaultValue);\n    }\n  }, this);\n}\n","import { Transport, TransportParent } from \"../base/Transport\";\nimport { EventType, TransportType } from \"../types\";\nimport { DestroyableType } from \"../types/EventType\";\nimport { All } from \"./All\";\n\n/**\n * An event derived from another event with a different\n * method call interface, based on callbacks.\n * Allows attaching a custom handler to an existing event source\n * and presenting it as a silentium event\n */\nexport function FromEvent<T>(\n  $emitter: EventType<any>,\n  $eventName: EventType<string>,\n  $subscribeMethod: EventType<string>,\n  $unsubscribeMethod?: EventType<string>,\n) {\n  return new FromEventAdapter<T>(\n    $emitter,\n    $eventName,\n    $subscribeMethod,\n    $unsubscribeMethod,\n  );\n}\n\nclass FromEventAdapter<T> implements EventType<T>, DestroyableType {\n  private lastTransport: TransportType<T> | null = null;\n  private handler = (v: T) => {\n    if (this.lastTransport) {\n      this.lastTransport.use(v);\n    }\n  };\n\n  public constructor(\n    private $emitter: EventType<any>,\n    private $eventName: EventType<string>,\n    private $subscribeMethod: EventType<string>,\n    private $unsubscribeMethod?: EventType<string>,\n  ) {}\n\n  public event(transport: TransportType<T>): this {\n    All(this.$emitter, this.$eventName, this.$subscribeMethod).event(\n      this.parent.child(transport),\n    );\n    return this;\n  }\n\n  private parent = TransportParent<[any, string, string]>(function (\n    [emitter, eventName, subscribe],\n    child,\n  ) {\n    child.lastTransport = this;\n    if (!emitter?.[subscribe]) {\n      return;\n    }\n    emitter[subscribe](eventName, child.handler);\n  }, this);\n\n  public destroy(): this {\n    this.lastTransport = null;\n    if (!this.$unsubscribeMethod) {\n      return this;\n    }\n    All(this.$emitter, this.$eventName, this.$unsubscribeMethod).event(\n      Transport(([emitter, eventName, unsubscribe]) => {\n        emitter?.[unsubscribe]?.(eventName, this.handler);\n      }),\n    );\n    return this;\n  }\n}\n","import { EventType, TransportType } from \"../types\";\n\n/**\n * Creates an event from a Promise, allowing the promise's resolution or rejection\n * to be handled as an event. The resolved value is emitted to the transport,\n * and if an error is provided, rejections are forwarded to it.\n */\nexport function FromPromise<T>(p: Promise<T>, error?: TransportType) {\n  return new FromPromiseEvent<T>(p, error);\n}\n\nexport class FromPromiseEvent<T> implements EventType<T> {\n  public constructor(\n    private p: Promise<T>,\n    private error?: TransportType,\n  ) {}\n\n  public event(transport: TransportType<T>): this {\n    this.p\n      .then((v) => {\n        transport.use(v);\n      })\n      .catch((e) => {\n        this.error?.use(e);\n      });\n    return this;\n  }\n}\n","import { isFilled } from \"../helpers\";\nimport { TransportType, SourceType } from \"../types\";\n\n/**\n * A component that allows creating linked objects of information and its owner\n * in such a way that if a new value is assigned to the owner, this value\n * will become the value of the linked information source\n * https://silentium-lab.github.io/silentium/#/en/information/of\n */\nexport function Late<T>(v?: T) {\n  return new LateEvent<T>(v);\n}\n\nclass LateEvent<T> implements SourceType<T> {\n  private lateTransport: TransportType<T> | null = null;\n  private notify = (v?: T) => {\n    if (isFilled(v) && this.lateTransport) {\n      this.lateTransport.use(v);\n    }\n  };\n\n  public constructor(private v?: T) {}\n\n  public event(transport: TransportType<T>): this {\n    if (this.lateTransport) {\n      throw new Error(\n        \"Late component gets new transport, when another was already connected!\",\n      );\n    }\n    this.lateTransport = transport;\n    this.notify(this.v);\n    return this;\n  }\n\n  public use(value: T): this {\n    this.notify(value);\n    return this;\n  }\n}\n","import { TransportParent } from \"../base\";\nimport { EventType, TransportType } from \"../types\";\n\n/**\n * Limits the number of values from the information source\n * to a single value - once the first value is emitted, no more\n * values are delivered from the source\n */\nexport function Once<T>($base: EventType<T>) {\n  return new OnceEvent<T>($base);\n}\n\nclass OnceEvent<T> implements EventType<T> {\n  private isFilled = false;\n\n  public constructor(private $base: EventType<T>) {}\n\n  public event(transport: TransportType<T>): this {\n    this.$base.event(this.parent.child(transport));\n    return this;\n  }\n\n  private parent = TransportParent<T>(function (v, child) {\n    if (!child.isFilled) {\n      child.isFilled = true;\n      this.use(v);\n    }\n  }, this);\n}\n","import { Transport } from \"../base\";\nimport { Late } from \"../components/Late\";\nimport { Once } from \"../components/Once\";\nimport { isFilled, OwnerPool } from \"../helpers\";\nimport { EventType, TransportType, SourceType } from \"../types\";\n\n/**\n * An information object that helps multiple owners access\n * a single another information object\n */\nexport function Shared<T>($base: EventType<T>, stateless = false) {\n  return new SharedEvent<T>($base, stateless);\n}\n\nclass SharedEvent<T> implements SourceType<T> {\n  private ownersPool = new OwnerPool<T>();\n  private lastValue: T | undefined;\n  private calls = Late();\n\n  public constructor(\n    private $base: EventType<T>,\n    private stateless = false,\n  ) {\n    Once(this.calls).event(\n      Transport(() => {\n        this.$base.event(this.firstCallTransport);\n      }),\n    );\n  }\n\n  public event(transport: TransportType<T>) {\n    this.calls.use(1);\n    if (\n      !this.stateless &&\n      isFilled(this.lastValue) &&\n      !this.ownersPool.has(transport)\n    ) {\n      transport.use(this.lastValue);\n    }\n    this.ownersPool.add(transport);\n    return this;\n  }\n\n  public use(value: T) {\n    this.calls.use(1);\n    this.lastValue = value;\n    this.ownersPool.owner().use(value);\n    return this;\n  }\n\n  private firstCallTransport = Transport<T>((v: T) => {\n    this.lastValue = v;\n    this.ownersPool.owner().use(v);\n  });\n\n  public touched() {\n    this.calls.use(1);\n  }\n\n  public pool() {\n    return this.ownersPool;\n  }\n\n  public destroy() {\n    return this.ownersPool.destroy();\n  }\n}\n","import { Shared } from \"../components/Shared\";\nimport { TransportType, SourceType } from \"../types\";\n\n/**\n * Creates a shared source that allows multiple transports to subscribe to the same underlying source.\n * The stateless parameter controls whether the sharing maintains state or not.\n */\nexport function SharedSource<T>($base: SourceType<T>, stateless = false) {\n  return new SharedSourceEvent<T>($base, stateless);\n}\n\nclass SharedSourceEvent<T> implements SourceType<T> {\n  private $sharedBase: SourceType<T> & { touched: () => void };\n\n  public constructor(\n    private $base: SourceType<T>,\n    stateless = false,\n  ) {\n    this.$sharedBase = Shared(this.$base, stateless);\n  }\n\n  public event(transport: TransportType<T>) {\n    this.$sharedBase.event(transport);\n    return this;\n  }\n\n  public use(value: T) {\n    this.$sharedBase.touched();\n    this.$base.use(value);\n    return this;\n  }\n}\n","import { Late } from \"../components/Late\";\nimport { SharedSource } from \"../components/SharedSource\";\nimport { TransportType, SourceType } from \"../types\";\n\n/**\n * An event with a value that will be set later,\n * capable of responding to different transports\n */\nexport function LateShared<T>(value?: T) {\n  return new LateSharedEvent<T>(value);\n}\n\nclass LateSharedEvent<T> implements SourceType<T> {\n  private $event: SourceType<T>;\n\n  public constructor(value?: T) {\n    this.$event = SharedSource(Late(value));\n  }\n\n  public event(transport: TransportType<T>) {\n    this.$event.event(transport);\n    return this;\n  }\n\n  public use(value: T) {\n    this.$event.use(value);\n    return this;\n  }\n}\n","import { Of, TransportParent } from \"../base\";\nimport { isEvent } from \"../helpers\";\nimport { EventType, TransportType } from \"../types\";\nimport { All } from \"./All\";\n\n/**\n * Component that applies an info object constructor to each data item,\n * producing an information source with new values\n */\nexport function Map<T, TG>(\n  $base: EventType<T[]>,\n  $target: TransportType<any, EventType<TG>>,\n) {\n  return new MapEvent<T, TG>($base, $target);\n}\n\nclass MapEvent<T, TG> implements EventType<TG[]> {\n  public constructor(\n    private $base: EventType<T[]>,\n    private $target: TransportType<any, EventType<TG>>,\n  ) {}\n\n  public event(transport: TransportType<TG[]>): this {\n    this.$base.event(this.parent.child(transport));\n    return this;\n  }\n\n  private parent = TransportParent<T[]>(function (v, child) {\n    const infos: EventType<TG>[] = [];\n    v.forEach((val) => {\n      let $val: EventType<T> | T = val;\n      if (!isEvent($val as object)) {\n        $val = Of($val);\n      }\n      const info = child.$target.use($val);\n      infos.push(info);\n    });\n    All(...infos).event(this);\n  }, this);\n}\n","import { Transport } from \"../base\";\nimport { EventType } from \"../types\";\n\n/**\n * Helps represent an event as a primitive type, which can be useful\n * for cases when you need to always have a reference to the current value\n * without updating the shared value when the current one changes.\n * For example, this could be used when passing an authorization token.\n * It can also be useful for testing or logging purposes.\n */\nexport function Primitive<T>($base: EventType<T>, theValue: T | null = null) {\n  return new PrimitiveImpl<T>($base, theValue);\n}\n\nclass PrimitiveImpl<T> {\n  private touched = false;\n\n  public constructor(\n    private $base: EventType<T>,\n    private theValue: T | null = null,\n  ) {}\n\n  private ensureTouched() {\n    if (!this.touched) {\n      this.$base.event(\n        Transport((v) => {\n          this.theValue = v;\n        }),\n      );\n    }\n    this.touched = true;\n  }\n\n  public [Symbol.toPrimitive]() {\n    this.ensureTouched();\n    return this.theValue;\n  }\n\n  public primitive() {\n    this.ensureTouched();\n    return this.theValue;\n  }\n\n  public primitiveWithException() {\n    this.ensureTouched();\n    if (this.theValue === null) {\n      throw new Error(\"Primitive value is null\");\n    }\n    return this.theValue;\n  }\n}\n","import { TransportParent } from \"../base\";\nimport { EventType, TransportType } from \"../types\";\n\n/**\n * Creates a sequence that accumulates all values from the source into an array,\n * emitting the growing array with each new value.\n */\nexport function Sequence<T>($base: EventType<T>) {\n  return new SequenceEvent<T>($base);\n}\n\nclass SequenceEvent<T> implements EventType<T[]> {\n  private result: T[] = [];\n\n  public constructor(private $base: EventType<T>) {}\n\n  public event(transport: TransportType<T[]>): this {\n    this.$base.event(this.parent.child(transport));\n    return this;\n  }\n\n  private parent = TransportParent<T>(function (v, child) {\n    child.result.push(v);\n    this.use(child.result);\n  }, this);\n}\n","import { TransportParent } from \"../base\";\nimport { EventType, TransportType } from \"../types\";\n\n/**\n * Component that receives a data array and yields values one by one\n */\nexport function Stream<T>($base: EventType<T[]>) {\n  return new StreamEvent<T>($base);\n}\n\nclass StreamEvent<T> implements EventType<T> {\n  public constructor(private $base: EventType<T[]>) {}\n\n  public event(transport: TransportType<T>): this {\n    this.$base.event(this.parent.child(transport));\n    return this;\n  }\n\n  private parent = TransportParent<T[]>(function (v) {\n    v.forEach((cv) => {\n      this.use(cv);\n    });\n  });\n}\n","import { EventType, ConstructorType, TransportType } from \"../types\";\n\n/**\n * Creates a transport that applies a constructor to the result of another transport.\n */\nexport function TransportApplied<T>(\n  baseTransport: TransportType<any, EventType<T>>,\n  applier: ConstructorType<[EventType], EventType<T>>,\n) {\n  return new TransportAppliedImpl(baseTransport, applier);\n}\n\nexport class TransportAppliedImpl<T>\n  implements TransportType<unknown, EventType<T>>\n{\n  public constructor(\n    private baseTransport: TransportType<any, EventType<T>>,\n    private applier: ConstructorType<[EventType], EventType<T>>,\n  ) {}\n\n  public use(args: unknown) {\n    return this.applier(this.baseTransport.use(args));\n  }\n}\n","import { EventType, TransportType } from \"../types\";\n\n/**\n * Creates a transport that merges additional arguments into the base transport's arguments\n * at a specified index position, allowing for flexible argument composition\n */\nexport function TransportArgs(\n  baseTransport: TransportType<any[], EventType>,\n  args: unknown[],\n  startFromArgIndex: number = 0,\n) {\n  return new TransportArgsImpl(baseTransport, args, startFromArgIndex);\n}\n\nexport class TransportArgsImpl\n  implements TransportType<unknown[], EventType<unknown>>\n{\n  public constructor(\n    private baseTransport: TransportType<any[], EventType>,\n    private args: unknown[],\n    private startFromArgIndex: number = 0,\n  ) {}\n\n  public use(runArgs: unknown[]): EventType<unknown> {\n    return this.baseTransport.use(\n      mergeAtIndex(runArgs, this.args, this.startFromArgIndex),\n    );\n  }\n}\n\nfunction mergeAtIndex(arr1: unknown[], arr2: unknown[], index: number) {\n  const result = arr1.slice(0, index);\n  while (result.length < index) result.push(undefined);\n  return result.concat(arr2);\n}\n","import { isDestroyable } from \"../helpers\";\nimport { DestroyableType, EventType, TransportType } from \"../types\";\n\n/**\n * Creates a transport wrapper that automatically manages destruction of created instances\n */\nexport function TransportDestroyable<T>(\n  baseTransport: TransportType<any[], EventType<T>>,\n) {\n  return new TransportDestroyableEvent<T>(baseTransport);\n}\n\nclass TransportDestroyableEvent<T>\n  implements TransportType<unknown, EventType<T>>, DestroyableType\n{\n  private destructors: DestroyableType[] = [];\n\n  public constructor(\n    private baseTransport: TransportType<any[], EventType<T>>,\n  ) {}\n\n  public use(args: any[]) {\n    const inst = this.baseTransport.use(args);\n    if (isDestroyable(inst)) {\n      this.destructors.push(inst);\n    }\n    return inst;\n  }\n\n  public destroy(): this {\n    this.destructors.forEach((i) => i.destroy());\n    return this;\n  }\n}\n"],"names":["__publicField"],"mappings":"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"}